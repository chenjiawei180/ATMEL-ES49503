
ATMEL-ES49503.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000024b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  20000070  00002520  00020070  2**2
                  ALLOC
  3 .stack        00002004  2000017c  0000262c  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00026523  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003dc7  00000000  00000000  00046614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008082  00000000  00000000  0004a3db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000668  00000000  00000000  0005245d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a88  00000000  00000000  00052ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000224c3  00000000  00000000  0005354d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013138  00000000  00000000  00075a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009fe67  00000000  00000000  00088b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001464  00000000  00000000  001289b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002180 	.word	0x20002180
       4:	00001969 	.word	0x00001969
       8:	00001965 	.word	0x00001965
       c:	00001965 	.word	0x00001965
	...
      2c:	00001965 	.word	0x00001965
	...
      38:	00001965 	.word	0x00001965
      3c:	00001965 	.word	0x00001965
      40:	00001965 	.word	0x00001965
      44:	00001965 	.word	0x00001965
      48:	00001965 	.word	0x00001965
      4c:	00000279 	.word	0x00000279
      50:	00001965 	.word	0x00001965
      54:	00001965 	.word	0x00001965
      58:	00001965 	.word	0x00001965
      5c:	00001965 	.word	0x00001965
      60:	00001965 	.word	0x00001965
      64:	000008a5 	.word	0x000008a5
      68:	000008b5 	.word	0x000008b5
      6c:	000008c5 	.word	0x000008c5
      70:	000008d5 	.word	0x000008d5
      74:	000008e5 	.word	0x000008e5
      78:	000008f5 	.word	0x000008f5
      7c:	00001965 	.word	0x00001965
      80:	00001965 	.word	0x00001965
      84:	00001965 	.word	0x00001965
      88:	00001965 	.word	0x00001965
      8c:	00001965 	.word	0x00001965
      90:	00001965 	.word	0x00001965
      94:	00001965 	.word	0x00001965
      98:	00001965 	.word	0x00001965
      9c:	00001965 	.word	0x00001965
      a0:	00001965 	.word	0x00001965
      a4:	00001965 	.word	0x00001965
      a8:	00001965 	.word	0x00001965
      ac:	00001965 	.word	0x00001965
      b0:	00001965 	.word	0x00001965
      b4:	00001965 	.word	0x00001965
      b8:	00001965 	.word	0x00001965

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000070 	.word	0x20000070
      dc:	00000000 	.word	0x00000000
      e0:	000024b0 	.word	0x000024b0

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000074 	.word	0x20000074
     110:	000024b0 	.word	0x000024b0
     114:	000024b0 	.word	0x000024b0
     118:	00000000 	.word	0x00000000

0000011c <Configure_Flash>:
  * @param  None
  * @retval None
  */

void Configure_Flash(void)
{
     11c:	b500      	push	{lr}
     11e:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
     120:	2300      	movs	r3, #0
     122:	466a      	mov	r2, sp
     124:	7013      	strb	r3, [r2, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
     126:	4a07      	ldr	r2, [pc, #28]	; (144 <Configure_Flash+0x28>)
     128:	6852      	ldr	r2, [r2, #4]
     12a:	06d2      	lsls	r2, r2, #27
     12c:	0f12      	lsrs	r2, r2, #28
     12e:	4669      	mov	r1, sp
     130:	708a      	strb	r2, [r1, #2]
	config->disable_cache     = false;
     132:	70cb      	strb	r3, [r1, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
     134:	710b      	strb	r3, [r1, #4]
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
     136:	714b      	strb	r3, [r1, #5]
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
     138:	704b      	strb	r3, [r1, #1]
	nvm_set_config(&config_nvm);
     13a:	4668      	mov	r0, sp
     13c:	4b02      	ldr	r3, [pc, #8]	; (148 <Configure_Flash+0x2c>)
     13e:	4798      	blx	r3
}
     140:	b003      	add	sp, #12
     142:	bd00      	pop	{pc}
     144:	41004000 	.word	0x41004000
     148:	00000385 	.word	0x00000385

0000014c <SPI_Slave_Low>:
  * @param  None
  * @retval None
  */

void SPI_Slave_Low(void)
{
     14c:	b510      	push	{r4, lr}
	spi_select_slave(&spi_master_instance, &slave, true);
     14e:	2201      	movs	r2, #1
     150:	4902      	ldr	r1, [pc, #8]	; (15c <SPI_Slave_Low+0x10>)
     152:	4803      	ldr	r0, [pc, #12]	; (160 <SPI_Slave_Low+0x14>)
     154:	4b03      	ldr	r3, [pc, #12]	; (164 <SPI_Slave_Low+0x18>)
     156:	4798      	blx	r3
}
     158:	bd10      	pop	{r4, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	200000dc 	.word	0x200000dc
     160:	200000d0 	.word	0x200000d0
     164:	00000c2d 	.word	0x00000c2d

00000168 <Configure_Spi_Master>:
  * @param  None
  * @retval None
  */

void Configure_Spi_Master(void)
{
     168:	b530      	push	{r4, r5, lr}
     16a:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     16c:	4c27      	ldr	r4, [pc, #156]	; (20c <Configure_Spi_Master+0xa4>)
     16e:	2311      	movs	r3, #17
     170:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     172:	2300      	movs	r3, #0
     174:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     176:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     178:	a901      	add	r1, sp, #4
     17a:	2201      	movs	r2, #1
     17c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     17e:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     180:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     182:	2011      	movs	r0, #17
     184:	4b22      	ldr	r3, [pc, #136]	; (210 <Configure_Spi_Master+0xa8>)
     186:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     188:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     18a:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     18c:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     18e:	2a00      	cmp	r2, #0
     190:	d105      	bne.n	19e <Configure_Spi_Master+0x36>
		return &(ports[port_index]->Group[group_index]);
     192:	0959      	lsrs	r1, r3, #5
     194:	01c9      	lsls	r1, r1, #7
     196:	2282      	movs	r2, #130	; 0x82
     198:	05d2      	lsls	r2, r2, #23
     19a:	4694      	mov	ip, r2
     19c:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     19e:	221f      	movs	r2, #31
     1a0:	4013      	ands	r3, r2
     1a2:	3a1e      	subs	r2, #30
     1a4:	0010      	movs	r0, r2
     1a6:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1a8:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     1aa:	ac02      	add	r4, sp, #8
     1ac:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     1ae:	2300      	movs	r3, #0
     1b0:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     1b2:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     1b4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     1b6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     1b8:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     1ba:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     1bc:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     1be:	3223      	adds	r2, #35	; 0x23
     1c0:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     1c2:	3a18      	subs	r2, #24
     1c4:	2100      	movs	r1, #0
     1c6:	a808      	add	r0, sp, #32
     1c8:	4b12      	ldr	r3, [pc, #72]	; (214 <Configure_Spi_Master+0xac>)
     1ca:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     1cc:	4b12      	ldr	r3, [pc, #72]	; (218 <Configure_Spi_Master+0xb0>)
     1ce:	61a3      	str	r3, [r4, #24]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = CONF_MASTER_SS_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
     1d0:	2380      	movs	r3, #128	; 0x80
     1d2:	025b      	lsls	r3, r3, #9
     1d4:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
     1d6:	4b11      	ldr	r3, [pc, #68]	; (21c <Configure_Spi_Master+0xb4>)
     1d8:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
     1da:	2301      	movs	r3, #1
     1dc:	425b      	negs	r3, r3
     1de:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
     1e0:	4b0f      	ldr	r3, [pc, #60]	; (220 <Configure_Spi_Master+0xb8>)
     1e2:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
     1e4:	4b0f      	ldr	r3, [pc, #60]	; (224 <Configure_Spi_Master+0xbc>)
     1e6:	6363      	str	r3, [r4, #52]	; 0x34
	
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
     1e8:	4d0f      	ldr	r5, [pc, #60]	; (228 <Configure_Spi_Master+0xc0>)
     1ea:	0022      	movs	r2, r4
     1ec:	490f      	ldr	r1, [pc, #60]	; (22c <Configure_Spi_Master+0xc4>)
     1ee:	0028      	movs	r0, r5
     1f0:	4b0f      	ldr	r3, [pc, #60]	; (230 <Configure_Spi_Master+0xc8>)
     1f2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1f4:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     1f6:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     1f8:	2b00      	cmp	r3, #0
     1fa:	d1fc      	bne.n	1f6 <Configure_Spi_Master+0x8e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     1fc:	6811      	ldr	r1, [r2, #0]
     1fe:	3302      	adds	r3, #2
     200:	430b      	orrs	r3, r1
     202:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
	SPI_Slave_Low();
     204:	4b0b      	ldr	r3, [pc, #44]	; (234 <Configure_Spi_Master+0xcc>)
     206:	4798      	blx	r3
}
     208:	b011      	add	sp, #68	; 0x44
     20a:	bd30      	pop	{r4, r5, pc}
     20c:	200000dc 	.word	0x200000dc
     210:	00000411 	.word	0x00000411
     214:	00001c43 	.word	0x00001c43
     218:	000186a0 	.word	0x000186a0
     21c:	00100002 	.word	0x00100002
     220:	00120002 	.word	0x00120002
     224:	00130002 	.word	0x00130002
     228:	200000d0 	.word	0x200000d0
     22c:	42000800 	.word	0x42000800
     230:	00000905 	.word	0x00000905
     234:	0000014d 	.word	0x0000014d

00000238 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     238:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     23a:	2000      	movs	r0, #0
     23c:	4b08      	ldr	r3, [pc, #32]	; (260 <delay_init+0x28>)
     23e:	4798      	blx	r3
     240:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     242:	4c08      	ldr	r4, [pc, #32]	; (264 <delay_init+0x2c>)
     244:	21fa      	movs	r1, #250	; 0xfa
     246:	0089      	lsls	r1, r1, #2
     248:	47a0      	blx	r4
     24a:	4b07      	ldr	r3, [pc, #28]	; (268 <delay_init+0x30>)
     24c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     24e:	4907      	ldr	r1, [pc, #28]	; (26c <delay_init+0x34>)
     250:	0028      	movs	r0, r5
     252:	47a0      	blx	r4
     254:	4b06      	ldr	r3, [pc, #24]	; (270 <delay_init+0x38>)
     256:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     258:	2205      	movs	r2, #5
     25a:	4b06      	ldr	r3, [pc, #24]	; (274 <delay_init+0x3c>)
     25c:	601a      	str	r2, [r3, #0]
}
     25e:	bd70      	pop	{r4, r5, r6, pc}
     260:	00001731 	.word	0x00001731
     264:	00001a75 	.word	0x00001a75
     268:	20000004 	.word	0x20000004
     26c:	000f4240 	.word	0x000f4240
     270:	20000000 	.word	0x20000000
     274:	e000e010 	.word	0xe000e010

00000278 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     278:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     27a:	2200      	movs	r2, #0
     27c:	4b15      	ldr	r3, [pc, #84]	; (2d4 <EIC_Handler+0x5c>)
     27e:	701a      	strb	r2, [r3, #0]
     280:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     282:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     284:	4e14      	ldr	r6, [pc, #80]	; (2d8 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     286:	4c13      	ldr	r4, [pc, #76]	; (2d4 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     288:	2b1f      	cmp	r3, #31
     28a:	d919      	bls.n	2c0 <EIC_Handler+0x48>
     28c:	e00f      	b.n	2ae <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     28e:	2100      	movs	r1, #0
     290:	e000      	b.n	294 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     292:	4912      	ldr	r1, [pc, #72]	; (2dc <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     294:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     296:	009b      	lsls	r3, r3, #2
     298:	599b      	ldr	r3, [r3, r6]
     29a:	2b00      	cmp	r3, #0
     29c:	d000      	beq.n	2a0 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     29e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2a0:	7823      	ldrb	r3, [r4, #0]
     2a2:	3301      	adds	r3, #1
     2a4:	b2db      	uxtb	r3, r3
     2a6:	7023      	strb	r3, [r4, #0]
     2a8:	2b0f      	cmp	r3, #15
     2aa:	d9ed      	bls.n	288 <EIC_Handler+0x10>
     2ac:	e011      	b.n	2d2 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2ae:	0029      	movs	r1, r5
     2b0:	4019      	ands	r1, r3
     2b2:	2201      	movs	r2, #1
     2b4:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     2b6:	2100      	movs	r1, #0
     2b8:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     2ba:	4211      	tst	r1, r2
     2bc:	d1e7      	bne.n	28e <EIC_Handler+0x16>
     2be:	e7ef      	b.n	2a0 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2c0:	0029      	movs	r1, r5
     2c2:	4019      	ands	r1, r3
     2c4:	2201      	movs	r2, #1
     2c6:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     2c8:	4904      	ldr	r1, [pc, #16]	; (2dc <EIC_Handler+0x64>)
     2ca:	6949      	ldr	r1, [r1, #20]
     2cc:	4211      	tst	r1, r2
     2ce:	d1e0      	bne.n	292 <EIC_Handler+0x1a>
     2d0:	e7e6      	b.n	2a0 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     2d2:	bd70      	pop	{r4, r5, r6, pc}
     2d4:	200000df 	.word	0x200000df
     2d8:	200000e0 	.word	0x200000e0
     2dc:	40002800 	.word	0x40002800

000002e0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     2e0:	4a06      	ldr	r2, [pc, #24]	; (2fc <_extint_enable+0x1c>)
     2e2:	7811      	ldrb	r1, [r2, #0]
     2e4:	2302      	movs	r3, #2
     2e6:	430b      	orrs	r3, r1
     2e8:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2ea:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2ec:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2ee:	6853      	ldr	r3, [r2, #4]
     2f0:	4219      	tst	r1, r3
     2f2:	d1fc      	bne.n	2ee <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2f4:	6853      	ldr	r3, [r2, #4]
     2f6:	4218      	tst	r0, r3
     2f8:	d1f9      	bne.n	2ee <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2fa:	4770      	bx	lr
     2fc:	40002800 	.word	0x40002800

00000300 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     300:	b500      	push	{lr}
     302:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     304:	4a18      	ldr	r2, [pc, #96]	; (368 <_system_extint_init+0x68>)
     306:	6953      	ldr	r3, [r2, #20]
     308:	2180      	movs	r1, #128	; 0x80
     30a:	00c9      	lsls	r1, r1, #3
     30c:	430b      	orrs	r3, r1
     30e:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     310:	a901      	add	r1, sp, #4
     312:	2300      	movs	r3, #0
     314:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     316:	2002      	movs	r0, #2
     318:	4b14      	ldr	r3, [pc, #80]	; (36c <_system_extint_init+0x6c>)
     31a:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     31c:	2002      	movs	r0, #2
     31e:	4b14      	ldr	r3, [pc, #80]	; (370 <_system_extint_init+0x70>)
     320:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     322:	4a14      	ldr	r2, [pc, #80]	; (374 <_system_extint_init+0x74>)
     324:	7811      	ldrb	r1, [r2, #0]
     326:	2301      	movs	r3, #1
     328:	430b      	orrs	r3, r1
     32a:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     32c:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     32e:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     330:	6853      	ldr	r3, [r2, #4]
     332:	4219      	tst	r1, r3
     334:	d1fc      	bne.n	330 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     336:	6853      	ldr	r3, [r2, #4]
     338:	4218      	tst	r0, r3
     33a:	d009      	beq.n	350 <_system_extint_init+0x50>
     33c:	e7f8      	b.n	330 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     33e:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     340:	428b      	cmp	r3, r1
     342:	d1fc      	bne.n	33e <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     344:	2208      	movs	r2, #8
     346:	4b0c      	ldr	r3, [pc, #48]	; (378 <_system_extint_init+0x78>)
     348:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     34a:	4b0c      	ldr	r3, [pc, #48]	; (37c <_system_extint_init+0x7c>)
     34c:	4798      	blx	r3
}
     34e:	e009      	b.n	364 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     350:	4a08      	ldr	r2, [pc, #32]	; (374 <_system_extint_init+0x74>)
     352:	7813      	ldrb	r3, [r2, #0]
     354:	2110      	movs	r1, #16
     356:	438b      	bics	r3, r1
     358:	7013      	strb	r3, [r2, #0]
     35a:	4b09      	ldr	r3, [pc, #36]	; (380 <_system_extint_init+0x80>)
     35c:	0019      	movs	r1, r3
     35e:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     360:	2200      	movs	r2, #0
     362:	e7ec      	b.n	33e <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     364:	b003      	add	sp, #12
     366:	bd00      	pop	{pc}
     368:	40000800 	.word	0x40000800
     36c:	0000180d 	.word	0x0000180d
     370:	0000179d 	.word	0x0000179d
     374:	40002800 	.word	0x40002800
     378:	e000e100 	.word	0xe000e100
     37c:	000002e1 	.word	0x000002e1
     380:	200000e0 	.word	0x200000e0

00000384 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     384:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     386:	4a1f      	ldr	r2, [pc, #124]	; (404 <nvm_set_config+0x80>)
     388:	6991      	ldr	r1, [r2, #24]
     38a:	2304      	movs	r3, #4
     38c:	430b      	orrs	r3, r1
     38e:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     390:	4b1d      	ldr	r3, [pc, #116]	; (408 <nvm_set_config+0x84>)
     392:	2220      	movs	r2, #32
     394:	32ff      	adds	r2, #255	; 0xff
     396:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     398:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     39a:	2305      	movs	r3, #5

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     39c:	07d2      	lsls	r2, r2, #31
     39e:	d52e      	bpl.n	3fe <nvm_set_config+0x7a>
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#else
	uint8_t cache_disable_value =  0;
	if (config->disable_rww_cache == false) {
     3a0:	7903      	ldrb	r3, [r0, #4]
		cache_disable_value = 0x02;
     3a2:	2402      	movs	r4, #2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#else
	uint8_t cache_disable_value =  0;
	if (config->disable_rww_cache == false) {
     3a4:	2b00      	cmp	r3, #0
     3a6:	d000      	beq.n	3aa <nvm_set_config+0x26>
		cache_disable_value = 0x02;
	} else {
		cache_disable_value = (config->disable_cache & 0x01);
     3a8:	78c4      	ldrb	r4, [r0, #3]
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     3aa:	7803      	ldrb	r3, [r0, #0]
     3ac:	021b      	lsls	r3, r3, #8
     3ae:	22c0      	movs	r2, #192	; 0xc0
     3b0:	0092      	lsls	r2, r2, #2
     3b2:	4013      	ands	r3, r2
     3b4:	7842      	ldrb	r2, [r0, #1]
     3b6:	01d2      	lsls	r2, r2, #7
     3b8:	21ff      	movs	r1, #255	; 0xff
     3ba:	400a      	ands	r2, r1
     3bc:	4313      	orrs	r3, r2
     3be:	0019      	movs	r1, r3
     3c0:	7882      	ldrb	r2, [r0, #2]
     3c2:	0052      	lsls	r2, r2, #1
     3c4:	231e      	movs	r3, #30
     3c6:	401a      	ands	r2, r3
     3c8:	000b      	movs	r3, r1
     3ca:	4313      	orrs	r3, r2
     3cc:	7942      	ldrb	r2, [r0, #5]
     3ce:	0412      	lsls	r2, r2, #16
     3d0:	21c0      	movs	r1, #192	; 0xc0
     3d2:	0289      	lsls	r1, r1, #10
     3d4:	400a      	ands	r2, r1
     3d6:	4313      	orrs	r3, r2
     3d8:	04a4      	lsls	r4, r4, #18
     3da:	4323      	orrs	r3, r4
		cache_disable_value = 0x02;
	} else {
		cache_disable_value = (config->disable_cache & 0x01);
	}
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
     3dc:	4a0a      	ldr	r2, [pc, #40]	; (408 <nvm_set_config+0x84>)
     3de:	6053      	str	r3, [r2, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     3e0:	6893      	ldr	r3, [r2, #8]
     3e2:	035b      	lsls	r3, r3, #13
     3e4:	0f5b      	lsrs	r3, r3, #29
     3e6:	4909      	ldr	r1, [pc, #36]	; (40c <nvm_set_config+0x88>)
     3e8:	2408      	movs	r4, #8
     3ea:	409c      	lsls	r4, r3
     3ec:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     3ee:	6893      	ldr	r3, [r2, #8]
     3f0:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     3f2:	7843      	ldrb	r3, [r0, #1]
     3f4:	710b      	strb	r3, [r1, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     3f6:	8b13      	ldrh	r3, [r2, #24]
     3f8:	05db      	lsls	r3, r3, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
     3fa:	0fdb      	lsrs	r3, r3, #31
     3fc:	011b      	lsls	r3, r3, #4
}
     3fe:	0018      	movs	r0, r3
     400:	bd10      	pop	{r4, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	40000800 	.word	0x40000800
     408:	41004000 	.word	0x41004000
     40c:	2000008c 	.word	0x2000008c

00000410 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     410:	b500      	push	{lr}
     412:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     414:	ab01      	add	r3, sp, #4
     416:	2280      	movs	r2, #128	; 0x80
     418:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     41a:	780a      	ldrb	r2, [r1, #0]
     41c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     41e:	784a      	ldrb	r2, [r1, #1]
     420:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     422:	788a      	ldrb	r2, [r1, #2]
     424:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     426:	0019      	movs	r1, r3
     428:	4b01      	ldr	r3, [pc, #4]	; (430 <port_pin_set_config+0x20>)
     42a:	4798      	blx	r3
}
     42c:	b003      	add	sp, #12
     42e:	bd00      	pop	{pc}
     430:	00001909 	.word	0x00001909

00000434 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     434:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     436:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     438:	2340      	movs	r3, #64	; 0x40
     43a:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     43c:	4281      	cmp	r1, r0
     43e:	d201      	bcs.n	444 <_sercom_get_sync_baud_val+0x10>
     440:	e00a      	b.n	458 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     442:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     444:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     446:	1c63      	adds	r3, r4, #1
     448:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     44a:	4288      	cmp	r0, r1
     44c:	d9f9      	bls.n	442 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     44e:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     450:	2cff      	cmp	r4, #255	; 0xff
     452:	d801      	bhi.n	458 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     454:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     456:	2300      	movs	r3, #0
	}
}
     458:	0018      	movs	r0, r3
     45a:	bd10      	pop	{r4, pc}

0000045c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     45c:	b5f0      	push	{r4, r5, r6, r7, lr}
     45e:	465f      	mov	r7, fp
     460:	4656      	mov	r6, sl
     462:	464d      	mov	r5, r9
     464:	4644      	mov	r4, r8
     466:	b4f0      	push	{r4, r5, r6, r7}
     468:	b089      	sub	sp, #36	; 0x24
     46a:	000c      	movs	r4, r1
     46c:	9205      	str	r2, [sp, #20]
     46e:	aa12      	add	r2, sp, #72	; 0x48
     470:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     472:	0002      	movs	r2, r0
     474:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     476:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     478:	42a2      	cmp	r2, r4
     47a:	d900      	bls.n	47e <_sercom_get_async_baud_val+0x22>
     47c:	e0c6      	b.n	60c <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     47e:	2b00      	cmp	r3, #0
     480:	d151      	bne.n	526 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     482:	0002      	movs	r2, r0
     484:	0008      	movs	r0, r1
     486:	2100      	movs	r1, #0
     488:	4d64      	ldr	r5, [pc, #400]	; (61c <_sercom_get_async_baud_val+0x1c0>)
     48a:	47a8      	blx	r5
     48c:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     48e:	0026      	movs	r6, r4
     490:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     492:	2300      	movs	r3, #0
     494:	2400      	movs	r4, #0
     496:	9300      	str	r3, [sp, #0]
     498:	9401      	str	r4, [sp, #4]
     49a:	2200      	movs	r2, #0
     49c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     49e:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     4a0:	2120      	movs	r1, #32
     4a2:	468c      	mov	ip, r1
     4a4:	391f      	subs	r1, #31
     4a6:	9602      	str	r6, [sp, #8]
     4a8:	9703      	str	r7, [sp, #12]
     4aa:	2420      	movs	r4, #32
     4ac:	4264      	negs	r4, r4
     4ae:	1904      	adds	r4, r0, r4
     4b0:	d403      	bmi.n	4ba <_sercom_get_async_baud_val+0x5e>
     4b2:	000d      	movs	r5, r1
     4b4:	40a5      	lsls	r5, r4
     4b6:	46a8      	mov	r8, r5
     4b8:	e004      	b.n	4c4 <_sercom_get_async_baud_val+0x68>
     4ba:	4664      	mov	r4, ip
     4bc:	1a24      	subs	r4, r4, r0
     4be:	000d      	movs	r5, r1
     4c0:	40e5      	lsrs	r5, r4
     4c2:	46a8      	mov	r8, r5
     4c4:	000c      	movs	r4, r1
     4c6:	4084      	lsls	r4, r0
     4c8:	46a1      	mov	r9, r4

		r = r << 1;
     4ca:	0014      	movs	r4, r2
     4cc:	001d      	movs	r5, r3
     4ce:	18a4      	adds	r4, r4, r2
     4d0:	415d      	adcs	r5, r3
     4d2:	0022      	movs	r2, r4
     4d4:	002b      	movs	r3, r5

		if (n & bit_shift) {
     4d6:	4646      	mov	r6, r8
     4d8:	465f      	mov	r7, fp
     4da:	423e      	tst	r6, r7
     4dc:	d003      	beq.n	4e6 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     4de:	000e      	movs	r6, r1
     4e0:	4326      	orrs	r6, r4
     4e2:	0032      	movs	r2, r6
     4e4:	002b      	movs	r3, r5
		}

		if (r >= d) {
     4e6:	9c02      	ldr	r4, [sp, #8]
     4e8:	9d03      	ldr	r5, [sp, #12]
     4ea:	429d      	cmp	r5, r3
     4ec:	d80f      	bhi.n	50e <_sercom_get_async_baud_val+0xb2>
     4ee:	d101      	bne.n	4f4 <_sercom_get_async_baud_val+0x98>
     4f0:	4294      	cmp	r4, r2
     4f2:	d80c      	bhi.n	50e <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     4f4:	9c02      	ldr	r4, [sp, #8]
     4f6:	9d03      	ldr	r5, [sp, #12]
     4f8:	1b12      	subs	r2, r2, r4
     4fa:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     4fc:	464d      	mov	r5, r9
     4fe:	9e00      	ldr	r6, [sp, #0]
     500:	9f01      	ldr	r7, [sp, #4]
     502:	4335      	orrs	r5, r6
     504:	003c      	movs	r4, r7
     506:	4646      	mov	r6, r8
     508:	4334      	orrs	r4, r6
     50a:	9500      	str	r5, [sp, #0]
     50c:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     50e:	3801      	subs	r0, #1
     510:	d2cb      	bcs.n	4aa <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     512:	2200      	movs	r2, #0
     514:	2301      	movs	r3, #1
     516:	9800      	ldr	r0, [sp, #0]
     518:	9901      	ldr	r1, [sp, #4]
     51a:	1a12      	subs	r2, r2, r0
     51c:	418b      	sbcs	r3, r1
     51e:	0c12      	lsrs	r2, r2, #16
     520:	041b      	lsls	r3, r3, #16
     522:	431a      	orrs	r2, r3
     524:	e06f      	b.n	606 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     526:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     528:	2b01      	cmp	r3, #1
     52a:	d16c      	bne.n	606 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     52c:	0f63      	lsrs	r3, r4, #29
     52e:	9304      	str	r3, [sp, #16]
     530:	00e3      	lsls	r3, r4, #3
     532:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     534:	000a      	movs	r2, r1
     536:	2300      	movs	r3, #0
     538:	2100      	movs	r1, #0
     53a:	4c38      	ldr	r4, [pc, #224]	; (61c <_sercom_get_async_baud_val+0x1c0>)
     53c:	47a0      	blx	r4
     53e:	0004      	movs	r4, r0
     540:	000d      	movs	r5, r1
     542:	2300      	movs	r3, #0
     544:	469c      	mov	ip, r3
     546:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     548:	3320      	adds	r3, #32
     54a:	469b      	mov	fp, r3
     54c:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     54e:	4663      	mov	r3, ip
     550:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     552:	2300      	movs	r3, #0
     554:	9302      	str	r3, [sp, #8]
     556:	2200      	movs	r2, #0
     558:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     55a:	213f      	movs	r1, #63	; 0x3f
     55c:	9400      	str	r4, [sp, #0]
     55e:	9501      	str	r5, [sp, #4]
     560:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     562:	2120      	movs	r1, #32
     564:	4249      	negs	r1, r1
     566:	1879      	adds	r1, r7, r1
     568:	d403      	bmi.n	572 <_sercom_get_async_baud_val+0x116>
     56a:	0030      	movs	r0, r6
     56c:	4088      	lsls	r0, r1
     56e:	4684      	mov	ip, r0
     570:	e004      	b.n	57c <_sercom_get_async_baud_val+0x120>
     572:	4659      	mov	r1, fp
     574:	1bc9      	subs	r1, r1, r7
     576:	0030      	movs	r0, r6
     578:	40c8      	lsrs	r0, r1
     57a:	4684      	mov	ip, r0
     57c:	0031      	movs	r1, r6
     57e:	40b9      	lsls	r1, r7
     580:	4689      	mov	r9, r1

		r = r << 1;
     582:	0010      	movs	r0, r2
     584:	0019      	movs	r1, r3
     586:	1880      	adds	r0, r0, r2
     588:	4159      	adcs	r1, r3
     58a:	0002      	movs	r2, r0
     58c:	000b      	movs	r3, r1

		if (n & bit_shift) {
     58e:	4644      	mov	r4, r8
     590:	464d      	mov	r5, r9
     592:	402c      	ands	r4, r5
     594:	46a2      	mov	sl, r4
     596:	4664      	mov	r4, ip
     598:	9d04      	ldr	r5, [sp, #16]
     59a:	402c      	ands	r4, r5
     59c:	46a4      	mov	ip, r4
     59e:	4654      	mov	r4, sl
     5a0:	4665      	mov	r5, ip
     5a2:	432c      	orrs	r4, r5
     5a4:	d003      	beq.n	5ae <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     5a6:	0034      	movs	r4, r6
     5a8:	4304      	orrs	r4, r0
     5aa:	0022      	movs	r2, r4
     5ac:	000b      	movs	r3, r1
		}

		if (r >= d) {
     5ae:	9800      	ldr	r0, [sp, #0]
     5b0:	9901      	ldr	r1, [sp, #4]
     5b2:	4299      	cmp	r1, r3
     5b4:	d80a      	bhi.n	5cc <_sercom_get_async_baud_val+0x170>
     5b6:	d101      	bne.n	5bc <_sercom_get_async_baud_val+0x160>
     5b8:	4290      	cmp	r0, r2
     5ba:	d807      	bhi.n	5cc <_sercom_get_async_baud_val+0x170>
			r = r - d;
     5bc:	9800      	ldr	r0, [sp, #0]
     5be:	9901      	ldr	r1, [sp, #4]
     5c0:	1a12      	subs	r2, r2, r0
     5c2:	418b      	sbcs	r3, r1
			q |= bit_shift;
     5c4:	9902      	ldr	r1, [sp, #8]
     5c6:	4648      	mov	r0, r9
     5c8:	4301      	orrs	r1, r0
     5ca:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     5cc:	3f01      	subs	r7, #1
     5ce:	d2c8      	bcs.n	562 <_sercom_get_async_baud_val+0x106>
     5d0:	9c00      	ldr	r4, [sp, #0]
     5d2:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     5d4:	9902      	ldr	r1, [sp, #8]
     5d6:	9a07      	ldr	r2, [sp, #28]
     5d8:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     5da:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     5dc:	4910      	ldr	r1, [pc, #64]	; (620 <_sercom_get_async_baud_val+0x1c4>)
     5de:	428b      	cmp	r3, r1
     5e0:	d90b      	bls.n	5fa <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     5e2:	9b06      	ldr	r3, [sp, #24]
     5e4:	3301      	adds	r3, #1
     5e6:	b2db      	uxtb	r3, r3
     5e8:	0019      	movs	r1, r3
     5ea:	9306      	str	r3, [sp, #24]
     5ec:	0013      	movs	r3, r2
     5ee:	3301      	adds	r3, #1
     5f0:	9307      	str	r3, [sp, #28]
     5f2:	2908      	cmp	r1, #8
     5f4:	d1ad      	bne.n	552 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5f6:	2540      	movs	r5, #64	; 0x40
     5f8:	e008      	b.n	60c <_sercom_get_async_baud_val+0x1b0>
     5fa:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     5fc:	9a06      	ldr	r2, [sp, #24]
     5fe:	2a08      	cmp	r2, #8
     600:	d004      	beq.n	60c <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     602:	0352      	lsls	r2, r2, #13
     604:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     606:	9b05      	ldr	r3, [sp, #20]
     608:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     60a:	2500      	movs	r5, #0
}
     60c:	0028      	movs	r0, r5
     60e:	b009      	add	sp, #36	; 0x24
     610:	bc3c      	pop	{r2, r3, r4, r5}
     612:	4690      	mov	r8, r2
     614:	4699      	mov	r9, r3
     616:	46a2      	mov	sl, r4
     618:	46ab      	mov	fp, r5
     61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     61c:	00001b8d 	.word	0x00001b8d
     620:	00001fff 	.word	0x00001fff

00000624 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     624:	b510      	push	{r4, lr}
     626:	b082      	sub	sp, #8
     628:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     62a:	4b0e      	ldr	r3, [pc, #56]	; (664 <sercom_set_gclk_generator+0x40>)
     62c:	781b      	ldrb	r3, [r3, #0]
     62e:	2b00      	cmp	r3, #0
     630:	d001      	beq.n	636 <sercom_set_gclk_generator+0x12>
     632:	2900      	cmp	r1, #0
     634:	d00d      	beq.n	652 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     636:	a901      	add	r1, sp, #4
     638:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     63a:	2012      	movs	r0, #18
     63c:	4b0a      	ldr	r3, [pc, #40]	; (668 <sercom_set_gclk_generator+0x44>)
     63e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     640:	2012      	movs	r0, #18
     642:	4b0a      	ldr	r3, [pc, #40]	; (66c <sercom_set_gclk_generator+0x48>)
     644:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     646:	4b07      	ldr	r3, [pc, #28]	; (664 <sercom_set_gclk_generator+0x40>)
     648:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     64a:	2201      	movs	r2, #1
     64c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     64e:	2000      	movs	r0, #0
     650:	e006      	b.n	660 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     652:	4b04      	ldr	r3, [pc, #16]	; (664 <sercom_set_gclk_generator+0x40>)
     654:	785b      	ldrb	r3, [r3, #1]
     656:	4283      	cmp	r3, r0
     658:	d001      	beq.n	65e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     65a:	201d      	movs	r0, #29
     65c:	e000      	b.n	660 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     65e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     660:	b002      	add	sp, #8
     662:	bd10      	pop	{r4, pc}
     664:	20000094 	.word	0x20000094
     668:	0000180d 	.word	0x0000180d
     66c:	0000179d 	.word	0x0000179d

00000670 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     670:	4b44      	ldr	r3, [pc, #272]	; (784 <_sercom_get_default_pad+0x114>)
     672:	4298      	cmp	r0, r3
     674:	d033      	beq.n	6de <_sercom_get_default_pad+0x6e>
     676:	d806      	bhi.n	686 <_sercom_get_default_pad+0x16>
     678:	4b43      	ldr	r3, [pc, #268]	; (788 <_sercom_get_default_pad+0x118>)
     67a:	4298      	cmp	r0, r3
     67c:	d00d      	beq.n	69a <_sercom_get_default_pad+0x2a>
     67e:	4b43      	ldr	r3, [pc, #268]	; (78c <_sercom_get_default_pad+0x11c>)
     680:	4298      	cmp	r0, r3
     682:	d01b      	beq.n	6bc <_sercom_get_default_pad+0x4c>
     684:	e06f      	b.n	766 <_sercom_get_default_pad+0xf6>
     686:	4b42      	ldr	r3, [pc, #264]	; (790 <_sercom_get_default_pad+0x120>)
     688:	4298      	cmp	r0, r3
     68a:	d04a      	beq.n	722 <_sercom_get_default_pad+0xb2>
     68c:	4b41      	ldr	r3, [pc, #260]	; (794 <_sercom_get_default_pad+0x124>)
     68e:	4298      	cmp	r0, r3
     690:	d058      	beq.n	744 <_sercom_get_default_pad+0xd4>
     692:	4b41      	ldr	r3, [pc, #260]	; (798 <_sercom_get_default_pad+0x128>)
     694:	4298      	cmp	r0, r3
     696:	d166      	bne.n	766 <_sercom_get_default_pad+0xf6>
     698:	e032      	b.n	700 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     69a:	2901      	cmp	r1, #1
     69c:	d006      	beq.n	6ac <_sercom_get_default_pad+0x3c>
     69e:	2900      	cmp	r1, #0
     6a0:	d063      	beq.n	76a <_sercom_get_default_pad+0xfa>
     6a2:	2902      	cmp	r1, #2
     6a4:	d006      	beq.n	6b4 <_sercom_get_default_pad+0x44>
     6a6:	2903      	cmp	r1, #3
     6a8:	d006      	beq.n	6b8 <_sercom_get_default_pad+0x48>
     6aa:	e001      	b.n	6b0 <_sercom_get_default_pad+0x40>
     6ac:	483b      	ldr	r0, [pc, #236]	; (79c <_sercom_get_default_pad+0x12c>)
     6ae:	e067      	b.n	780 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     6b0:	2000      	movs	r0, #0
     6b2:	e065      	b.n	780 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6b4:	483a      	ldr	r0, [pc, #232]	; (7a0 <_sercom_get_default_pad+0x130>)
     6b6:	e063      	b.n	780 <_sercom_get_default_pad+0x110>
     6b8:	483a      	ldr	r0, [pc, #232]	; (7a4 <_sercom_get_default_pad+0x134>)
     6ba:	e061      	b.n	780 <_sercom_get_default_pad+0x110>
     6bc:	2901      	cmp	r1, #1
     6be:	d006      	beq.n	6ce <_sercom_get_default_pad+0x5e>
     6c0:	2900      	cmp	r1, #0
     6c2:	d054      	beq.n	76e <_sercom_get_default_pad+0xfe>
     6c4:	2902      	cmp	r1, #2
     6c6:	d006      	beq.n	6d6 <_sercom_get_default_pad+0x66>
     6c8:	2903      	cmp	r1, #3
     6ca:	d006      	beq.n	6da <_sercom_get_default_pad+0x6a>
     6cc:	e001      	b.n	6d2 <_sercom_get_default_pad+0x62>
     6ce:	4836      	ldr	r0, [pc, #216]	; (7a8 <_sercom_get_default_pad+0x138>)
     6d0:	e056      	b.n	780 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     6d2:	2000      	movs	r0, #0
     6d4:	e054      	b.n	780 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6d6:	4835      	ldr	r0, [pc, #212]	; (7ac <_sercom_get_default_pad+0x13c>)
     6d8:	e052      	b.n	780 <_sercom_get_default_pad+0x110>
     6da:	4835      	ldr	r0, [pc, #212]	; (7b0 <_sercom_get_default_pad+0x140>)
     6dc:	e050      	b.n	780 <_sercom_get_default_pad+0x110>
     6de:	2901      	cmp	r1, #1
     6e0:	d006      	beq.n	6f0 <_sercom_get_default_pad+0x80>
     6e2:	2900      	cmp	r1, #0
     6e4:	d045      	beq.n	772 <_sercom_get_default_pad+0x102>
     6e6:	2902      	cmp	r1, #2
     6e8:	d006      	beq.n	6f8 <_sercom_get_default_pad+0x88>
     6ea:	2903      	cmp	r1, #3
     6ec:	d006      	beq.n	6fc <_sercom_get_default_pad+0x8c>
     6ee:	e001      	b.n	6f4 <_sercom_get_default_pad+0x84>
     6f0:	4830      	ldr	r0, [pc, #192]	; (7b4 <_sercom_get_default_pad+0x144>)
     6f2:	e045      	b.n	780 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     6f4:	2000      	movs	r0, #0
     6f6:	e043      	b.n	780 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6f8:	482f      	ldr	r0, [pc, #188]	; (7b8 <_sercom_get_default_pad+0x148>)
     6fa:	e041      	b.n	780 <_sercom_get_default_pad+0x110>
     6fc:	482f      	ldr	r0, [pc, #188]	; (7bc <_sercom_get_default_pad+0x14c>)
     6fe:	e03f      	b.n	780 <_sercom_get_default_pad+0x110>
     700:	2901      	cmp	r1, #1
     702:	d006      	beq.n	712 <_sercom_get_default_pad+0xa2>
     704:	2900      	cmp	r1, #0
     706:	d036      	beq.n	776 <_sercom_get_default_pad+0x106>
     708:	2902      	cmp	r1, #2
     70a:	d006      	beq.n	71a <_sercom_get_default_pad+0xaa>
     70c:	2903      	cmp	r1, #3
     70e:	d006      	beq.n	71e <_sercom_get_default_pad+0xae>
     710:	e001      	b.n	716 <_sercom_get_default_pad+0xa6>
     712:	482b      	ldr	r0, [pc, #172]	; (7c0 <_sercom_get_default_pad+0x150>)
     714:	e034      	b.n	780 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     716:	2000      	movs	r0, #0
     718:	e032      	b.n	780 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     71a:	482a      	ldr	r0, [pc, #168]	; (7c4 <_sercom_get_default_pad+0x154>)
     71c:	e030      	b.n	780 <_sercom_get_default_pad+0x110>
     71e:	482a      	ldr	r0, [pc, #168]	; (7c8 <_sercom_get_default_pad+0x158>)
     720:	e02e      	b.n	780 <_sercom_get_default_pad+0x110>
     722:	2901      	cmp	r1, #1
     724:	d006      	beq.n	734 <_sercom_get_default_pad+0xc4>
     726:	2900      	cmp	r1, #0
     728:	d027      	beq.n	77a <_sercom_get_default_pad+0x10a>
     72a:	2902      	cmp	r1, #2
     72c:	d006      	beq.n	73c <_sercom_get_default_pad+0xcc>
     72e:	2903      	cmp	r1, #3
     730:	d006      	beq.n	740 <_sercom_get_default_pad+0xd0>
     732:	e001      	b.n	738 <_sercom_get_default_pad+0xc8>
     734:	4825      	ldr	r0, [pc, #148]	; (7cc <_sercom_get_default_pad+0x15c>)
     736:	e023      	b.n	780 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     738:	2000      	movs	r0, #0
     73a:	e021      	b.n	780 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     73c:	4824      	ldr	r0, [pc, #144]	; (7d0 <_sercom_get_default_pad+0x160>)
     73e:	e01f      	b.n	780 <_sercom_get_default_pad+0x110>
     740:	4824      	ldr	r0, [pc, #144]	; (7d4 <_sercom_get_default_pad+0x164>)
     742:	e01d      	b.n	780 <_sercom_get_default_pad+0x110>
     744:	2901      	cmp	r1, #1
     746:	d006      	beq.n	756 <_sercom_get_default_pad+0xe6>
     748:	2900      	cmp	r1, #0
     74a:	d018      	beq.n	77e <_sercom_get_default_pad+0x10e>
     74c:	2902      	cmp	r1, #2
     74e:	d006      	beq.n	75e <_sercom_get_default_pad+0xee>
     750:	2903      	cmp	r1, #3
     752:	d006      	beq.n	762 <_sercom_get_default_pad+0xf2>
     754:	e001      	b.n	75a <_sercom_get_default_pad+0xea>
     756:	4820      	ldr	r0, [pc, #128]	; (7d8 <_sercom_get_default_pad+0x168>)
     758:	e012      	b.n	780 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     75a:	2000      	movs	r0, #0
     75c:	e010      	b.n	780 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     75e:	481f      	ldr	r0, [pc, #124]	; (7dc <_sercom_get_default_pad+0x16c>)
     760:	e00e      	b.n	780 <_sercom_get_default_pad+0x110>
     762:	481f      	ldr	r0, [pc, #124]	; (7e0 <_sercom_get_default_pad+0x170>)
     764:	e00c      	b.n	780 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     766:	2000      	movs	r0, #0
     768:	e00a      	b.n	780 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     76a:	481e      	ldr	r0, [pc, #120]	; (7e4 <_sercom_get_default_pad+0x174>)
     76c:	e008      	b.n	780 <_sercom_get_default_pad+0x110>
     76e:	481e      	ldr	r0, [pc, #120]	; (7e8 <_sercom_get_default_pad+0x178>)
     770:	e006      	b.n	780 <_sercom_get_default_pad+0x110>
     772:	481e      	ldr	r0, [pc, #120]	; (7ec <_sercom_get_default_pad+0x17c>)
     774:	e004      	b.n	780 <_sercom_get_default_pad+0x110>
     776:	481e      	ldr	r0, [pc, #120]	; (7f0 <_sercom_get_default_pad+0x180>)
     778:	e002      	b.n	780 <_sercom_get_default_pad+0x110>
     77a:	481e      	ldr	r0, [pc, #120]	; (7f4 <_sercom_get_default_pad+0x184>)
     77c:	e000      	b.n	780 <_sercom_get_default_pad+0x110>
     77e:	481e      	ldr	r0, [pc, #120]	; (7f8 <_sercom_get_default_pad+0x188>)
	}

	Assert(false);
	return 0;
}
     780:	4770      	bx	lr
     782:	46c0      	nop			; (mov r8, r8)
     784:	42000c00 	.word	0x42000c00
     788:	42000400 	.word	0x42000400
     78c:	42000800 	.word	0x42000800
     790:	42001400 	.word	0x42001400
     794:	42001800 	.word	0x42001800
     798:	42001000 	.word	0x42001000
     79c:	00050003 	.word	0x00050003
     7a0:	00060003 	.word	0x00060003
     7a4:	00070003 	.word	0x00070003
     7a8:	00110002 	.word	0x00110002
     7ac:	00120002 	.word	0x00120002
     7b0:	00130002 	.word	0x00130002
     7b4:	000d0002 	.word	0x000d0002
     7b8:	000e0002 	.word	0x000e0002
     7bc:	000f0002 	.word	0x000f0002
     7c0:	00170002 	.word	0x00170002
     7c4:	00180002 	.word	0x00180002
     7c8:	00190002 	.word	0x00190002
     7cc:	00290003 	.word	0x00290003
     7d0:	002a0003 	.word	0x002a0003
     7d4:	002b0003 	.word	0x002b0003
     7d8:	00230003 	.word	0x00230003
     7dc:	00200003 	.word	0x00200003
     7e0:	00210003 	.word	0x00210003
     7e4:	00040003 	.word	0x00040003
     7e8:	00100002 	.word	0x00100002
     7ec:	000c0002 	.word	0x000c0002
     7f0:	00160002 	.word	0x00160002
     7f4:	00280003 	.word	0x00280003
     7f8:	00220003 	.word	0x00220003

000007fc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     7fc:	b530      	push	{r4, r5, lr}
     7fe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     800:	4b0c      	ldr	r3, [pc, #48]	; (834 <_sercom_get_sercom_inst_index+0x38>)
     802:	466a      	mov	r2, sp
     804:	cb32      	ldmia	r3!, {r1, r4, r5}
     806:	c232      	stmia	r2!, {r1, r4, r5}
     808:	cb32      	ldmia	r3!, {r1, r4, r5}
     80a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     80c:	9b00      	ldr	r3, [sp, #0]
     80e:	4283      	cmp	r3, r0
     810:	d006      	beq.n	820 <_sercom_get_sercom_inst_index+0x24>
     812:	2301      	movs	r3, #1
     814:	009a      	lsls	r2, r3, #2
     816:	4669      	mov	r1, sp
     818:	5852      	ldr	r2, [r2, r1]
     81a:	4282      	cmp	r2, r0
     81c:	d103      	bne.n	826 <_sercom_get_sercom_inst_index+0x2a>
     81e:	e000      	b.n	822 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     820:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     822:	b2d8      	uxtb	r0, r3
     824:	e003      	b.n	82e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     826:	3301      	adds	r3, #1
     828:	2b06      	cmp	r3, #6
     82a:	d1f3      	bne.n	814 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     82c:	2000      	movs	r0, #0
}
     82e:	b007      	add	sp, #28
     830:	bd30      	pop	{r4, r5, pc}
     832:	46c0      	nop			; (mov r8, r8)
     834:	000023e8 	.word	0x000023e8

00000838 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     838:	4770      	bx	lr
     83a:	46c0      	nop			; (mov r8, r8)

0000083c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     83c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     83e:	4b0a      	ldr	r3, [pc, #40]	; (868 <_sercom_set_handler+0x2c>)
     840:	781b      	ldrb	r3, [r3, #0]
     842:	2b00      	cmp	r3, #0
     844:	d10c      	bne.n	860 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     846:	4f09      	ldr	r7, [pc, #36]	; (86c <_sercom_set_handler+0x30>)
     848:	4e09      	ldr	r6, [pc, #36]	; (870 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     84a:	4d0a      	ldr	r5, [pc, #40]	; (874 <_sercom_set_handler+0x38>)
     84c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     84e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     850:	195a      	adds	r2, r3, r5
     852:	6014      	str	r4, [r2, #0]
     854:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     856:	2b18      	cmp	r3, #24
     858:	d1f9      	bne.n	84e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     85a:	2201      	movs	r2, #1
     85c:	4b02      	ldr	r3, [pc, #8]	; (868 <_sercom_set_handler+0x2c>)
     85e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     860:	0080      	lsls	r0, r0, #2
     862:	4b02      	ldr	r3, [pc, #8]	; (86c <_sercom_set_handler+0x30>)
     864:	50c1      	str	r1, [r0, r3]
}
     866:	bdf0      	pop	{r4, r5, r6, r7, pc}
     868:	20000096 	.word	0x20000096
     86c:	20000098 	.word	0x20000098
     870:	00000839 	.word	0x00000839
     874:	20000120 	.word	0x20000120

00000878 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     878:	b510      	push	{r4, lr}
     87a:	b082      	sub	sp, #8
     87c:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     87e:	2206      	movs	r2, #6
     880:	4905      	ldr	r1, [pc, #20]	; (898 <_sercom_get_interrupt_vector+0x20>)
     882:	4668      	mov	r0, sp
     884:	4b05      	ldr	r3, [pc, #20]	; (89c <_sercom_get_interrupt_vector+0x24>)
     886:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     888:	0020      	movs	r0, r4
     88a:	4b05      	ldr	r3, [pc, #20]	; (8a0 <_sercom_get_interrupt_vector+0x28>)
     88c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     88e:	466b      	mov	r3, sp
     890:	5618      	ldrsb	r0, [r3, r0]
}
     892:	b002      	add	sp, #8
     894:	bd10      	pop	{r4, pc}
     896:	46c0      	nop			; (mov r8, r8)
     898:	00002400 	.word	0x00002400
     89c:	00001c31 	.word	0x00001c31
     8a0:	000007fd 	.word	0x000007fd

000008a4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     8a4:	b510      	push	{r4, lr}
     8a6:	4b02      	ldr	r3, [pc, #8]	; (8b0 <SERCOM0_Handler+0xc>)
     8a8:	681b      	ldr	r3, [r3, #0]
     8aa:	2000      	movs	r0, #0
     8ac:	4798      	blx	r3
     8ae:	bd10      	pop	{r4, pc}
     8b0:	20000098 	.word	0x20000098

000008b4 <SERCOM1_Handler>:
     8b4:	b510      	push	{r4, lr}
     8b6:	4b02      	ldr	r3, [pc, #8]	; (8c0 <SERCOM1_Handler+0xc>)
     8b8:	685b      	ldr	r3, [r3, #4]
     8ba:	2001      	movs	r0, #1
     8bc:	4798      	blx	r3
     8be:	bd10      	pop	{r4, pc}
     8c0:	20000098 	.word	0x20000098

000008c4 <SERCOM2_Handler>:
     8c4:	b510      	push	{r4, lr}
     8c6:	4b02      	ldr	r3, [pc, #8]	; (8d0 <SERCOM2_Handler+0xc>)
     8c8:	689b      	ldr	r3, [r3, #8]
     8ca:	2002      	movs	r0, #2
     8cc:	4798      	blx	r3
     8ce:	bd10      	pop	{r4, pc}
     8d0:	20000098 	.word	0x20000098

000008d4 <SERCOM3_Handler>:
     8d4:	b510      	push	{r4, lr}
     8d6:	4b02      	ldr	r3, [pc, #8]	; (8e0 <SERCOM3_Handler+0xc>)
     8d8:	68db      	ldr	r3, [r3, #12]
     8da:	2003      	movs	r0, #3
     8dc:	4798      	blx	r3
     8de:	bd10      	pop	{r4, pc}
     8e0:	20000098 	.word	0x20000098

000008e4 <SERCOM4_Handler>:
     8e4:	b510      	push	{r4, lr}
     8e6:	4b02      	ldr	r3, [pc, #8]	; (8f0 <SERCOM4_Handler+0xc>)
     8e8:	691b      	ldr	r3, [r3, #16]
     8ea:	2004      	movs	r0, #4
     8ec:	4798      	blx	r3
     8ee:	bd10      	pop	{r4, pc}
     8f0:	20000098 	.word	0x20000098

000008f4 <SERCOM5_Handler>:
     8f4:	b510      	push	{r4, lr}
     8f6:	4b02      	ldr	r3, [pc, #8]	; (900 <SERCOM5_Handler+0xc>)
     8f8:	695b      	ldr	r3, [r3, #20]
     8fa:	2005      	movs	r0, #5
     8fc:	4798      	blx	r3
     8fe:	bd10      	pop	{r4, pc}
     900:	20000098 	.word	0x20000098

00000904 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     904:	b5f0      	push	{r4, r5, r6, r7, lr}
     906:	4657      	mov	r7, sl
     908:	464e      	mov	r6, r9
     90a:	4645      	mov	r5, r8
     90c:	b4e0      	push	{r5, r6, r7}
     90e:	b088      	sub	sp, #32
     910:	4680      	mov	r8, r0
     912:	000e      	movs	r6, r1
     914:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     916:	0003      	movs	r3, r0
     918:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     91a:	680b      	ldr	r3, [r1, #0]
     91c:	079b      	lsls	r3, r3, #30
     91e:	d400      	bmi.n	922 <spi_init+0x1e>
     920:	e0a7      	b.n	a72 <spi_init+0x16e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     922:	6a93      	ldr	r3, [r2, #40]	; 0x28
     924:	9303      	str	r3, [sp, #12]
     926:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     928:	9304      	str	r3, [sp, #16]
     92a:	6b13      	ldr	r3, [r2, #48]	; 0x30
     92c:	9305      	str	r3, [sp, #20]
     92e:	6b53      	ldr	r3, [r2, #52]	; 0x34
     930:	9306      	str	r3, [sp, #24]
     932:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     934:	231f      	movs	r3, #31
     936:	4699      	mov	r9, r3
     938:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     93a:	00bb      	lsls	r3, r7, #2
     93c:	aa03      	add	r2, sp, #12
     93e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     940:	2800      	cmp	r0, #0
     942:	d102      	bne.n	94a <spi_init+0x46>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     944:	0030      	movs	r0, r6
     946:	4baf      	ldr	r3, [pc, #700]	; (c04 <spi_init+0x300>)
     948:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     94a:	1c43      	adds	r3, r0, #1
     94c:	d028      	beq.n	9a0 <spi_init+0x9c>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     94e:	0402      	lsls	r2, r0, #16
     950:	0c13      	lsrs	r3, r2, #16
     952:	469c      	mov	ip, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     954:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     956:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     958:	2500      	movs	r5, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     95a:	0603      	lsls	r3, r0, #24
     95c:	d404      	bmi.n	968 <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
     95e:	094b      	lsrs	r3, r1, #5
     960:	01db      	lsls	r3, r3, #7
     962:	2282      	movs	r2, #130	; 0x82
     964:	05d2      	lsls	r2, r2, #23
     966:	189d      	adds	r5, r3, r2
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     968:	464b      	mov	r3, r9
     96a:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     96c:	18e8      	adds	r0, r5, r3
     96e:	3040      	adds	r0, #64	; 0x40
     970:	7800      	ldrb	r0, [r0, #0]
     972:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     974:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     976:	4652      	mov	r2, sl
     978:	07d2      	lsls	r2, r2, #31
     97a:	d50a      	bpl.n	992 <spi_init+0x8e>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     97c:	085b      	lsrs	r3, r3, #1
     97e:	18eb      	adds	r3, r5, r3
     980:	3330      	adds	r3, #48	; 0x30
     982:	7818      	ldrb	r0, [r3, #0]
     984:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
     986:	07cb      	lsls	r3, r1, #31
     988:	d501      	bpl.n	98e <spi_init+0x8a>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     98a:	0900      	lsrs	r0, r0, #4
     98c:	e001      	b.n	992 <spi_init+0x8e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     98e:	230f      	movs	r3, #15
     990:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     992:	4584      	cmp	ip, r0
     994:	d004      	beq.n	9a0 <spi_init+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     996:	2300      	movs	r3, #0
     998:	4642      	mov	r2, r8
     99a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     99c:	201c      	movs	r0, #28
     99e:	e12b      	b.n	bf8 <spi_init+0x2f4>
     9a0:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     9a2:	2f04      	cmp	r7, #4
     9a4:	d1c8      	bne.n	938 <spi_init+0x34>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     9a6:	2012      	movs	r0, #18
     9a8:	4b97      	ldr	r3, [pc, #604]	; (c08 <spi_init+0x304>)
     9aa:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     9ac:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     9ae:	2700      	movs	r7, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     9b0:	2b01      	cmp	r3, #1
     9b2:	d112      	bne.n	9da <spi_init+0xd6>
		enum status_code error_code = _sercom_get_sync_baud_val(
     9b4:	aa02      	add	r2, sp, #8
     9b6:	0001      	movs	r1, r0
     9b8:	69a0      	ldr	r0, [r4, #24]
     9ba:	4b94      	ldr	r3, [pc, #592]	; (c0c <spi_init+0x308>)
     9bc:	4798      	blx	r3
     9be:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     9c0:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     9c2:	2b00      	cmp	r3, #0
     9c4:	d000      	beq.n	9c8 <spi_init+0xc4>
     9c6:	e117      	b.n	bf8 <spi_init+0x2f4>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     9c8:	7b33      	ldrb	r3, [r6, #12]
     9ca:	b2db      	uxtb	r3, r3
     9cc:	aa02      	add	r2, sp, #8
     9ce:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     9d0:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     9d2:	429a      	cmp	r2, r3
     9d4:	d000      	beq.n	9d8 <spi_init+0xd4>
     9d6:	e10f      	b.n	bf8 <spi_init+0x2f4>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     9d8:	370c      	adds	r7, #12
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     9da:	7825      	ldrb	r5, [r4, #0]
     9dc:	2d00      	cmp	r5, #0
     9de:	d114      	bne.n	a0a <spi_init+0x106>
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     9e0:	6832      	ldr	r2, [r6, #0]
     9e2:	7fe3      	ldrb	r3, [r4, #31]
     9e4:	041b      	lsls	r3, r3, #16
     9e6:	7fa1      	ldrb	r1, [r4, #30]
     9e8:	430b      	orrs	r3, r1
			return STATUS_ERR_DENIED;
     9ea:	201c      	movs	r0, #28
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     9ec:	4293      	cmp	r3, r2
     9ee:	d000      	beq.n	9f2 <spi_init+0xee>
     9f0:	e102      	b.n	bf8 <spi_init+0x2f4>

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
     9f2:	69a1      	ldr	r1, [r4, #24]

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
     9f4:	8ba3      	ldrh	r3, [r4, #28]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
			return STATUS_ERR_DENIED;
		}

		if (config->mode_specific.slave.preload_enable) {
     9f6:	2220      	movs	r2, #32
     9f8:	5ca2      	ldrb	r2, [r4, r2]
     9fa:	2a00      	cmp	r2, #0
     9fc:	d001      	beq.n	a02 <spi_init+0xfe>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     9fe:	2240      	movs	r2, #64	; 0x40
     a00:	4313      	orrs	r3, r2
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     a02:	2208      	movs	r2, #8
     a04:	430a      	orrs	r2, r1
     a06:	4317      	orrs	r7, r2
     a08:	e000      	b.n	a0c <spi_init+0x108>
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
     a0a:	2300      	movs	r3, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     a0c:	6862      	ldr	r2, [r4, #4]
     a0e:	68a1      	ldr	r1, [r4, #8]
     a10:	430a      	orrs	r2, r1
     a12:	68e1      	ldr	r1, [r4, #12]
     a14:	430a      	orrs	r2, r1
     a16:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
     a18:	7c21      	ldrb	r1, [r4, #16]
     a1a:	430b      	orrs	r3, r1

	if (config->run_in_standby) {
     a1c:	7c61      	ldrb	r1, [r4, #17]
     a1e:	2900      	cmp	r1, #0
     a20:	d001      	beq.n	a26 <spi_init+0x122>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     a22:	2180      	movs	r1, #128	; 0x80
     a24:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     a26:	7ca1      	ldrb	r1, [r4, #18]
     a28:	2900      	cmp	r1, #0
     a2a:	d002      	beq.n	a32 <spi_init+0x12e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     a2c:	2180      	movs	r1, #128	; 0x80
     a2e:	0289      	lsls	r1, r1, #10
     a30:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     a32:	7ce1      	ldrb	r1, [r4, #19]
     a34:	2900      	cmp	r1, #0
     a36:	d002      	beq.n	a3e <spi_init+0x13a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     a38:	2180      	movs	r1, #128	; 0x80
     a3a:	0089      	lsls	r1, r1, #2
     a3c:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     a3e:	7d21      	ldrb	r1, [r4, #20]
     a40:	2900      	cmp	r1, #0
     a42:	d002      	beq.n	a4a <spi_init+0x146>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     a44:	2180      	movs	r1, #128	; 0x80
     a46:	0189      	lsls	r1, r1, #6
     a48:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     a4a:	6830      	ldr	r0, [r6, #0]
     a4c:	2102      	movs	r1, #2
     a4e:	430a      	orrs	r2, r1
     a50:	4282      	cmp	r2, r0
     a52:	d109      	bne.n	a68 <spi_init+0x164>
			spi_module->CTRLB.reg == ctrlb) {
     a54:	6872      	ldr	r2, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     a56:	429a      	cmp	r2, r3
     a58:	d106      	bne.n	a68 <spi_init+0x164>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     a5a:	4643      	mov	r3, r8
     a5c:	715d      	strb	r5, [r3, #5]
		module->character_size = config->character_size;
     a5e:	7c23      	ldrb	r3, [r4, #16]
     a60:	4642      	mov	r2, r8
     a62:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     a64:	2000      	movs	r0, #0
     a66:	e0c7      	b.n	bf8 <spi_init+0x2f4>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     a68:	2300      	movs	r3, #0
     a6a:	4642      	mov	r2, r8
     a6c:	6013      	str	r3, [r2, #0]

	return STATUS_ERR_DENIED;
     a6e:	201c      	movs	r0, #28
     a70:	e0c2      	b.n	bf8 <spi_init+0x2f4>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     a72:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     a74:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     a76:	07db      	lsls	r3, r3, #31
     a78:	d500      	bpl.n	a7c <spi_init+0x178>
     a7a:	e0bd      	b.n	bf8 <spi_init+0x2f4>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a7c:	0008      	movs	r0, r1
     a7e:	4b64      	ldr	r3, [pc, #400]	; (c10 <spi_init+0x30c>)
     a80:	4798      	blx	r3
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21) 
	if (sercom_index == 5) {
     a82:	2805      	cmp	r0, #5
     a84:	d002      	beq.n	a8c <spi_init+0x188>
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     a86:	1c45      	adds	r5, r0, #1
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a88:	3013      	adds	r0, #19
     a8a:	e001      	b.n	a90 <spi_init+0x18c>
	}
#elif (SAMC21) 
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
     a8c:	2019      	movs	r0, #25
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21) 
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     a8e:	2506      	movs	r5, #6
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     a90:	4960      	ldr	r1, [pc, #384]	; (c14 <spi_init+0x310>)
     a92:	69ca      	ldr	r2, [r1, #28]
     a94:	2301      	movs	r3, #1
     a96:	40ab      	lsls	r3, r5
     a98:	4313      	orrs	r3, r2
     a9a:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     a9c:	a907      	add	r1, sp, #28
     a9e:	2724      	movs	r7, #36	; 0x24
     aa0:	5de3      	ldrb	r3, [r4, r7]
     aa2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     aa4:	b2c5      	uxtb	r5, r0
     aa6:	0028      	movs	r0, r5
     aa8:	4b5b      	ldr	r3, [pc, #364]	; (c18 <spi_init+0x314>)
     aaa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     aac:	0028      	movs	r0, r5
     aae:	4b5b      	ldr	r3, [pc, #364]	; (c1c <spi_init+0x318>)
     ab0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ab2:	5de0      	ldrb	r0, [r4, r7]
     ab4:	2100      	movs	r1, #0
     ab6:	4b5a      	ldr	r3, [pc, #360]	; (c20 <spi_init+0x31c>)
     ab8:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     aba:	7823      	ldrb	r3, [r4, #0]
     abc:	2b01      	cmp	r3, #1
     abe:	d103      	bne.n	ac8 <spi_init+0x1c4>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     ac0:	6832      	ldr	r2, [r6, #0]
     ac2:	330b      	adds	r3, #11
     ac4:	4313      	orrs	r3, r2
     ac6:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     ac8:	7823      	ldrb	r3, [r4, #0]
     aca:	2b00      	cmp	r3, #0
     acc:	d103      	bne.n	ad6 <spi_init+0x1d2>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     ace:	6832      	ldr	r2, [r6, #0]
     ad0:	3308      	adds	r3, #8
     ad2:	4313      	orrs	r3, r2
     ad4:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ad6:	4643      	mov	r3, r8
     ad8:	681e      	ldr	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ada:	ab02      	add	r3, sp, #8
     adc:	2280      	movs	r2, #128	; 0x80
     ade:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ae0:	2200      	movs	r2, #0
     ae2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ae4:	2101      	movs	r1, #1
     ae6:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     ae8:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     aea:	7823      	ldrb	r3, [r4, #0]
     aec:	2b00      	cmp	r3, #0
     aee:	d101      	bne.n	af4 <spi_init+0x1f0>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     af0:	ab02      	add	r3, sp, #8
     af2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     af4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     af6:	9303      	str	r3, [sp, #12]
     af8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     afa:	9304      	str	r3, [sp, #16]
     afc:	6b23      	ldr	r3, [r4, #48]	; 0x30
     afe:	9305      	str	r3, [sp, #20]
     b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
     b02:	9306      	str	r3, [sp, #24]
     b04:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b06:	ad02      	add	r5, sp, #8
     b08:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b0a:	00bb      	lsls	r3, r7, #2
     b0c:	aa03      	add	r2, sp, #12
     b0e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     b10:	2800      	cmp	r0, #0
     b12:	d102      	bne.n	b1a <spi_init+0x216>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b14:	0030      	movs	r0, r6
     b16:	4b3b      	ldr	r3, [pc, #236]	; (c04 <spi_init+0x300>)
     b18:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     b1a:	1c43      	adds	r3, r0, #1
     b1c:	d005      	beq.n	b2a <spi_init+0x226>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b1e:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b20:	0c00      	lsrs	r0, r0, #16
     b22:	b2c0      	uxtb	r0, r0
     b24:	0029      	movs	r1, r5
     b26:	4b3f      	ldr	r3, [pc, #252]	; (c24 <spi_init+0x320>)
     b28:	4798      	blx	r3
     b2a:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     b2c:	2f04      	cmp	r7, #4
     b2e:	d1eb      	bne.n	b08 <spi_init+0x204>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     b30:	7823      	ldrb	r3, [r4, #0]
     b32:	4642      	mov	r2, r8
     b34:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     b36:	7c23      	ldrb	r3, [r4, #16]
     b38:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     b3a:	7ca3      	ldrb	r3, [r4, #18]
     b3c:	71d3      	strb	r3, [r2, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     b3e:	7d23      	ldrb	r3, [r4, #20]
     b40:	7213      	strb	r3, [r2, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     b42:	2200      	movs	r2, #0
     b44:	466b      	mov	r3, sp
     b46:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     b48:	7823      	ldrb	r3, [r4, #0]
     b4a:	2b01      	cmp	r3, #1
     b4c:	d115      	bne.n	b7a <spi_init+0x276>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b4e:	4643      	mov	r3, r8
     b50:	6818      	ldr	r0, [r3, #0]
     b52:	4b2f      	ldr	r3, [pc, #188]	; (c10 <spi_init+0x30c>)
     b54:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b56:	3013      	adds	r0, #19
     b58:	b2c0      	uxtb	r0, r0
     b5a:	4b2b      	ldr	r3, [pc, #172]	; (c08 <spi_init+0x304>)
     b5c:	4798      	blx	r3
     b5e:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     b60:	466b      	mov	r3, sp
     b62:	1d9a      	adds	r2, r3, #6
     b64:	69a0      	ldr	r0, [r4, #24]
     b66:	4b29      	ldr	r3, [pc, #164]	; (c0c <spi_init+0x308>)
     b68:	4798      	blx	r3
     b6a:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     b6c:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     b6e:	2b00      	cmp	r3, #0
     b70:	d142      	bne.n	bf8 <spi_init+0x2f4>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     b72:	466b      	mov	r3, sp
     b74:	3306      	adds	r3, #6
     b76:	781b      	ldrb	r3, [r3, #0]
     b78:	7333      	strb	r3, [r6, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     b7a:	7823      	ldrb	r3, [r4, #0]
     b7c:	2b00      	cmp	r3, #0
     b7e:	d10f      	bne.n	ba0 <spi_init+0x29c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     b80:	69a7      	ldr	r7, [r4, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     b82:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     b84:	6a70      	ldr	r0, [r6, #36]	; 0x24
     b86:	7fe1      	ldrb	r1, [r4, #31]
     b88:	0409      	lsls	r1, r1, #16
     b8a:	7fa5      	ldrb	r5, [r4, #30]
     b8c:	4329      	orrs	r1, r5
     b8e:	4301      	orrs	r1, r0
     b90:	6271      	str	r1, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     b92:	2220      	movs	r2, #32
     b94:	5ca2      	ldrb	r2, [r4, r2]
     b96:	2a00      	cmp	r2, #0
     b98:	d004      	beq.n	ba4 <spi_init+0x2a0>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     b9a:	2140      	movs	r1, #64	; 0x40
     b9c:	430b      	orrs	r3, r1
     b9e:	e001      	b.n	ba4 <spi_init+0x2a0>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     ba0:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     ba2:	2700      	movs	r7, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     ba4:	6862      	ldr	r2, [r4, #4]
     ba6:	68a1      	ldr	r1, [r4, #8]
     ba8:	430a      	orrs	r2, r1
     baa:	68e1      	ldr	r1, [r4, #12]
     bac:	430a      	orrs	r2, r1
     bae:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
     bb0:	7c21      	ldrb	r1, [r4, #16]
     bb2:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     bb4:	7c61      	ldrb	r1, [r4, #17]
     bb6:	2900      	cmp	r1, #0
     bb8:	d103      	bne.n	bc2 <spi_init+0x2be>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     bba:	491b      	ldr	r1, [pc, #108]	; (c28 <spi_init+0x324>)
     bbc:	7889      	ldrb	r1, [r1, #2]
     bbe:	0789      	lsls	r1, r1, #30
     bc0:	d501      	bpl.n	bc6 <spi_init+0x2c2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     bc2:	2180      	movs	r1, #128	; 0x80
     bc4:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     bc6:	7ca1      	ldrb	r1, [r4, #18]
     bc8:	2900      	cmp	r1, #0
     bca:	d002      	beq.n	bd2 <spi_init+0x2ce>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     bcc:	2180      	movs	r1, #128	; 0x80
     bce:	0289      	lsls	r1, r1, #10
     bd0:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     bd2:	7ce1      	ldrb	r1, [r4, #19]
     bd4:	2900      	cmp	r1, #0
     bd6:	d002      	beq.n	bde <spi_init+0x2da>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     bd8:	2180      	movs	r1, #128	; 0x80
     bda:	0089      	lsls	r1, r1, #2
     bdc:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     bde:	7d21      	ldrb	r1, [r4, #20]
     be0:	2900      	cmp	r1, #0
     be2:	d002      	beq.n	bea <spi_init+0x2e6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     be4:	2180      	movs	r1, #128	; 0x80
     be6:	0189      	lsls	r1, r1, #6
     be8:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     bea:	6831      	ldr	r1, [r6, #0]
     bec:	430a      	orrs	r2, r1
     bee:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     bf0:	6872      	ldr	r2, [r6, #4]
     bf2:	4313      	orrs	r3, r2
     bf4:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
     bf6:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     bf8:	b008      	add	sp, #32
     bfa:	bc1c      	pop	{r2, r3, r4}
     bfc:	4690      	mov	r8, r2
     bfe:	4699      	mov	r9, r3
     c00:	46a2      	mov	sl, r4
     c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c04:	00000671 	.word	0x00000671
     c08:	00001831 	.word	0x00001831
     c0c:	00000435 	.word	0x00000435
     c10:	000007fd 	.word	0x000007fd
     c14:	40000800 	.word	0x40000800
     c18:	0000180d 	.word	0x0000180d
     c1c:	0000179d 	.word	0x0000179d
     c20:	00000625 	.word	0x00000625
     c24:	00001909 	.word	0x00001909
     c28:	41002000 	.word	0x41002000

00000c2c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     c2c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c2e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     c30:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c32:	2c01      	cmp	r4, #1
     c34:	d172      	bne.n	d1c <spi_select_slave+0xf0>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     c36:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     c38:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     c3a:	2c00      	cmp	r4, #0
     c3c:	d16e      	bne.n	d1c <spi_select_slave+0xf0>
#  endif
	{
		if (select) {
     c3e:	2a00      	cmp	r2, #0
     c40:	d05b      	beq.n	cfa <spi_select_slave+0xce>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     c42:	784b      	ldrb	r3, [r1, #1]
     c44:	2b00      	cmp	r3, #0
     c46:	d046      	beq.n	cd6 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c48:	6803      	ldr	r3, [r0, #0]
     c4a:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     c4c:	07db      	lsls	r3, r3, #31
     c4e:	d411      	bmi.n	c74 <spi_select_slave+0x48>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     c50:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c52:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c54:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c56:	2900      	cmp	r1, #0
     c58:	d105      	bne.n	c66 <spi_select_slave+0x3a>
		return &(ports[port_index]->Group[group_index]);
     c5a:	095a      	lsrs	r2, r3, #5
     c5c:	01d2      	lsls	r2, r2, #7
     c5e:	2182      	movs	r1, #130	; 0x82
     c60:	05c9      	lsls	r1, r1, #23
     c62:	468c      	mov	ip, r1
     c64:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c66:	211f      	movs	r1, #31
     c68:	400b      	ands	r3, r1
     c6a:	391e      	subs	r1, #30
     c6c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c6e:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     c70:	2305      	movs	r3, #5
     c72:	e053      	b.n	d1c <spi_select_slave+0xf0>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     c74:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c76:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c78:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c7a:	2c00      	cmp	r4, #0
     c7c:	d105      	bne.n	c8a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     c7e:	095a      	lsrs	r2, r3, #5
     c80:	01d2      	lsls	r2, r2, #7
     c82:	2482      	movs	r4, #130	; 0x82
     c84:	05e4      	lsls	r4, r4, #23
     c86:	46a4      	mov	ip, r4
     c88:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c8a:	241f      	movs	r4, #31
     c8c:	4023      	ands	r3, r4
     c8e:	3c1e      	subs	r4, #30
     c90:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     c92:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c94:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c96:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     c98:	07d2      	lsls	r2, r2, #31
     c9a:	d501      	bpl.n	ca0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     c9c:	788a      	ldrb	r2, [r1, #2]
     c9e:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     ca0:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     ca2:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     ca4:	2a00      	cmp	r2, #0
     ca6:	d139      	bne.n	d1c <spi_select_slave+0xf0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ca8:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     caa:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cac:	7e13      	ldrb	r3, [r2, #24]
     cae:	420b      	tst	r3, r1
     cb0:	d0fc      	beq.n	cac <spi_select_slave+0x80>
     cb2:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     cb4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     cb6:	0749      	lsls	r1, r1, #29
     cb8:	d530      	bpl.n	d1c <spi_select_slave+0xf0>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     cba:	8b53      	ldrh	r3, [r2, #26]
     cbc:	075b      	lsls	r3, r3, #29
     cbe:	d501      	bpl.n	cc4 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     cc0:	2304      	movs	r3, #4
     cc2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cc4:	7983      	ldrb	r3, [r0, #6]
     cc6:	2b01      	cmp	r3, #1
     cc8:	d102      	bne.n	cd0 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     cca:	6a93      	ldr	r3, [r2, #40]	; 0x28
     ccc:	2300      	movs	r3, #0
     cce:	e025      	b.n	d1c <spi_select_slave+0xf0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     cd0:	6a93      	ldr	r3, [r2, #40]	; 0x28
     cd2:	2300      	movs	r3, #0
     cd4:	e022      	b.n	d1c <spi_select_slave+0xf0>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     cd6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cd8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     cda:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cdc:	2900      	cmp	r1, #0
     cde:	d105      	bne.n	cec <spi_select_slave+0xc0>
		return &(ports[port_index]->Group[group_index]);
     ce0:	095a      	lsrs	r2, r3, #5
     ce2:	01d2      	lsls	r2, r2, #7
     ce4:	2182      	movs	r1, #130	; 0x82
     ce6:	05c9      	lsls	r1, r1, #23
     ce8:	468c      	mov	ip, r1
     cea:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cec:	211f      	movs	r1, #31
     cee:	400b      	ands	r3, r1
     cf0:	391e      	subs	r1, #30
     cf2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     cf4:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     cf6:	2300      	movs	r3, #0
     cf8:	e010      	b.n	d1c <spi_select_slave+0xf0>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     cfa:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cfc:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     cfe:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d00:	2900      	cmp	r1, #0
     d02:	d105      	bne.n	d10 <spi_select_slave+0xe4>
		return &(ports[port_index]->Group[group_index]);
     d04:	095a      	lsrs	r2, r3, #5
     d06:	01d2      	lsls	r2, r2, #7
     d08:	2182      	movs	r1, #130	; 0x82
     d0a:	05c9      	lsls	r1, r1, #23
     d0c:	468c      	mov	ip, r1
     d0e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d10:	211f      	movs	r1, #31
     d12:	400b      	ands	r3, r1
     d14:	391e      	subs	r1, #30
     d16:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d18:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     d1a:	2300      	movs	r3, #0
}
     d1c:	0018      	movs	r0, r3
     d1e:	bd10      	pop	{r4, pc}

00000d20 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d20:	b5f0      	push	{r4, r5, r6, r7, lr}
     d22:	465f      	mov	r7, fp
     d24:	4656      	mov	r6, sl
     d26:	464d      	mov	r5, r9
     d28:	4644      	mov	r4, r8
     d2a:	b4f0      	push	{r4, r5, r6, r7}
     d2c:	b091      	sub	sp, #68	; 0x44
     d2e:	0005      	movs	r5, r0
     d30:	000c      	movs	r4, r1
     d32:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d34:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d36:	0008      	movs	r0, r1
     d38:	4bcf      	ldr	r3, [pc, #828]	; (1078 <usart_init+0x358>)
     d3a:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
     d3c:	2805      	cmp	r0, #5
     d3e:	d002      	beq.n	d46 <usart_init+0x26>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
     d40:	0007      	movs	r7, r0
     d42:	3713      	adds	r7, #19
     d44:	e000      	b.n	d48 <usart_init+0x28>
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
		gclk_index	= SERCOM5_GCLK_ID_CORE;
     d46:	2719      	movs	r7, #25
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d48:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d4a:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d4c:	07d2      	lsls	r2, r2, #31
     d4e:	d500      	bpl.n	d52 <usart_init+0x32>
     d50:	e18a      	b.n	1068 <usart_init+0x348>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d52:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     d54:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d56:	0792      	lsls	r2, r2, #30
     d58:	d500      	bpl.n	d5c <usart_init+0x3c>
     d5a:	e185      	b.n	1068 <usart_init+0x348>
     d5c:	49c7      	ldr	r1, [pc, #796]	; (107c <usart_init+0x35c>)
     d5e:	69ca      	ldr	r2, [r1, #28]
     d60:	3001      	adds	r0, #1
     d62:	3b1b      	subs	r3, #27
     d64:	4083      	lsls	r3, r0
     d66:	4313      	orrs	r3, r2
     d68:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     d6a:	a90f      	add	r1, sp, #60	; 0x3c
     d6c:	2335      	movs	r3, #53	; 0x35
     d6e:	4698      	mov	r8, r3
     d70:	5cf3      	ldrb	r3, [r6, r3]
     d72:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d74:	b2ff      	uxtb	r7, r7
     d76:	0038      	movs	r0, r7
     d78:	4bc1      	ldr	r3, [pc, #772]	; (1080 <usart_init+0x360>)
     d7a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d7c:	0038      	movs	r0, r7
     d7e:	4bc1      	ldr	r3, [pc, #772]	; (1084 <usart_init+0x364>)
     d80:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d82:	4643      	mov	r3, r8
     d84:	5cf0      	ldrb	r0, [r6, r3]
     d86:	2100      	movs	r1, #0
     d88:	4bbf      	ldr	r3, [pc, #764]	; (1088 <usart_init+0x368>)
     d8a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     d8c:	7af3      	ldrb	r3, [r6, #11]
     d8e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     d90:	232c      	movs	r3, #44	; 0x2c
     d92:	5cf3      	ldrb	r3, [r6, r3]
     d94:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     d96:	232d      	movs	r3, #45	; 0x2d
     d98:	5cf3      	ldrb	r3, [r6, r3]
     d9a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     d9c:	7ef3      	ldrb	r3, [r6, #27]
     d9e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     da0:	2324      	movs	r3, #36	; 0x24
     da2:	5cf3      	ldrb	r3, [r6, r3]
     da4:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     da6:	682b      	ldr	r3, [r5, #0]
     da8:	9302      	str	r3, [sp, #8]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     daa:	0018      	movs	r0, r3
     dac:	4bb2      	ldr	r3, [pc, #712]	; (1078 <usart_init+0x358>)
     dae:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     db0:	3013      	adds	r0, #19
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     db2:	2200      	movs	r2, #0
     db4:	230e      	movs	r3, #14
     db6:	a906      	add	r1, sp, #24
     db8:	468c      	mov	ip, r1
     dba:	4463      	add	r3, ip
     dbc:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     dbe:	8a33      	ldrh	r3, [r6, #16]
     dc0:	4699      	mov	r9, r3
     dc2:	2380      	movs	r3, #128	; 0x80
     dc4:	01db      	lsls	r3, r3, #7
     dc6:	4599      	cmp	r9, r3
     dc8:	d019      	beq.n	dfe <usart_init+0xde>
     dca:	d804      	bhi.n	dd6 <usart_init+0xb6>
     dcc:	2380      	movs	r3, #128	; 0x80
     dce:	019b      	lsls	r3, r3, #6
     dd0:	4599      	cmp	r9, r3
     dd2:	d00a      	beq.n	dea <usart_init+0xca>
     dd4:	e129      	b.n	102a <usart_init+0x30a>
     dd6:	23c0      	movs	r3, #192	; 0xc0
     dd8:	01db      	lsls	r3, r3, #7
     dda:	4599      	cmp	r9, r3
     ddc:	d00a      	beq.n	df4 <usart_init+0xd4>
     dde:	2380      	movs	r3, #128	; 0x80
     de0:	021b      	lsls	r3, r3, #8
     de2:	4599      	cmp	r9, r3
     de4:	d100      	bne.n	de8 <usart_init+0xc8>
     de6:	e125      	b.n	1034 <usart_init+0x314>
     de8:	e11f      	b.n	102a <usart_init+0x30a>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     dea:	2310      	movs	r3, #16
     dec:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     dee:	3b0f      	subs	r3, #15
     df0:	9307      	str	r3, [sp, #28]
     df2:	e123      	b.n	103c <usart_init+0x31c>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     df4:	2308      	movs	r3, #8
     df6:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     df8:	3b07      	subs	r3, #7
     dfa:	9307      	str	r3, [sp, #28]
     dfc:	e11e      	b.n	103c <usart_init+0x31c>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     dfe:	6833      	ldr	r3, [r6, #0]
     e00:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     e02:	68f3      	ldr	r3, [r6, #12]
     e04:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e06:	6973      	ldr	r3, [r6, #20]
     e08:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e0a:	7e33      	ldrb	r3, [r6, #24]
     e0c:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e0e:	232e      	movs	r3, #46	; 0x2e
     e10:	5cf3      	ldrb	r3, [r6, r3]
     e12:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     e14:	6873      	ldr	r3, [r6, #4]
     e16:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     e18:	2b00      	cmp	r3, #0
     e1a:	d015      	beq.n	e48 <usart_init+0x128>
     e1c:	2380      	movs	r3, #128	; 0x80
     e1e:	055b      	lsls	r3, r3, #21
     e20:	459a      	cmp	sl, r3
     e22:	d136      	bne.n	e92 <usart_init+0x172>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     e24:	232f      	movs	r3, #47	; 0x2f
     e26:	5cf3      	ldrb	r3, [r6, r3]
     e28:	2b00      	cmp	r3, #0
     e2a:	d136      	bne.n	e9a <usart_init+0x17a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     e2c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     e2e:	001f      	movs	r7, r3
     e30:	b2c0      	uxtb	r0, r0
     e32:	4b96      	ldr	r3, [pc, #600]	; (108c <usart_init+0x36c>)
     e34:	4798      	blx	r3
     e36:	0001      	movs	r1, r0
     e38:	220e      	movs	r2, #14
     e3a:	ab06      	add	r3, sp, #24
     e3c:	469c      	mov	ip, r3
     e3e:	4462      	add	r2, ip
     e40:	0038      	movs	r0, r7
     e42:	4b93      	ldr	r3, [pc, #588]	; (1090 <usart_init+0x370>)
     e44:	4798      	blx	r3
     e46:	e025      	b.n	e94 <usart_init+0x174>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e48:	2308      	movs	r3, #8
     e4a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e4c:	2300      	movs	r3, #0
     e4e:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     e50:	232f      	movs	r3, #47	; 0x2f
     e52:	5cf3      	ldrb	r3, [r6, r3]
     e54:	2b00      	cmp	r3, #0
     e56:	d00b      	beq.n	e70 <usart_init+0x150>
				status_code =
     e58:	9b06      	ldr	r3, [sp, #24]
     e5a:	9300      	str	r3, [sp, #0]
     e5c:	9b07      	ldr	r3, [sp, #28]
     e5e:	220e      	movs	r2, #14
     e60:	a906      	add	r1, sp, #24
     e62:	468c      	mov	ip, r1
     e64:	4462      	add	r2, ip
     e66:	6b31      	ldr	r1, [r6, #48]	; 0x30
     e68:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     e6a:	4f8a      	ldr	r7, [pc, #552]	; (1094 <usart_init+0x374>)
     e6c:	47b8      	blx	r7
     e6e:	e011      	b.n	e94 <usart_init+0x174>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     e70:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     e72:	001f      	movs	r7, r3
     e74:	b2c0      	uxtb	r0, r0
     e76:	4b85      	ldr	r3, [pc, #532]	; (108c <usart_init+0x36c>)
     e78:	4798      	blx	r3
     e7a:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     e7c:	9b06      	ldr	r3, [sp, #24]
     e7e:	9300      	str	r3, [sp, #0]
     e80:	9b07      	ldr	r3, [sp, #28]
     e82:	220e      	movs	r2, #14
     e84:	a806      	add	r0, sp, #24
     e86:	4684      	mov	ip, r0
     e88:	4462      	add	r2, ip
     e8a:	0038      	movs	r0, r7
     e8c:	4f81      	ldr	r7, [pc, #516]	; (1094 <usart_init+0x374>)
     e8e:	47b8      	blx	r7
     e90:	e000      	b.n	e94 <usart_init+0x174>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     e92:	2000      	movs	r0, #0
     e94:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     e96:	d000      	beq.n	e9a <usart_init+0x17a>
     e98:	e0e6      	b.n	1068 <usart_init+0x348>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     e9a:	7e73      	ldrb	r3, [r6, #25]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d002      	beq.n	ea6 <usart_init+0x186>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     ea0:	7eb3      	ldrb	r3, [r6, #26]
     ea2:	9a02      	ldr	r2, [sp, #8]
     ea4:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ea6:	682a      	ldr	r2, [r5, #0]
     ea8:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     eaa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     eac:	2b00      	cmp	r3, #0
     eae:	d1fc      	bne.n	eaa <usart_init+0x18a>
     eb0:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     eb2:	330e      	adds	r3, #14
     eb4:	a906      	add	r1, sp, #24
     eb6:	468c      	mov	ip, r1
     eb8:	4463      	add	r3, ip
     eba:	881b      	ldrh	r3, [r3, #0]
     ebc:	81bb      	strh	r3, [r7, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     ebe:	9b05      	ldr	r3, [sp, #20]
     ec0:	465a      	mov	r2, fp
     ec2:	4313      	orrs	r3, r2
     ec4:	9a03      	ldr	r2, [sp, #12]
     ec6:	4313      	orrs	r3, r2
     ec8:	4652      	mov	r2, sl
     eca:	4313      	orrs	r3, r2
     ecc:	464a      	mov	r2, r9
     ece:	4313      	orrs	r3, r2
     ed0:	9a04      	ldr	r2, [sp, #16]
     ed2:	0210      	lsls	r0, r2, #8
     ed4:	4303      	orrs	r3, r0
     ed6:	4642      	mov	r2, r8
     ed8:	0750      	lsls	r0, r2, #29
     eda:	4318      	orrs	r0, r3

	if (config->use_external_clock == false) {
     edc:	232f      	movs	r3, #47	; 0x2f
     ede:	5cf3      	ldrb	r3, [r6, r3]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d101      	bne.n	ee8 <usart_init+0x1c8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     ee4:	3304      	adds	r3, #4
     ee6:	4318      	orrs	r0, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     ee8:	7e71      	ldrb	r1, [r6, #25]
     eea:	0289      	lsls	r1, r1, #10
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     eec:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     eee:	5cf3      	ldrb	r3, [r6, r3]
     ef0:	025b      	lsls	r3, r3, #9
     ef2:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ef4:	2326      	movs	r3, #38	; 0x26
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     ef6:	5cf3      	ldrb	r3, [r6, r3]
     ef8:	021b      	lsls	r3, r3, #8
     efa:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     efc:	232c      	movs	r3, #44	; 0x2c
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     efe:	5cf3      	ldrb	r3, [r6, r3]
     f00:	045b      	lsls	r3, r3, #17
     f02:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     f04:	232d      	movs	r3, #45	; 0x2d
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     f06:	5cf2      	ldrb	r2, [r6, r3]
     f08:	0412      	lsls	r2, r2, #16
     f0a:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     f0c:	7af3      	ldrb	r3, [r6, #11]
     f0e:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     f10:	8933      	ldrh	r3, [r6, #8]
     f12:	2bff      	cmp	r3, #255	; 0xff
     f14:	d004      	beq.n	f20 <usart_init+0x200>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f16:	2280      	movs	r2, #128	; 0x80
     f18:	0452      	lsls	r2, r2, #17
     f1a:	4310      	orrs	r0, r2
		ctrlb |= config->parity;
     f1c:	4319      	orrs	r1, r3
     f1e:	e005      	b.n	f2c <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     f20:	7ef3      	ldrb	r3, [r6, #27]
     f22:	2b00      	cmp	r3, #0
     f24:	d002      	beq.n	f2c <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f26:	2380      	movs	r3, #128	; 0x80
     f28:	04db      	lsls	r3, r3, #19
     f2a:	4318      	orrs	r0, r3
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     f2c:	9f02      	ldr	r7, [sp, #8]
     f2e:	68bb      	ldr	r3, [r7, #8]
						| config->lin_header_delay
						| config->lin_break_length;
     f30:	2207      	movs	r2, #7
     f32:	4013      	ands	r3, r2
     f34:	8c32      	ldrh	r2, [r6, #32]
     f36:	4313      	orrs	r3, r2
     f38:	8c72      	ldrh	r2, [r6, #34]	; 0x22
     f3a:	4313      	orrs	r3, r2
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     f3c:	60bb      	str	r3, [r7, #8]
						| config->lin_header_delay
						| config->lin_break_length;

	if (config->lin_node != LIN_INVALID_MODE) {
     f3e:	69f2      	ldr	r2, [r6, #28]
     f40:	2a00      	cmp	r2, #0
     f42:	d002      	beq.n	f4a <usart_init+0x22a>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
     f44:	4b54      	ldr	r3, [pc, #336]	; (1098 <usart_init+0x378>)
     f46:	4018      	ands	r0, r3
		ctrla |= config->lin_node;
     f48:	4310      	orrs	r0, r2
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f4a:	2334      	movs	r3, #52	; 0x34
     f4c:	5cf3      	ldrb	r3, [r6, r3]
     f4e:	2b00      	cmp	r3, #0
     f50:	d103      	bne.n	f5a <usart_init+0x23a>
     f52:	4b52      	ldr	r3, [pc, #328]	; (109c <usart_init+0x37c>)
     f54:	789b      	ldrb	r3, [r3, #2]
     f56:	079b      	lsls	r3, r3, #30
     f58:	d501      	bpl.n	f5e <usart_init+0x23e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f5a:	2380      	movs	r3, #128	; 0x80
     f5c:	4318      	orrs	r0, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f5e:	682a      	ldr	r2, [r5, #0]
     f60:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f62:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f64:	2b00      	cmp	r3, #0
     f66:	d1fc      	bne.n	f62 <usart_init+0x242>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     f68:	6079      	str	r1, [r7, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f6a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f6c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f6e:	2b00      	cmp	r3, #0
     f70:	d1fc      	bne.n	f6c <usart_init+0x24c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     f72:	6038      	str	r0, [r7, #0]

#ifdef FEATURE_USART_RS485
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
     f74:	683a      	ldr	r2, [r7, #0]
     f76:	23f0      	movs	r3, #240	; 0xf0
     f78:	051b      	lsls	r3, r3, #20
     f7a:	4013      	ands	r3, r2
     f7c:	22e0      	movs	r2, #224	; 0xe0
     f7e:	04d2      	lsls	r2, r2, #19
     f80:	4293      	cmp	r3, r2
     f82:	d03f      	beq.n	1004 <usart_init+0x2e4>
		SERCOM_USART_CTRLA_FORM(0x07)) {
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
     f84:	68bb      	ldr	r3, [r7, #8]
     f86:	2207      	movs	r2, #7
     f88:	4393      	bics	r3, r2
     f8a:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
     f8c:	68ba      	ldr	r2, [r7, #8]
     f8e:	2325      	movs	r3, #37	; 0x25
     f90:	5cf3      	ldrb	r3, [r6, r3]
     f92:	2107      	movs	r1, #7
     f94:	400b      	ands	r3, r1
     f96:	4313      	orrs	r3, r2
     f98:	60bb      	str	r3, [r7, #8]
     f9a:	e033      	b.n	1004 <usart_init+0x2e4>
     f9c:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f9e:	00bb      	lsls	r3, r7, #2
     fa0:	aa0a      	add	r2, sp, #40	; 0x28
     fa2:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     fa4:	2800      	cmp	r0, #0
     fa6:	d102      	bne.n	fae <usart_init+0x28e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     fa8:	0020      	movs	r0, r4
     faa:	4b3d      	ldr	r3, [pc, #244]	; (10a0 <usart_init+0x380>)
     fac:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     fae:	1c43      	adds	r3, r0, #1
     fb0:	d005      	beq.n	fbe <usart_init+0x29e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fb2:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     fb4:	0c00      	lsrs	r0, r0, #16
     fb6:	b2c0      	uxtb	r0, r0
     fb8:	0031      	movs	r1, r6
     fba:	4b3a      	ldr	r3, [pc, #232]	; (10a4 <usart_init+0x384>)
     fbc:	4798      	blx	r3
     fbe:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     fc0:	2f04      	cmp	r7, #4
     fc2:	d1eb      	bne.n	f9c <usart_init+0x27c>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     fc4:	2300      	movs	r3, #0
     fc6:	60eb      	str	r3, [r5, #12]
     fc8:	612b      	str	r3, [r5, #16]
     fca:	616b      	str	r3, [r5, #20]
     fcc:	61ab      	str	r3, [r5, #24]
     fce:	61eb      	str	r3, [r5, #28]
     fd0:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     fd2:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fd4:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fd6:	2200      	movs	r2, #0
     fd8:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     fda:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fdc:	3330      	adds	r3, #48	; 0x30
     fde:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     fe0:	3301      	adds	r3, #1
     fe2:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     fe4:	3301      	adds	r3, #1
     fe6:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     fe8:	3301      	adds	r3, #1
     fea:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     fec:	6828      	ldr	r0, [r5, #0]
     fee:	4b22      	ldr	r3, [pc, #136]	; (1078 <usart_init+0x358>)
     ff0:	4798      	blx	r3
     ff2:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     ff4:	492c      	ldr	r1, [pc, #176]	; (10a8 <usart_init+0x388>)
     ff6:	4b2d      	ldr	r3, [pc, #180]	; (10ac <usart_init+0x38c>)
     ff8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     ffa:	00a4      	lsls	r4, r4, #2
     ffc:	4b2c      	ldr	r3, [pc, #176]	; (10b0 <usart_init+0x390>)
     ffe:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1000:	2300      	movs	r3, #0
    1002:	e031      	b.n	1068 <usart_init+0x348>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1004:	ab0e      	add	r3, sp, #56	; 0x38
    1006:	2280      	movs	r2, #128	; 0x80
    1008:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    100a:	2200      	movs	r2, #0
    100c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    100e:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1010:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    1012:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1014:	930a      	str	r3, [sp, #40]	; 0x28
    1016:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1018:	930b      	str	r3, [sp, #44]	; 0x2c
    101a:	6c33      	ldr	r3, [r6, #64]	; 0x40
    101c:	930c      	str	r3, [sp, #48]	; 0x30
    101e:	6c73      	ldr	r3, [r6, #68]	; 0x44
    1020:	9302      	str	r3, [sp, #8]
    1022:	930d      	str	r3, [sp, #52]	; 0x34
    1024:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1026:	ae0e      	add	r6, sp, #56	; 0x38
    1028:	e7b8      	b.n	f9c <usart_init+0x27c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    102a:	2310      	movs	r3, #16
    102c:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    102e:	2300      	movs	r3, #0
    1030:	9307      	str	r3, [sp, #28]
    1032:	e003      	b.n	103c <usart_init+0x31c>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1034:	2303      	movs	r3, #3
    1036:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1038:	2300      	movs	r3, #0
    103a:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    103c:	6833      	ldr	r3, [r6, #0]
    103e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1040:	68f3      	ldr	r3, [r6, #12]
    1042:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1044:	6973      	ldr	r3, [r6, #20]
    1046:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1048:	7e33      	ldrb	r3, [r6, #24]
    104a:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    104c:	232e      	movs	r3, #46	; 0x2e
    104e:	5cf3      	ldrb	r3, [r6, r3]
    1050:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1052:	6873      	ldr	r3, [r6, #4]
    1054:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1056:	2b00      	cmp	r3, #0
    1058:	d100      	bne.n	105c <usart_init+0x33c>
    105a:	e6f9      	b.n	e50 <usart_init+0x130>
    105c:	2380      	movs	r3, #128	; 0x80
    105e:	055b      	lsls	r3, r3, #21
    1060:	459a      	cmp	sl, r3
    1062:	d100      	bne.n	1066 <usart_init+0x346>
    1064:	e6de      	b.n	e24 <usart_init+0x104>
    1066:	e718      	b.n	e9a <usart_init+0x17a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1068:	0018      	movs	r0, r3
    106a:	b011      	add	sp, #68	; 0x44
    106c:	bc3c      	pop	{r2, r3, r4, r5}
    106e:	4690      	mov	r8, r2
    1070:	4699      	mov	r9, r3
    1072:	46a2      	mov	sl, r4
    1074:	46ab      	mov	fp, r5
    1076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1078:	000007fd 	.word	0x000007fd
    107c:	40000800 	.word	0x40000800
    1080:	0000180d 	.word	0x0000180d
    1084:	0000179d 	.word	0x0000179d
    1088:	00000625 	.word	0x00000625
    108c:	00001831 	.word	0x00001831
    1090:	00000435 	.word	0x00000435
    1094:	0000045d 	.word	0x0000045d
    1098:	f0ffffff 	.word	0xf0ffffff
    109c:	41002000 	.word	0x41002000
    10a0:	00000671 	.word	0x00000671
    10a4:	00001909 	.word	0x00001909
    10a8:	00001151 	.word	0x00001151
    10ac:	0000083d 	.word	0x0000083d
    10b0:	20000120 	.word	0x20000120

000010b4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    10b4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    10b6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    10b8:	2a00      	cmp	r2, #0
    10ba:	d00e      	beq.n	10da <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    10bc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    10be:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    10c0:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    10c2:	2a00      	cmp	r2, #0
    10c4:	d109      	bne.n	10da <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    10c6:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10c8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10ca:	2a00      	cmp	r2, #0
    10cc:	d1fc      	bne.n	10c8 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    10ce:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    10d0:	2102      	movs	r1, #2
    10d2:	7e1a      	ldrb	r2, [r3, #24]
    10d4:	420a      	tst	r2, r1
    10d6:	d0fc      	beq.n	10d2 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    10d8:	2300      	movs	r3, #0
}
    10da:	0018      	movs	r0, r3
    10dc:	4770      	bx	lr
    10de:	46c0      	nop			; (mov r8, r8)

000010e0 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    10e0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    10e2:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    10e4:	2a00      	cmp	r2, #0
    10e6:	d030      	beq.n	114a <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    10e8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    10ea:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    10ec:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    10ee:	2a00      	cmp	r2, #0
    10f0:	d12b      	bne.n	114a <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    10f2:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    10f4:	7e10      	ldrb	r0, [r2, #24]
    10f6:	0740      	lsls	r0, r0, #29
    10f8:	d527      	bpl.n	114a <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10fa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10fc:	2b00      	cmp	r3, #0
    10fe:	d1fc      	bne.n	10fa <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1100:	8b53      	ldrh	r3, [r2, #26]
    1102:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1104:	0658      	lsls	r0, r3, #25
    1106:	d01d      	beq.n	1144 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1108:	0798      	lsls	r0, r3, #30
    110a:	d503      	bpl.n	1114 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    110c:	2302      	movs	r3, #2
    110e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    1110:	3318      	adds	r3, #24
    1112:	e01a      	b.n	114a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1114:	0758      	lsls	r0, r3, #29
    1116:	d503      	bpl.n	1120 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1118:	2304      	movs	r3, #4
    111a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    111c:	331a      	adds	r3, #26
    111e:	e014      	b.n	114a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1120:	07d8      	lsls	r0, r3, #31
    1122:	d503      	bpl.n	112c <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1124:	2301      	movs	r3, #1
    1126:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    1128:	3312      	adds	r3, #18
    112a:	e00e      	b.n	114a <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    112c:	06d8      	lsls	r0, r3, #27
    112e:	d503      	bpl.n	1138 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1130:	2310      	movs	r3, #16
    1132:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    1134:	3332      	adds	r3, #50	; 0x32
    1136:	e008      	b.n	114a <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1138:	069b      	lsls	r3, r3, #26
    113a:	d503      	bpl.n	1144 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    113c:	2320      	movs	r3, #32
    113e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1140:	3321      	adds	r3, #33	; 0x21
    1142:	e002      	b.n	114a <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1144:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1146:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1148:	2300      	movs	r3, #0
}
    114a:	0018      	movs	r0, r3
    114c:	4770      	bx	lr
    114e:	46c0      	nop			; (mov r8, r8)

00001150 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1152:	0080      	lsls	r0, r0, #2
    1154:	4b61      	ldr	r3, [pc, #388]	; (12dc <_usart_interrupt_handler+0x18c>)
    1156:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1158:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    115a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    115c:	2b00      	cmp	r3, #0
    115e:	d1fc      	bne.n	115a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1160:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1162:	7da6      	ldrb	r6, [r4, #22]
    1164:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1166:	2330      	movs	r3, #48	; 0x30
    1168:	5ceb      	ldrb	r3, [r5, r3]
    116a:	2231      	movs	r2, #49	; 0x31
    116c:	5caf      	ldrb	r7, [r5, r2]
    116e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1170:	07f3      	lsls	r3, r6, #31
    1172:	d522      	bpl.n	11ba <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1174:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1176:	b29b      	uxth	r3, r3
    1178:	2b00      	cmp	r3, #0
    117a:	d01c      	beq.n	11b6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    117c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    117e:	7813      	ldrb	r3, [r2, #0]
    1180:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1182:	1c51      	adds	r1, r2, #1
    1184:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1186:	7969      	ldrb	r1, [r5, #5]
    1188:	2901      	cmp	r1, #1
    118a:	d001      	beq.n	1190 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    118c:	b29b      	uxth	r3, r3
    118e:	e004      	b.n	119a <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1190:	7851      	ldrb	r1, [r2, #1]
    1192:	0209      	lsls	r1, r1, #8
    1194:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1196:	3202      	adds	r2, #2
    1198:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    119a:	05db      	lsls	r3, r3, #23
    119c:	0ddb      	lsrs	r3, r3, #23
    119e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    11a0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    11a2:	3b01      	subs	r3, #1
    11a4:	b29b      	uxth	r3, r3
    11a6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    11a8:	2b00      	cmp	r3, #0
    11aa:	d106      	bne.n	11ba <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    11ac:	3301      	adds	r3, #1
    11ae:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    11b0:	3301      	adds	r3, #1
    11b2:	75a3      	strb	r3, [r4, #22]
    11b4:	e001      	b.n	11ba <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    11b6:	2301      	movs	r3, #1
    11b8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    11ba:	07b3      	lsls	r3, r6, #30
    11bc:	d509      	bpl.n	11d2 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    11be:	2302      	movs	r3, #2
    11c0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    11c2:	2200      	movs	r2, #0
    11c4:	3331      	adds	r3, #49	; 0x31
    11c6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    11c8:	07fb      	lsls	r3, r7, #31
    11ca:	d502      	bpl.n	11d2 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    11cc:	0028      	movs	r0, r5
    11ce:	68eb      	ldr	r3, [r5, #12]
    11d0:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    11d2:	0773      	lsls	r3, r6, #29
    11d4:	d563      	bpl.n	129e <_usart_interrupt_handler+0x14e>

		if (module->remaining_rx_buffer_length) {
    11d6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    11d8:	b29b      	uxth	r3, r3
    11da:	2b00      	cmp	r3, #0
    11dc:	d05d      	beq.n	129a <_usart_interrupt_handler+0x14a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    11de:	8b63      	ldrh	r3, [r4, #26]
    11e0:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    11e2:	071a      	lsls	r2, r3, #28
    11e4:	d402      	bmi.n	11ec <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    11e6:	227f      	movs	r2, #127	; 0x7f
    11e8:	4013      	ands	r3, r2
    11ea:	e001      	b.n	11f0 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    11ec:	2277      	movs	r2, #119	; 0x77
    11ee:	4013      	ands	r3, r2
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    11f0:	065a      	lsls	r2, r3, #25
    11f2:	d501      	bpl.n	11f8 <_usart_interrupt_handler+0xa8>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    11f4:	2240      	movs	r2, #64	; 0x40
    11f6:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    11f8:	2b00      	cmp	r3, #0
    11fa:	d02c      	beq.n	1256 <_usart_interrupt_handler+0x106>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    11fc:	079a      	lsls	r2, r3, #30
    11fe:	d505      	bpl.n	120c <_usart_interrupt_handler+0xbc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1200:	221a      	movs	r2, #26
    1202:	2332      	movs	r3, #50	; 0x32
    1204:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1206:	3b30      	subs	r3, #48	; 0x30
    1208:	8363      	strh	r3, [r4, #26]
    120a:	e01e      	b.n	124a <_usart_interrupt_handler+0xfa>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    120c:	075a      	lsls	r2, r3, #29
    120e:	d505      	bpl.n	121c <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1210:	221e      	movs	r2, #30
    1212:	2332      	movs	r3, #50	; 0x32
    1214:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1216:	3b2e      	subs	r3, #46	; 0x2e
    1218:	8363      	strh	r3, [r4, #26]
    121a:	e016      	b.n	124a <_usart_interrupt_handler+0xfa>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    121c:	07da      	lsls	r2, r3, #31
    121e:	d505      	bpl.n	122c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1220:	2213      	movs	r2, #19
    1222:	2332      	movs	r3, #50	; 0x32
    1224:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1226:	3b31      	subs	r3, #49	; 0x31
    1228:	8363      	strh	r3, [r4, #26]
    122a:	e00e      	b.n	124a <_usart_interrupt_handler+0xfa>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    122c:	06da      	lsls	r2, r3, #27
    122e:	d505      	bpl.n	123c <_usart_interrupt_handler+0xec>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1230:	2242      	movs	r2, #66	; 0x42
    1232:	2332      	movs	r3, #50	; 0x32
    1234:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1236:	3b22      	subs	r3, #34	; 0x22
    1238:	8363      	strh	r3, [r4, #26]
    123a:	e006      	b.n	124a <_usart_interrupt_handler+0xfa>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    123c:	069b      	lsls	r3, r3, #26
    123e:	d504      	bpl.n	124a <_usart_interrupt_handler+0xfa>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1240:	2241      	movs	r2, #65	; 0x41
    1242:	2332      	movs	r3, #50	; 0x32
    1244:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1246:	3b12      	subs	r3, #18
    1248:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    124a:	077b      	lsls	r3, r7, #29
    124c:	d527      	bpl.n	129e <_usart_interrupt_handler+0x14e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    124e:	0028      	movs	r0, r5
    1250:	696b      	ldr	r3, [r5, #20]
    1252:	4798      	blx	r3
    1254:	e023      	b.n	129e <_usart_interrupt_handler+0x14e>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1256:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1258:	05db      	lsls	r3, r3, #23
    125a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    125c:	b2da      	uxtb	r2, r3
    125e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1260:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1262:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1264:	1c51      	adds	r1, r2, #1
    1266:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1268:	7969      	ldrb	r1, [r5, #5]
    126a:	2901      	cmp	r1, #1
    126c:	d104      	bne.n	1278 <_usart_interrupt_handler+0x128>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    126e:	0a1b      	lsrs	r3, r3, #8
    1270:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1272:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1274:	3301      	adds	r3, #1
    1276:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1278:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    127a:	3b01      	subs	r3, #1
    127c:	b29b      	uxth	r3, r3
    127e:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1280:	2b00      	cmp	r3, #0
    1282:	d10c      	bne.n	129e <_usart_interrupt_handler+0x14e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1284:	3304      	adds	r3, #4
    1286:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1288:	2200      	movs	r2, #0
    128a:	332e      	adds	r3, #46	; 0x2e
    128c:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    128e:	07bb      	lsls	r3, r7, #30
    1290:	d505      	bpl.n	129e <_usart_interrupt_handler+0x14e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1292:	0028      	movs	r0, r5
    1294:	692b      	ldr	r3, [r5, #16]
    1296:	4798      	blx	r3
    1298:	e001      	b.n	129e <_usart_interrupt_handler+0x14e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    129a:	2304      	movs	r3, #4
    129c:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    129e:	06f3      	lsls	r3, r6, #27
    12a0:	d507      	bpl.n	12b2 <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    12a2:	2310      	movs	r3, #16
    12a4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    12a6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    12a8:	06fb      	lsls	r3, r7, #27
    12aa:	d502      	bpl.n	12b2 <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    12ac:	0028      	movs	r0, r5
    12ae:	69eb      	ldr	r3, [r5, #28]
    12b0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    12b2:	06b3      	lsls	r3, r6, #26
    12b4:	d507      	bpl.n	12c6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    12b6:	2320      	movs	r3, #32
    12b8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    12ba:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    12bc:	073b      	lsls	r3, r7, #28
    12be:	d502      	bpl.n	12c6 <_usart_interrupt_handler+0x176>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    12c0:	0028      	movs	r0, r5
    12c2:	69ab      	ldr	r3, [r5, #24]
    12c4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    12c6:	0733      	lsls	r3, r6, #28
    12c8:	d507      	bpl.n	12da <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    12ca:	2308      	movs	r3, #8
    12cc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    12ce:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    12d0:	06bb      	lsls	r3, r7, #26
    12d2:	d502      	bpl.n	12da <_usart_interrupt_handler+0x18a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    12d4:	6a2b      	ldr	r3, [r5, #32]
    12d6:	0028      	movs	r0, r5
    12d8:	4798      	blx	r3
		}
	}
#endif
}
    12da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12dc:	20000120 	.word	0x20000120

000012e0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    12e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12e2:	4647      	mov	r7, r8
    12e4:	b480      	push	{r7}
    12e6:	000c      	movs	r4, r1
    12e8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    12ea:	2800      	cmp	r0, #0
    12ec:	d10d      	bne.n	130a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    12ee:	2a00      	cmp	r2, #0
    12f0:	dd0e      	ble.n	1310 <_read+0x30>
    12f2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    12f4:	4e08      	ldr	r6, [pc, #32]	; (1318 <_read+0x38>)
    12f6:	4d09      	ldr	r5, [pc, #36]	; (131c <_read+0x3c>)
    12f8:	6830      	ldr	r0, [r6, #0]
    12fa:	0021      	movs	r1, r4
    12fc:	682b      	ldr	r3, [r5, #0]
    12fe:	4798      	blx	r3
		ptr++;
    1300:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1302:	42a7      	cmp	r7, r4
    1304:	d1f8      	bne.n	12f8 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    1306:	4640      	mov	r0, r8
    1308:	e003      	b.n	1312 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    130a:	2001      	movs	r0, #1
    130c:	4240      	negs	r0, r0
    130e:	e000      	b.n	1312 <_read+0x32>
	}

	for (; len > 0; --len) {
    1310:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    1312:	bc04      	pop	{r2}
    1314:	4690      	mov	r8, r2
    1316:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1318:	20000140 	.word	0x20000140
    131c:	20000138 	.word	0x20000138

00001320 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1320:	b5f0      	push	{r4, r5, r6, r7, lr}
    1322:	4647      	mov	r7, r8
    1324:	b480      	push	{r7}
    1326:	000e      	movs	r6, r1
    1328:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    132a:	3801      	subs	r0, #1
    132c:	2802      	cmp	r0, #2
    132e:	d811      	bhi.n	1354 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    1330:	2a00      	cmp	r2, #0
    1332:	d012      	beq.n	135a <_write+0x3a>
    1334:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1336:	4b0c      	ldr	r3, [pc, #48]	; (1368 <_write+0x48>)
    1338:	4698      	mov	r8, r3
    133a:	4f0c      	ldr	r7, [pc, #48]	; (136c <_write+0x4c>)
    133c:	4643      	mov	r3, r8
    133e:	6818      	ldr	r0, [r3, #0]
    1340:	5d31      	ldrb	r1, [r6, r4]
    1342:	683b      	ldr	r3, [r7, #0]
    1344:	4798      	blx	r3
    1346:	2800      	cmp	r0, #0
    1348:	db09      	blt.n	135e <_write+0x3e>
			return -1;
		}
		++nChars;
    134a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    134c:	42a5      	cmp	r5, r4
    134e:	d1f5      	bne.n	133c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    1350:	0020      	movs	r0, r4
    1352:	e006      	b.n	1362 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1354:	2001      	movs	r0, #1
    1356:	4240      	negs	r0, r0
    1358:	e003      	b.n	1362 <_write+0x42>
	}

	for (; len != 0; --len) {
    135a:	2000      	movs	r0, #0
    135c:	e001      	b.n	1362 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    135e:	2001      	movs	r0, #1
    1360:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    1362:	bc04      	pop	{r2}
    1364:	4690      	mov	r8, r2
    1366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1368:	20000140 	.word	0x20000140
    136c:	2000013c 	.word	0x2000013c

00001370 <Configure_Led>:
  * @param  None
  * @retval None
  */

void Configure_Led(void)
{
    1370:	b5f0      	push	{r4, r5, r6, r7, lr}
    1372:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1374:	ac01      	add	r4, sp, #4
    1376:	2501      	movs	r5, #1
    1378:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    137a:	2300      	movs	r3, #0
    137c:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    137e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED0_PIN, &pin_conf);
    1380:	0021      	movs	r1, r4
    1382:	201b      	movs	r0, #27
    1384:	4f07      	ldr	r7, [pc, #28]	; (13a4 <Configure_Led+0x34>)
    1386:	47b8      	blx	r7

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1388:	2682      	movs	r6, #130	; 0x82
    138a:	05f6      	lsls	r6, r6, #23
    138c:	2380      	movs	r3, #128	; 0x80
    138e:	051b      	lsls	r3, r3, #20
    1390:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1392:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED1_PIN, &pin_conf);
    1394:	0021      	movs	r1, r4
    1396:	201c      	movs	r0, #28
    1398:	47b8      	blx	r7
    139a:	2380      	movs	r3, #128	; 0x80
    139c:	055b      	lsls	r3, r3, #21
    139e:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(LED1_PIN, LED1_INACTIVE);

}
    13a0:	b003      	add	sp, #12
    13a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13a4:	00000411 	.word	0x00000411

000013a8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    13a8:	b570      	push	{r4, r5, r6, lr}
    13aa:	b082      	sub	sp, #8
    13ac:	0005      	movs	r5, r0
    13ae:	000e      	movs	r6, r1
	uint16_t temp = 0;
    13b0:	2200      	movs	r2, #0
    13b2:	466b      	mov	r3, sp
    13b4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    13b6:	4c06      	ldr	r4, [pc, #24]	; (13d0 <usart_serial_getchar+0x28>)
    13b8:	466b      	mov	r3, sp
    13ba:	1d99      	adds	r1, r3, #6
    13bc:	0028      	movs	r0, r5
    13be:	47a0      	blx	r4
    13c0:	2800      	cmp	r0, #0
    13c2:	d1f9      	bne.n	13b8 <usart_serial_getchar+0x10>

	*c = temp;
    13c4:	466b      	mov	r3, sp
    13c6:	3306      	adds	r3, #6
    13c8:	881b      	ldrh	r3, [r3, #0]
    13ca:	7033      	strb	r3, [r6, #0]
}
    13cc:	b002      	add	sp, #8
    13ce:	bd70      	pop	{r4, r5, r6, pc}
    13d0:	000010e1 	.word	0x000010e1

000013d4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    13d4:	b570      	push	{r4, r5, r6, lr}
    13d6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    13d8:	b28c      	uxth	r4, r1
    13da:	4e03      	ldr	r6, [pc, #12]	; (13e8 <usart_serial_putchar+0x14>)
    13dc:	0021      	movs	r1, r4
    13de:	0028      	movs	r0, r5
    13e0:	47b0      	blx	r6
    13e2:	2800      	cmp	r0, #0
    13e4:	d1fa      	bne.n	13dc <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    13e6:	bd70      	pop	{r4, r5, r6, pc}
    13e8:	000010b5 	.word	0x000010b5

000013ec <Configure_Usart>:
  * @param  None
  * @retval None
  */

void Configure_Usart(void)
{
    13ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ee:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    13f0:	2380      	movs	r3, #128	; 0x80
    13f2:	05db      	lsls	r3, r3, #23
    13f4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    13f6:	2300      	movs	r3, #0
    13f8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    13fa:	22ff      	movs	r2, #255	; 0xff
    13fc:	4669      	mov	r1, sp
    13fe:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1400:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1402:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1404:	2401      	movs	r4, #1
    1406:	222c      	movs	r2, #44	; 0x2c
    1408:	548c      	strb	r4, [r1, r2]
	config->transmitter_enable = true;
    140a:	3201      	adds	r2, #1
    140c:	548c      	strb	r4, [r1, r2]
	config->clock_polarity_inverted = false;
    140e:	3201      	adds	r2, #1
    1410:	548b      	strb	r3, [r1, r2]
	config->use_external_clock = false;
    1412:	3201      	adds	r2, #1
    1414:	548b      	strb	r3, [r1, r2]
	config->ext_clock_freq   = 0;
    1416:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1418:	3205      	adds	r2, #5
    141a:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
    141c:	3201      	adds	r2, #1
    141e:	548b      	strb	r3, [r1, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1420:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1422:	2200      	movs	r2, #0
    1424:	820b      	strh	r3, [r1, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1426:	76ca      	strb	r2, [r1, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    1428:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    142a:	840b      	strh	r3, [r1, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    142c:	844b      	strh	r3, [r1, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    142e:	760a      	strb	r2, [r1, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1430:	2324      	movs	r3, #36	; 0x24
    1432:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1434:	764a      	strb	r2, [r1, #25]
	config->receive_pulse_length                    = 19;
    1436:	2313      	movs	r3, #19
    1438:	768b      	strb	r3, [r1, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    143a:	3313      	adds	r3, #19
    143c:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    143e:	3b01      	subs	r3, #1
    1440:	54ca      	strb	r2, [r1, r3]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = USART1_BAUD;
    1442:	23e1      	movs	r3, #225	; 0xe1
    1444:	025b      	lsls	r3, r3, #9
    1446:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.mux_setting = USART1_SERCOM_MUX_SETTING;
    1448:	2380      	movs	r3, #128	; 0x80
    144a:	035b      	lsls	r3, r3, #13
    144c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = USART1_SERCOM_PINMUX_PAD0;
    144e:	4b19      	ldr	r3, [pc, #100]	; (14b4 <Configure_Usart+0xc8>)
    1450:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad1 = USART1_SERCOM_PINMUX_PAD1;
    1452:	4b19      	ldr	r3, [pc, #100]	; (14b8 <Configure_Usart+0xcc>)
    1454:	930f      	str	r3, [sp, #60]	; 0x3c
	config_usart.pinmux_pad2 = USART1_SERCOM_PINMUX_PAD2;
    1456:	2301      	movs	r3, #1
    1458:	425b      	negs	r3, r3
    145a:	9310      	str	r3, [sp, #64]	; 0x40
	config_usart.pinmux_pad3 = USART1_SERCOM_PINMUX_PAD3;
    145c:	9311      	str	r3, [sp, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    145e:	4d17      	ldr	r5, [pc, #92]	; (14bc <Configure_Usart+0xd0>)
    1460:	4b17      	ldr	r3, [pc, #92]	; (14c0 <Configure_Usart+0xd4>)
    1462:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1464:	4a17      	ldr	r2, [pc, #92]	; (14c4 <Configure_Usart+0xd8>)
    1466:	4b18      	ldr	r3, [pc, #96]	; (14c8 <Configure_Usart+0xdc>)
    1468:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    146a:	4a18      	ldr	r2, [pc, #96]	; (14cc <Configure_Usart+0xe0>)
    146c:	4b18      	ldr	r3, [pc, #96]	; (14d0 <Configure_Usart+0xe4>)
    146e:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    1470:	466a      	mov	r2, sp
    1472:	4918      	ldr	r1, [pc, #96]	; (14d4 <Configure_Usart+0xe8>)
    1474:	0028      	movs	r0, r5
    1476:	4b18      	ldr	r3, [pc, #96]	; (14d8 <Configure_Usart+0xec>)
    1478:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    147a:	4f18      	ldr	r7, [pc, #96]	; (14dc <Configure_Usart+0xf0>)
    147c:	683b      	ldr	r3, [r7, #0]
    147e:	6898      	ldr	r0, [r3, #8]
    1480:	2100      	movs	r1, #0
    1482:	4e17      	ldr	r6, [pc, #92]	; (14e0 <Configure_Usart+0xf4>)
    1484:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1486:	683b      	ldr	r3, [r7, #0]
    1488:	6858      	ldr	r0, [r3, #4]
    148a:	2100      	movs	r1, #0
    148c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    148e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1490:	0030      	movs	r0, r6
    1492:	4b14      	ldr	r3, [pc, #80]	; (14e4 <Configure_Usart+0xf8>)
    1494:	4798      	blx	r3
    1496:	231f      	movs	r3, #31
    1498:	4018      	ands	r0, r3
    149a:	4084      	lsls	r4, r0
    149c:	4b12      	ldr	r3, [pc, #72]	; (14e8 <Configure_Usart+0xfc>)
    149e:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    14a0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    14a2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    14a4:	2b00      	cmp	r3, #0
    14a6:	d1fc      	bne.n	14a2 <Configure_Usart+0xb6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    14a8:	6832      	ldr	r2, [r6, #0]
    14aa:	3302      	adds	r3, #2
    14ac:	4313      	orrs	r3, r2
    14ae:	6033      	str	r3, [r6, #0]
	
	stdio_serial_init(&usart_instance, USART1_MODULE, &config_usart);
	
	usart_enable(&usart_instance);
    14b0:	b013      	add	sp, #76	; 0x4c
    14b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14b4:	00160002 	.word	0x00160002
    14b8:	00170002 	.word	0x00170002
    14bc:	20000144 	.word	0x20000144
    14c0:	20000140 	.word	0x20000140
    14c4:	000013d5 	.word	0x000013d5
    14c8:	2000013c 	.word	0x2000013c
    14cc:	000013a9 	.word	0x000013a9
    14d0:	20000138 	.word	0x20000138
    14d4:	42001000 	.word	0x42001000
    14d8:	00000d21 	.word	0x00000d21
    14dc:	2000006c 	.word	0x2000006c
    14e0:	00001c53 	.word	0x00001c53
    14e4:	00000879 	.word	0x00000879
    14e8:	e000e100 	.word	0xe000e100

000014ec <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    14ec:	4770      	bx	lr
    14ee:	46c0      	nop			; (mov r8, r8)

000014f0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    14f0:	4b0c      	ldr	r3, [pc, #48]	; (1524 <cpu_irq_enter_critical+0x34>)
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	2b00      	cmp	r3, #0
    14f6:	d110      	bne.n	151a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    14f8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    14fc:	2b00      	cmp	r3, #0
    14fe:	d109      	bne.n	1514 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1500:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1502:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1506:	2200      	movs	r2, #0
    1508:	4b07      	ldr	r3, [pc, #28]	; (1528 <cpu_irq_enter_critical+0x38>)
    150a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    150c:	3201      	adds	r2, #1
    150e:	4b07      	ldr	r3, [pc, #28]	; (152c <cpu_irq_enter_critical+0x3c>)
    1510:	701a      	strb	r2, [r3, #0]
    1512:	e002      	b.n	151a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1514:	2200      	movs	r2, #0
    1516:	4b05      	ldr	r3, [pc, #20]	; (152c <cpu_irq_enter_critical+0x3c>)
    1518:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    151a:	4a02      	ldr	r2, [pc, #8]	; (1524 <cpu_irq_enter_critical+0x34>)
    151c:	6813      	ldr	r3, [r2, #0]
    151e:	3301      	adds	r3, #1
    1520:	6013      	str	r3, [r2, #0]
}
    1522:	4770      	bx	lr
    1524:	200000b0 	.word	0x200000b0
    1528:	20000008 	.word	0x20000008
    152c:	200000b4 	.word	0x200000b4

00001530 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1530:	4b08      	ldr	r3, [pc, #32]	; (1554 <cpu_irq_leave_critical+0x24>)
    1532:	681a      	ldr	r2, [r3, #0]
    1534:	3a01      	subs	r2, #1
    1536:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1538:	681b      	ldr	r3, [r3, #0]
    153a:	2b00      	cmp	r3, #0
    153c:	d109      	bne.n	1552 <cpu_irq_leave_critical+0x22>
    153e:	4b06      	ldr	r3, [pc, #24]	; (1558 <cpu_irq_leave_critical+0x28>)
    1540:	781b      	ldrb	r3, [r3, #0]
    1542:	2b00      	cmp	r3, #0
    1544:	d005      	beq.n	1552 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1546:	2201      	movs	r2, #1
    1548:	4b04      	ldr	r3, [pc, #16]	; (155c <cpu_irq_leave_critical+0x2c>)
    154a:	701a      	strb	r2, [r3, #0]
    154c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1550:	b662      	cpsie	i
	}
}
    1552:	4770      	bx	lr
    1554:	200000b0 	.word	0x200000b0
    1558:	200000b4 	.word	0x200000b4
    155c:	20000008 	.word	0x20000008

00001560 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1560:	b510      	push	{r4, lr}
	switch (clock_source) {
    1562:	2807      	cmp	r0, #7
    1564:	d803      	bhi.n	156e <system_clock_source_get_hz+0xe>
    1566:	0080      	lsls	r0, r0, #2
    1568:	4b0f      	ldr	r3, [pc, #60]	; (15a8 <system_clock_source_get_hz+0x48>)
    156a:	581b      	ldr	r3, [r3, r0]
    156c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    156e:	2000      	movs	r0, #0
    1570:	e018      	b.n	15a4 <system_clock_source_get_hz+0x44>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1572:	4b0e      	ldr	r3, [pc, #56]	; (15ac <system_clock_source_get_hz+0x4c>)
    1574:	6858      	ldr	r0, [r3, #4]
    1576:	e015      	b.n	15a4 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    1578:	4b0d      	ldr	r3, [pc, #52]	; (15b0 <system_clock_source_get_hz+0x50>)
    157a:	7d59      	ldrb	r1, [r3, #21]
    157c:	0709      	lsls	r1, r1, #28
    157e:	0f09      	lsrs	r1, r1, #28
    1580:	3101      	adds	r1, #1
    1582:	480c      	ldr	r0, [pc, #48]	; (15b4 <system_clock_source_get_hz+0x54>)
    1584:	4b0c      	ldr	r3, [pc, #48]	; (15b8 <system_clock_source_get_hz+0x58>)
    1586:	4798      	blx	r3
    1588:	e00c      	b.n	15a4 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    158a:	4b08      	ldr	r3, [pc, #32]	; (15ac <system_clock_source_get_hz+0x4c>)
    158c:	6898      	ldr	r0, [r3, #8]
    158e:	e009      	b.n	15a4 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1590:	4b07      	ldr	r3, [pc, #28]	; (15b0 <system_clock_source_get_hz+0x50>)
    1592:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    1594:	2000      	movs	r0, #0

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1596:	079b      	lsls	r3, r3, #30
    1598:	d504      	bpl.n	15a4 <system_clock_source_get_hz+0x44>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    159a:	4b04      	ldr	r3, [pc, #16]	; (15ac <system_clock_source_get_hz+0x4c>)
    159c:	6818      	ldr	r0, [r3, #0]
    159e:	e001      	b.n	15a4 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    15a0:	2080      	movs	r0, #128	; 0x80
    15a2:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    15a4:	bd10      	pop	{r4, pc}
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	00002408 	.word	0x00002408
    15ac:	200000b8 	.word	0x200000b8
    15b0:	40001000 	.word	0x40001000
    15b4:	02dc6c00 	.word	0x02dc6c00
    15b8:	00001a75 	.word	0x00001a75

000015bc <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    15bc:	b500      	push	{lr}
    15be:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    15c0:	2203      	movs	r2, #3
    15c2:	4b10      	ldr	r3, [pc, #64]	; (1604 <system_clock_init+0x48>)
    15c4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    15c6:	4a10      	ldr	r2, [pc, #64]	; (1608 <system_clock_init+0x4c>)
    15c8:	6853      	ldr	r3, [r2, #4]
    15ca:	211e      	movs	r1, #30
    15cc:	438b      	bics	r3, r1
    15ce:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    15d0:	4a0e      	ldr	r2, [pc, #56]	; (160c <system_clock_init+0x50>)
    15d2:	7d11      	ldrb	r1, [r2, #20]
    15d4:	2380      	movs	r3, #128	; 0x80
    15d6:	430b      	orrs	r3, r1
    15d8:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    15da:	4b0d      	ldr	r3, [pc, #52]	; (1610 <system_clock_init+0x54>)
    15dc:	4798      	blx	r3
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    15de:	2301      	movs	r3, #1
    15e0:	4a0c      	ldr	r2, [pc, #48]	; (1614 <system_clock_init+0x58>)
    15e2:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    15e4:	a901      	add	r1, sp, #4
    15e6:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    15e8:	2300      	movs	r3, #0
    15ea:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
    15ec:	2206      	movs	r2, #6
    15ee:	700a      	strb	r2, [r1, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    15f0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    15f2:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    15f4:	2000      	movs	r0, #0
    15f6:	4b08      	ldr	r3, [pc, #32]	; (1618 <system_clock_init+0x5c>)
    15f8:	4798      	blx	r3
    15fa:	2000      	movs	r0, #0
    15fc:	4b07      	ldr	r3, [pc, #28]	; (161c <system_clock_init+0x60>)
    15fe:	4798      	blx	r3
#endif

}
    1600:	b005      	add	sp, #20
    1602:	bd00      	pop	{pc}
    1604:	40001800 	.word	0x40001800
    1608:	41004000 	.word	0x41004000
    160c:	40001000 	.word	0x40001000
    1610:	00001621 	.word	0x00001621
    1614:	40000800 	.word	0x40000800
    1618:	00001645 	.word	0x00001645
    161c:	000016f1 	.word	0x000016f1

00001620 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1620:	4a06      	ldr	r2, [pc, #24]	; (163c <system_gclk_init+0x1c>)
    1622:	6951      	ldr	r1, [r2, #20]
    1624:	2380      	movs	r3, #128	; 0x80
    1626:	430b      	orrs	r3, r1
    1628:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    162a:	2201      	movs	r2, #1
    162c:	4b04      	ldr	r3, [pc, #16]	; (1640 <system_gclk_init+0x20>)
    162e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1630:	0019      	movs	r1, r3
    1632:	780b      	ldrb	r3, [r1, #0]
    1634:	4213      	tst	r3, r2
    1636:	d1fc      	bne.n	1632 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1638:	4770      	bx	lr
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	40000800 	.word	0x40000800
    1640:	40001c00 	.word	0x40001c00

00001644 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1644:	b570      	push	{r4, r5, r6, lr}
    1646:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1648:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    164a:	784b      	ldrb	r3, [r1, #1]
    164c:	2b00      	cmp	r3, #0
    164e:	d002      	beq.n	1656 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1650:	2380      	movs	r3, #128	; 0x80
    1652:	00db      	lsls	r3, r3, #3
    1654:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1656:	7a4b      	ldrb	r3, [r1, #9]
    1658:	2b00      	cmp	r3, #0
    165a:	d002      	beq.n	1662 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    165c:	2380      	movs	r3, #128	; 0x80
    165e:	011b      	lsls	r3, r3, #4
    1660:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1662:	684a      	ldr	r2, [r1, #4]
    1664:	2a01      	cmp	r2, #1
    1666:	d917      	bls.n	1698 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1668:	1e53      	subs	r3, r2, #1
    166a:	421a      	tst	r2, r3
    166c:	d10f      	bne.n	168e <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    166e:	2a02      	cmp	r2, #2
    1670:	d906      	bls.n	1680 <system_gclk_gen_set_config+0x3c>
    1672:	2302      	movs	r3, #2
    1674:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    1676:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1678:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    167a:	429a      	cmp	r2, r3
    167c:	d8fb      	bhi.n	1676 <system_gclk_gen_set_config+0x32>
    167e:	e000      	b.n	1682 <system_gclk_gen_set_config+0x3e>
    1680:	2000      	movs	r0, #0
    1682:	2380      	movs	r3, #128	; 0x80
    1684:	015b      	lsls	r3, r3, #5
    1686:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1688:	0400      	lsls	r0, r0, #16
    168a:	4304      	orrs	r4, r0
    168c:	e004      	b.n	1698 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    168e:	0412      	lsls	r2, r2, #16
    1690:	2380      	movs	r3, #128	; 0x80
    1692:	009b      	lsls	r3, r3, #2
    1694:	431a      	orrs	r2, r3
    1696:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1698:	7a0b      	ldrb	r3, [r1, #8]
    169a:	2b00      	cmp	r3, #0
    169c:	d002      	beq.n	16a4 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    169e:	2380      	movs	r3, #128	; 0x80
    16a0:	019b      	lsls	r3, r3, #6
    16a2:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    16a4:	2604      	movs	r6, #4
    16a6:	40ae      	lsls	r6, r5
    16a8:	490d      	ldr	r1, [pc, #52]	; (16e0 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    16aa:	4a0e      	ldr	r2, [pc, #56]	; (16e4 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    16ac:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    16ae:	4013      	ands	r3, r2
    16b0:	421e      	tst	r6, r3
    16b2:	d1fb      	bne.n	16ac <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16b4:	4b0c      	ldr	r3, [pc, #48]	; (16e8 <system_gclk_gen_set_config+0xa4>)
    16b6:	4798      	blx	r3
    16b8:	00ad      	lsls	r5, r5, #2
    16ba:	4b09      	ldr	r3, [pc, #36]	; (16e0 <system_gclk_gen_set_config+0x9c>)
    16bc:	469c      	mov	ip, r3
    16be:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    16c0:	6a28      	ldr	r0, [r5, #32]
    16c2:	2380      	movs	r3, #128	; 0x80
    16c4:	005b      	lsls	r3, r3, #1
    16c6:	4018      	ands	r0, r3
    16c8:	4320      	orrs	r0, r4
    16ca:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    16cc:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    16ce:	4a05      	ldr	r2, [pc, #20]	; (16e4 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    16d0:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    16d2:	4013      	ands	r3, r2
    16d4:	421e      	tst	r6, r3
    16d6:	d1fb      	bne.n	16d0 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16d8:	4b04      	ldr	r3, [pc, #16]	; (16ec <system_gclk_gen_set_config+0xa8>)
    16da:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    16dc:	bd70      	pop	{r4, r5, r6, pc}
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	40001c00 	.word	0x40001c00
    16e4:	000007fc 	.word	0x000007fc
    16e8:	000014f1 	.word	0x000014f1
    16ec:	00001531 	.word	0x00001531

000016f0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    16f0:	b510      	push	{r4, lr}
    16f2:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    16f4:	2204      	movs	r2, #4
    16f6:	4082      	lsls	r2, r0
    16f8:	4809      	ldr	r0, [pc, #36]	; (1720 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    16fa:	490a      	ldr	r1, [pc, #40]	; (1724 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    16fc:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    16fe:	400b      	ands	r3, r1
    1700:	421a      	tst	r2, r3
    1702:	d1fb      	bne.n	16fc <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1704:	4b08      	ldr	r3, [pc, #32]	; (1728 <system_gclk_gen_enable+0x38>)
    1706:	4798      	blx	r3
    1708:	00a4      	lsls	r4, r4, #2
    170a:	4b05      	ldr	r3, [pc, #20]	; (1720 <system_gclk_gen_enable+0x30>)
    170c:	469c      	mov	ip, r3
    170e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1710:	6a23      	ldr	r3, [r4, #32]
    1712:	2280      	movs	r2, #128	; 0x80
    1714:	0052      	lsls	r2, r2, #1
    1716:	4313      	orrs	r3, r2
    1718:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    171a:	4b04      	ldr	r3, [pc, #16]	; (172c <system_gclk_gen_enable+0x3c>)
    171c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    171e:	bd10      	pop	{r4, pc}
    1720:	40001c00 	.word	0x40001c00
    1724:	000007fc 	.word	0x000007fc
    1728:	000014f1 	.word	0x000014f1
    172c:	00001531 	.word	0x00001531

00001730 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1732:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1734:	2204      	movs	r2, #4
    1736:	4082      	lsls	r2, r0
    1738:	4812      	ldr	r0, [pc, #72]	; (1784 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    173a:	4913      	ldr	r1, [pc, #76]	; (1788 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    173c:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    173e:	400b      	ands	r3, r1
    1740:	421a      	tst	r2, r3
    1742:	d1fb      	bne.n	173c <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1744:	4b11      	ldr	r3, [pc, #68]	; (178c <system_gclk_gen_get_hz+0x5c>)
    1746:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1748:	4f0e      	ldr	r7, [pc, #56]	; (1784 <system_gclk_gen_get_hz+0x54>)
    174a:	3408      	adds	r4, #8
    174c:	00a4      	lsls	r4, r4, #2
    174e:	59e0      	ldr	r0, [r4, r7]
    1750:	0740      	lsls	r0, r0, #29
    1752:	0f40      	lsrs	r0, r0, #29
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1754:	4b0e      	ldr	r3, [pc, #56]	; (1790 <system_gclk_gen_get_hz+0x60>)
    1756:	4798      	blx	r3
    1758:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    175a:	59e5      	ldr	r5, [r4, r7]
    175c:	04ed      	lsls	r5, r5, #19
    175e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1760:	59e4      	ldr	r4, [r4, r7]
    1762:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1764:	4b0b      	ldr	r3, [pc, #44]	; (1794 <system_gclk_gen_get_hz+0x64>)
    1766:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1768:	2d00      	cmp	r5, #0
    176a:	d107      	bne.n	177c <system_gclk_gen_get_hz+0x4c>
    176c:	2c01      	cmp	r4, #1
    176e:	d907      	bls.n	1780 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1770:	0021      	movs	r1, r4
    1772:	0030      	movs	r0, r6
    1774:	4b08      	ldr	r3, [pc, #32]	; (1798 <system_gclk_gen_get_hz+0x68>)
    1776:	4798      	blx	r3
    1778:	0006      	movs	r6, r0
    177a:	e001      	b.n	1780 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    177c:	3401      	adds	r4, #1
    177e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1780:	0030      	movs	r0, r6
    1782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1784:	40001c00 	.word	0x40001c00
    1788:	000007fc 	.word	0x000007fc
    178c:	000014f1 	.word	0x000014f1
    1790:	00001561 	.word	0x00001561
    1794:	00001531 	.word	0x00001531
    1798:	00001a75 	.word	0x00001a75

0000179c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    179c:	b510      	push	{r4, lr}
    179e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    17a0:	4b09      	ldr	r3, [pc, #36]	; (17c8 <system_gclk_chan_enable+0x2c>)
    17a2:	4798      	blx	r3
    17a4:	00a0      	lsls	r0, r4, #2
    17a6:	4b09      	ldr	r3, [pc, #36]	; (17cc <system_gclk_chan_enable+0x30>)
    17a8:	469c      	mov	ip, r3
    17aa:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    17ac:	2280      	movs	r2, #128	; 0x80
    17ae:	5881      	ldr	r1, [r0, r2]
    17b0:	2340      	movs	r3, #64	; 0x40
    17b2:	430b      	orrs	r3, r1
    17b4:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    17b6:	2180      	movs	r1, #128	; 0x80
    17b8:	3a40      	subs	r2, #64	; 0x40
    17ba:	5843      	ldr	r3, [r0, r1]
    17bc:	421a      	tst	r2, r3
    17be:	d0fc      	beq.n	17ba <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    17c0:	4b03      	ldr	r3, [pc, #12]	; (17d0 <system_gclk_chan_enable+0x34>)
    17c2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    17c4:	bd10      	pop	{r4, pc}
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	000014f1 	.word	0x000014f1
    17cc:	40001c00 	.word	0x40001c00
    17d0:	00001531 	.word	0x00001531

000017d4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    17d4:	b510      	push	{r4, lr}
    17d6:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    17d8:	4b09      	ldr	r3, [pc, #36]	; (1800 <system_gclk_chan_disable+0x2c>)
    17da:	4798      	blx	r3
    17dc:	00a0      	lsls	r0, r4, #2
    17de:	4b09      	ldr	r3, [pc, #36]	; (1804 <system_gclk_chan_disable+0x30>)
    17e0:	469c      	mov	ip, r3
    17e2:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    17e4:	2280      	movs	r2, #128	; 0x80
    17e6:	5883      	ldr	r3, [r0, r2]
    17e8:	2140      	movs	r1, #64	; 0x40
    17ea:	438b      	bics	r3, r1
    17ec:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    17ee:	3140      	adds	r1, #64	; 0x40
    17f0:	3a40      	subs	r2, #64	; 0x40
    17f2:	5843      	ldr	r3, [r0, r1]
    17f4:	421a      	tst	r2, r3
    17f6:	d1fc      	bne.n	17f2 <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    17f8:	4b03      	ldr	r3, [pc, #12]	; (1808 <system_gclk_chan_disable+0x34>)
    17fa:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    17fc:	bd10      	pop	{r4, pc}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	000014f1 	.word	0x000014f1
    1804:	40001c00 	.word	0x40001c00
    1808:	00001531 	.word	0x00001531

0000180c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    180c:	b570      	push	{r4, r5, r6, lr}
    180e:	0004      	movs	r4, r0
    1810:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1812:	4b05      	ldr	r3, [pc, #20]	; (1828 <system_gclk_chan_set_config+0x1c>)
    1814:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1816:	782b      	ldrb	r3, [r5, #0]
    1818:	220f      	movs	r2, #15
    181a:	4013      	ands	r3, r2
    181c:	3420      	adds	r4, #32
    181e:	00a4      	lsls	r4, r4, #2
    1820:	4a02      	ldr	r2, [pc, #8]	; (182c <system_gclk_chan_set_config+0x20>)
    1822:	50a3      	str	r3, [r4, r2]


}
    1824:	bd70      	pop	{r4, r5, r6, pc}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	000017d5 	.word	0x000017d5
    182c:	40001c00 	.word	0x40001c00

00001830 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1830:	b510      	push	{r4, lr}
    1832:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1834:	4b06      	ldr	r3, [pc, #24]	; (1850 <system_gclk_chan_get_hz+0x20>)
    1836:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1838:	3420      	adds	r4, #32
    183a:	00a4      	lsls	r4, r4, #2
    183c:	4b05      	ldr	r3, [pc, #20]	; (1854 <system_gclk_chan_get_hz+0x24>)
    183e:	58e4      	ldr	r4, [r4, r3]
    1840:	0724      	lsls	r4, r4, #28
    1842:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1844:	4b04      	ldr	r3, [pc, #16]	; (1858 <system_gclk_chan_get_hz+0x28>)
    1846:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1848:	0020      	movs	r0, r4
    184a:	4b04      	ldr	r3, [pc, #16]	; (185c <system_gclk_chan_get_hz+0x2c>)
    184c:	4798      	blx	r3
}
    184e:	bd10      	pop	{r4, pc}
    1850:	000014f1 	.word	0x000014f1
    1854:	40001c00 	.word	0x40001c00
    1858:	00001531 	.word	0x00001531
    185c:	00001731 	.word	0x00001731

00001860 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1860:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1862:	78d3      	ldrb	r3, [r2, #3]
    1864:	2b00      	cmp	r3, #0
    1866:	d11e      	bne.n	18a6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1868:	7813      	ldrb	r3, [r2, #0]
    186a:	2b80      	cmp	r3, #128	; 0x80
    186c:	d004      	beq.n	1878 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    186e:	061b      	lsls	r3, r3, #24
    1870:	2480      	movs	r4, #128	; 0x80
    1872:	0264      	lsls	r4, r4, #9
    1874:	4323      	orrs	r3, r4
    1876:	e000      	b.n	187a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1878:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    187a:	7854      	ldrb	r4, [r2, #1]
    187c:	2502      	movs	r5, #2
    187e:	43ac      	bics	r4, r5
    1880:	d10a      	bne.n	1898 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1882:	7894      	ldrb	r4, [r2, #2]
    1884:	2c00      	cmp	r4, #0
    1886:	d103      	bne.n	1890 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1888:	2480      	movs	r4, #128	; 0x80
    188a:	02a4      	lsls	r4, r4, #10
    188c:	4323      	orrs	r3, r4
    188e:	e002      	b.n	1896 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1890:	24c0      	movs	r4, #192	; 0xc0
    1892:	02e4      	lsls	r4, r4, #11
    1894:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1896:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1898:	7854      	ldrb	r4, [r2, #1]
    189a:	3c01      	subs	r4, #1
    189c:	2c01      	cmp	r4, #1
    189e:	d812      	bhi.n	18c6 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    18a0:	4c18      	ldr	r4, [pc, #96]	; (1904 <_system_pinmux_config+0xa4>)
    18a2:	4023      	ands	r3, r4
    18a4:	e00f      	b.n	18c6 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    18a6:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    18a8:	040b      	lsls	r3, r1, #16
    18aa:	0c1b      	lsrs	r3, r3, #16
    18ac:	24a0      	movs	r4, #160	; 0xa0
    18ae:	05e4      	lsls	r4, r4, #23
    18b0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    18b2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    18b4:	0c0b      	lsrs	r3, r1, #16
    18b6:	24d0      	movs	r4, #208	; 0xd0
    18b8:	0624      	lsls	r4, r4, #24
    18ba:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    18bc:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    18be:	78d3      	ldrb	r3, [r2, #3]
    18c0:	2b00      	cmp	r3, #0
    18c2:	d018      	beq.n	18f6 <_system_pinmux_config+0x96>
    18c4:	e01c      	b.n	1900 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    18c6:	040c      	lsls	r4, r1, #16
    18c8:	0c24      	lsrs	r4, r4, #16
    18ca:	25a0      	movs	r5, #160	; 0xa0
    18cc:	05ed      	lsls	r5, r5, #23
    18ce:	432c      	orrs	r4, r5
    18d0:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    18d2:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    18d4:	0c0c      	lsrs	r4, r1, #16
    18d6:	25d0      	movs	r5, #208	; 0xd0
    18d8:	062d      	lsls	r5, r5, #24
    18da:	432c      	orrs	r4, r5
    18dc:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    18de:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    18e0:	78d4      	ldrb	r4, [r2, #3]
    18e2:	2c00      	cmp	r4, #0
    18e4:	d10c      	bne.n	1900 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    18e6:	035b      	lsls	r3, r3, #13
    18e8:	d505      	bpl.n	18f6 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    18ea:	7893      	ldrb	r3, [r2, #2]
    18ec:	2b01      	cmp	r3, #1
    18ee:	d101      	bne.n	18f4 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    18f0:	6181      	str	r1, [r0, #24]
    18f2:	e000      	b.n	18f6 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    18f4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    18f6:	7853      	ldrb	r3, [r2, #1]
    18f8:	3b01      	subs	r3, #1
    18fa:	2b01      	cmp	r3, #1
    18fc:	d800      	bhi.n	1900 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    18fe:	6081      	str	r1, [r0, #8]
		}
	}
}
    1900:	bd30      	pop	{r4, r5, pc}
    1902:	46c0      	nop			; (mov r8, r8)
    1904:	fffbffff 	.word	0xfffbffff

00001908 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1908:	b510      	push	{r4, lr}
    190a:	0003      	movs	r3, r0
    190c:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    190e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1910:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1912:	2900      	cmp	r1, #0
    1914:	d105      	bne.n	1922 <system_pinmux_pin_set_config+0x1a>
		return &(ports[port_index]->Group[group_index]);
    1916:	0958      	lsrs	r0, r3, #5
    1918:	01c0      	lsls	r0, r0, #7
    191a:	2182      	movs	r1, #130	; 0x82
    191c:	05c9      	lsls	r1, r1, #23
    191e:	468c      	mov	ip, r1
    1920:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    1922:	211f      	movs	r1, #31
    1924:	400b      	ands	r3, r1
    1926:	391e      	subs	r1, #30
    1928:	4099      	lsls	r1, r3
    192a:	4b01      	ldr	r3, [pc, #4]	; (1930 <system_pinmux_pin_set_config+0x28>)
    192c:	4798      	blx	r3
}
    192e:	bd10      	pop	{r4, pc}
    1930:	00001861 	.word	0x00001861

00001934 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1934:	4770      	bx	lr
    1936:	46c0      	nop			; (mov r8, r8)

00001938 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1938:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    193a:	4b05      	ldr	r3, [pc, #20]	; (1950 <system_init+0x18>)
    193c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    193e:	4b05      	ldr	r3, [pc, #20]	; (1954 <system_init+0x1c>)
    1940:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1942:	4b05      	ldr	r3, [pc, #20]	; (1958 <system_init+0x20>)
    1944:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1946:	4b05      	ldr	r3, [pc, #20]	; (195c <system_init+0x24>)
    1948:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    194a:	4b05      	ldr	r3, [pc, #20]	; (1960 <system_init+0x28>)
    194c:	4798      	blx	r3
}
    194e:	bd10      	pop	{r4, pc}
    1950:	000015bd 	.word	0x000015bd
    1954:	000014ed 	.word	0x000014ed
    1958:	00001935 	.word	0x00001935
    195c:	00000301 	.word	0x00000301
    1960:	00001935 	.word	0x00001935

00001964 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1964:	e7fe      	b.n	1964 <Dummy_Handler>
    1966:	46c0      	nop			; (mov r8, r8)

00001968 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1968:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    196a:	4b1b      	ldr	r3, [pc, #108]	; (19d8 <Reset_Handler+0x70>)
    196c:	4a1b      	ldr	r2, [pc, #108]	; (19dc <Reset_Handler+0x74>)
    196e:	429a      	cmp	r2, r3
    1970:	d003      	beq.n	197a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1972:	4b1b      	ldr	r3, [pc, #108]	; (19e0 <Reset_Handler+0x78>)
    1974:	4a18      	ldr	r2, [pc, #96]	; (19d8 <Reset_Handler+0x70>)
    1976:	429a      	cmp	r2, r3
    1978:	d304      	bcc.n	1984 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    197a:	4b1a      	ldr	r3, [pc, #104]	; (19e4 <Reset_Handler+0x7c>)
    197c:	4a1a      	ldr	r2, [pc, #104]	; (19e8 <Reset_Handler+0x80>)
    197e:	429a      	cmp	r2, r3
    1980:	d310      	bcc.n	19a4 <Reset_Handler+0x3c>
    1982:	e01e      	b.n	19c2 <Reset_Handler+0x5a>
    1984:	4a19      	ldr	r2, [pc, #100]	; (19ec <Reset_Handler+0x84>)
    1986:	4b16      	ldr	r3, [pc, #88]	; (19e0 <Reset_Handler+0x78>)
    1988:	3303      	adds	r3, #3
    198a:	1a9b      	subs	r3, r3, r2
    198c:	089b      	lsrs	r3, r3, #2
    198e:	3301      	adds	r3, #1
    1990:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1992:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1994:	4810      	ldr	r0, [pc, #64]	; (19d8 <Reset_Handler+0x70>)
    1996:	4911      	ldr	r1, [pc, #68]	; (19dc <Reset_Handler+0x74>)
    1998:	588c      	ldr	r4, [r1, r2]
    199a:	5084      	str	r4, [r0, r2]
    199c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    199e:	429a      	cmp	r2, r3
    19a0:	d1fa      	bne.n	1998 <Reset_Handler+0x30>
    19a2:	e7ea      	b.n	197a <Reset_Handler+0x12>
    19a4:	4a12      	ldr	r2, [pc, #72]	; (19f0 <Reset_Handler+0x88>)
    19a6:	4b0f      	ldr	r3, [pc, #60]	; (19e4 <Reset_Handler+0x7c>)
    19a8:	3303      	adds	r3, #3
    19aa:	1a9b      	subs	r3, r3, r2
    19ac:	089b      	lsrs	r3, r3, #2
    19ae:	3301      	adds	r3, #1
    19b0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    19b2:	2200      	movs	r2, #0
                *pDest++ = 0;
    19b4:	480c      	ldr	r0, [pc, #48]	; (19e8 <Reset_Handler+0x80>)
    19b6:	2100      	movs	r1, #0
    19b8:	1814      	adds	r4, r2, r0
    19ba:	6021      	str	r1, [r4, #0]
    19bc:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    19be:	429a      	cmp	r2, r3
    19c0:	d1fa      	bne.n	19b8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    19c2:	4a0c      	ldr	r2, [pc, #48]	; (19f4 <Reset_Handler+0x8c>)
    19c4:	21ff      	movs	r1, #255	; 0xff
    19c6:	4b0c      	ldr	r3, [pc, #48]	; (19f8 <Reset_Handler+0x90>)
    19c8:	438b      	bics	r3, r1
    19ca:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    19cc:	4b0b      	ldr	r3, [pc, #44]	; (19fc <Reset_Handler+0x94>)
    19ce:	4798      	blx	r3

        /* Branch to main function */
        main();
    19d0:	4b0b      	ldr	r3, [pc, #44]	; (1a00 <Reset_Handler+0x98>)
    19d2:	4798      	blx	r3
    19d4:	e7fe      	b.n	19d4 <Reset_Handler+0x6c>
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	20000000 	.word	0x20000000
    19dc:	000024b0 	.word	0x000024b0
    19e0:	20000070 	.word	0x20000070
    19e4:	2000017c 	.word	0x2000017c
    19e8:	20000070 	.word	0x20000070
    19ec:	20000004 	.word	0x20000004
    19f0:	20000074 	.word	0x20000074
    19f4:	e000ed00 	.word	0xe000ed00
    19f8:	00000000 	.word	0x00000000
    19fc:	00001be5 	.word	0x00001be5
    1a00:	00001a41 	.word	0x00001a41

00001a04 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1a04:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1a06:	4a06      	ldr	r2, [pc, #24]	; (1a20 <_sbrk+0x1c>)
    1a08:	6812      	ldr	r2, [r2, #0]
    1a0a:	2a00      	cmp	r2, #0
    1a0c:	d102      	bne.n	1a14 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1a0e:	4905      	ldr	r1, [pc, #20]	; (1a24 <_sbrk+0x20>)
    1a10:	4a03      	ldr	r2, [pc, #12]	; (1a20 <_sbrk+0x1c>)
    1a12:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1a14:	4a02      	ldr	r2, [pc, #8]	; (1a20 <_sbrk+0x1c>)
    1a16:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a18:	18c3      	adds	r3, r0, r3
    1a1a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1a1c:	4770      	bx	lr
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	200000c4 	.word	0x200000c4
    1a24:	20002180 	.word	0x20002180

00001a28 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1a28:	2001      	movs	r0, #1
    1a2a:	4240      	negs	r0, r0
    1a2c:	4770      	bx	lr
    1a2e:	46c0      	nop			; (mov r8, r8)

00001a30 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1a30:	2380      	movs	r3, #128	; 0x80
    1a32:	019b      	lsls	r3, r3, #6
    1a34:	604b      	str	r3, [r1, #4]

	return 0;
}
    1a36:	2000      	movs	r0, #0
    1a38:	4770      	bx	lr
    1a3a:	46c0      	nop			; (mov r8, r8)

00001a3c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1a3c:	2000      	movs	r0, #0
    1a3e:	4770      	bx	lr

00001a40 <main>:
#include "Source/spi.h"
#include "Source/flash.h"


int main (void)
{
    1a40:	b510      	push	{r4, lr}
	system_init();
    1a42:	4b06      	ldr	r3, [pc, #24]	; (1a5c <main+0x1c>)
    1a44:	4798      	blx	r3
	
	/* Initialize the delay driver */
	delay_init();
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <main+0x20>)
    1a48:	4798      	blx	r3
	
	/* Initialize the USART */
	#ifdef OS_DEBUG
	/*  Init Usart */
	Configure_Usart();
    1a4a:	4b06      	ldr	r3, [pc, #24]	; (1a64 <main+0x24>)
    1a4c:	4798      	blx	r3
	#endif // DEBUG
	
	/*  Init LED  */
	Configure_Led();
    1a4e:	4b06      	ldr	r3, [pc, #24]	; (1a68 <main+0x28>)
    1a50:	4798      	blx	r3
	
	/*  Init WDT  */
	//Configure_Wdt();
	
	/*  Init SPI  */	
	Configure_Spi_Master();
    1a52:	4b06      	ldr	r3, [pc, #24]	; (1a6c <main+0x2c>)
    1a54:	4798      	blx	r3
	
	/*  Init flash  */
	Configure_Flash();
    1a56:	4b06      	ldr	r3, [pc, #24]	; (1a70 <main+0x30>)
    1a58:	4798      	blx	r3
    1a5a:	e7fe      	b.n	1a5a <main+0x1a>
    1a5c:	00001939 	.word	0x00001939
    1a60:	00000239 	.word	0x00000239
    1a64:	000013ed 	.word	0x000013ed
    1a68:	00001371 	.word	0x00001371
    1a6c:	00000169 	.word	0x00000169
    1a70:	0000011d 	.word	0x0000011d

00001a74 <__aeabi_uidiv>:
    1a74:	2200      	movs	r2, #0
    1a76:	0843      	lsrs	r3, r0, #1
    1a78:	428b      	cmp	r3, r1
    1a7a:	d374      	bcc.n	1b66 <__aeabi_uidiv+0xf2>
    1a7c:	0903      	lsrs	r3, r0, #4
    1a7e:	428b      	cmp	r3, r1
    1a80:	d35f      	bcc.n	1b42 <__aeabi_uidiv+0xce>
    1a82:	0a03      	lsrs	r3, r0, #8
    1a84:	428b      	cmp	r3, r1
    1a86:	d344      	bcc.n	1b12 <__aeabi_uidiv+0x9e>
    1a88:	0b03      	lsrs	r3, r0, #12
    1a8a:	428b      	cmp	r3, r1
    1a8c:	d328      	bcc.n	1ae0 <__aeabi_uidiv+0x6c>
    1a8e:	0c03      	lsrs	r3, r0, #16
    1a90:	428b      	cmp	r3, r1
    1a92:	d30d      	bcc.n	1ab0 <__aeabi_uidiv+0x3c>
    1a94:	22ff      	movs	r2, #255	; 0xff
    1a96:	0209      	lsls	r1, r1, #8
    1a98:	ba12      	rev	r2, r2
    1a9a:	0c03      	lsrs	r3, r0, #16
    1a9c:	428b      	cmp	r3, r1
    1a9e:	d302      	bcc.n	1aa6 <__aeabi_uidiv+0x32>
    1aa0:	1212      	asrs	r2, r2, #8
    1aa2:	0209      	lsls	r1, r1, #8
    1aa4:	d065      	beq.n	1b72 <__aeabi_uidiv+0xfe>
    1aa6:	0b03      	lsrs	r3, r0, #12
    1aa8:	428b      	cmp	r3, r1
    1aaa:	d319      	bcc.n	1ae0 <__aeabi_uidiv+0x6c>
    1aac:	e000      	b.n	1ab0 <__aeabi_uidiv+0x3c>
    1aae:	0a09      	lsrs	r1, r1, #8
    1ab0:	0bc3      	lsrs	r3, r0, #15
    1ab2:	428b      	cmp	r3, r1
    1ab4:	d301      	bcc.n	1aba <__aeabi_uidiv+0x46>
    1ab6:	03cb      	lsls	r3, r1, #15
    1ab8:	1ac0      	subs	r0, r0, r3
    1aba:	4152      	adcs	r2, r2
    1abc:	0b83      	lsrs	r3, r0, #14
    1abe:	428b      	cmp	r3, r1
    1ac0:	d301      	bcc.n	1ac6 <__aeabi_uidiv+0x52>
    1ac2:	038b      	lsls	r3, r1, #14
    1ac4:	1ac0      	subs	r0, r0, r3
    1ac6:	4152      	adcs	r2, r2
    1ac8:	0b43      	lsrs	r3, r0, #13
    1aca:	428b      	cmp	r3, r1
    1acc:	d301      	bcc.n	1ad2 <__aeabi_uidiv+0x5e>
    1ace:	034b      	lsls	r3, r1, #13
    1ad0:	1ac0      	subs	r0, r0, r3
    1ad2:	4152      	adcs	r2, r2
    1ad4:	0b03      	lsrs	r3, r0, #12
    1ad6:	428b      	cmp	r3, r1
    1ad8:	d301      	bcc.n	1ade <__aeabi_uidiv+0x6a>
    1ada:	030b      	lsls	r3, r1, #12
    1adc:	1ac0      	subs	r0, r0, r3
    1ade:	4152      	adcs	r2, r2
    1ae0:	0ac3      	lsrs	r3, r0, #11
    1ae2:	428b      	cmp	r3, r1
    1ae4:	d301      	bcc.n	1aea <__aeabi_uidiv+0x76>
    1ae6:	02cb      	lsls	r3, r1, #11
    1ae8:	1ac0      	subs	r0, r0, r3
    1aea:	4152      	adcs	r2, r2
    1aec:	0a83      	lsrs	r3, r0, #10
    1aee:	428b      	cmp	r3, r1
    1af0:	d301      	bcc.n	1af6 <__aeabi_uidiv+0x82>
    1af2:	028b      	lsls	r3, r1, #10
    1af4:	1ac0      	subs	r0, r0, r3
    1af6:	4152      	adcs	r2, r2
    1af8:	0a43      	lsrs	r3, r0, #9
    1afa:	428b      	cmp	r3, r1
    1afc:	d301      	bcc.n	1b02 <__aeabi_uidiv+0x8e>
    1afe:	024b      	lsls	r3, r1, #9
    1b00:	1ac0      	subs	r0, r0, r3
    1b02:	4152      	adcs	r2, r2
    1b04:	0a03      	lsrs	r3, r0, #8
    1b06:	428b      	cmp	r3, r1
    1b08:	d301      	bcc.n	1b0e <__aeabi_uidiv+0x9a>
    1b0a:	020b      	lsls	r3, r1, #8
    1b0c:	1ac0      	subs	r0, r0, r3
    1b0e:	4152      	adcs	r2, r2
    1b10:	d2cd      	bcs.n	1aae <__aeabi_uidiv+0x3a>
    1b12:	09c3      	lsrs	r3, r0, #7
    1b14:	428b      	cmp	r3, r1
    1b16:	d301      	bcc.n	1b1c <__aeabi_uidiv+0xa8>
    1b18:	01cb      	lsls	r3, r1, #7
    1b1a:	1ac0      	subs	r0, r0, r3
    1b1c:	4152      	adcs	r2, r2
    1b1e:	0983      	lsrs	r3, r0, #6
    1b20:	428b      	cmp	r3, r1
    1b22:	d301      	bcc.n	1b28 <__aeabi_uidiv+0xb4>
    1b24:	018b      	lsls	r3, r1, #6
    1b26:	1ac0      	subs	r0, r0, r3
    1b28:	4152      	adcs	r2, r2
    1b2a:	0943      	lsrs	r3, r0, #5
    1b2c:	428b      	cmp	r3, r1
    1b2e:	d301      	bcc.n	1b34 <__aeabi_uidiv+0xc0>
    1b30:	014b      	lsls	r3, r1, #5
    1b32:	1ac0      	subs	r0, r0, r3
    1b34:	4152      	adcs	r2, r2
    1b36:	0903      	lsrs	r3, r0, #4
    1b38:	428b      	cmp	r3, r1
    1b3a:	d301      	bcc.n	1b40 <__aeabi_uidiv+0xcc>
    1b3c:	010b      	lsls	r3, r1, #4
    1b3e:	1ac0      	subs	r0, r0, r3
    1b40:	4152      	adcs	r2, r2
    1b42:	08c3      	lsrs	r3, r0, #3
    1b44:	428b      	cmp	r3, r1
    1b46:	d301      	bcc.n	1b4c <__aeabi_uidiv+0xd8>
    1b48:	00cb      	lsls	r3, r1, #3
    1b4a:	1ac0      	subs	r0, r0, r3
    1b4c:	4152      	adcs	r2, r2
    1b4e:	0883      	lsrs	r3, r0, #2
    1b50:	428b      	cmp	r3, r1
    1b52:	d301      	bcc.n	1b58 <__aeabi_uidiv+0xe4>
    1b54:	008b      	lsls	r3, r1, #2
    1b56:	1ac0      	subs	r0, r0, r3
    1b58:	4152      	adcs	r2, r2
    1b5a:	0843      	lsrs	r3, r0, #1
    1b5c:	428b      	cmp	r3, r1
    1b5e:	d301      	bcc.n	1b64 <__aeabi_uidiv+0xf0>
    1b60:	004b      	lsls	r3, r1, #1
    1b62:	1ac0      	subs	r0, r0, r3
    1b64:	4152      	adcs	r2, r2
    1b66:	1a41      	subs	r1, r0, r1
    1b68:	d200      	bcs.n	1b6c <__aeabi_uidiv+0xf8>
    1b6a:	4601      	mov	r1, r0
    1b6c:	4152      	adcs	r2, r2
    1b6e:	4610      	mov	r0, r2
    1b70:	4770      	bx	lr
    1b72:	e7ff      	b.n	1b74 <__aeabi_uidiv+0x100>
    1b74:	b501      	push	{r0, lr}
    1b76:	2000      	movs	r0, #0
    1b78:	f000 f806 	bl	1b88 <__aeabi_idiv0>
    1b7c:	bd02      	pop	{r1, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)

00001b80 <__aeabi_uidivmod>:
    1b80:	2900      	cmp	r1, #0
    1b82:	d0f7      	beq.n	1b74 <__aeabi_uidiv+0x100>
    1b84:	e776      	b.n	1a74 <__aeabi_uidiv>
    1b86:	4770      	bx	lr

00001b88 <__aeabi_idiv0>:
    1b88:	4770      	bx	lr
    1b8a:	46c0      	nop			; (mov r8, r8)

00001b8c <__aeabi_lmul>:
    1b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b8e:	464f      	mov	r7, r9
    1b90:	4646      	mov	r6, r8
    1b92:	b4c0      	push	{r6, r7}
    1b94:	0416      	lsls	r6, r2, #16
    1b96:	0c36      	lsrs	r6, r6, #16
    1b98:	4699      	mov	r9, r3
    1b9a:	0033      	movs	r3, r6
    1b9c:	0405      	lsls	r5, r0, #16
    1b9e:	0c2c      	lsrs	r4, r5, #16
    1ba0:	0c07      	lsrs	r7, r0, #16
    1ba2:	0c15      	lsrs	r5, r2, #16
    1ba4:	4363      	muls	r3, r4
    1ba6:	437e      	muls	r6, r7
    1ba8:	436f      	muls	r7, r5
    1baa:	4365      	muls	r5, r4
    1bac:	0c1c      	lsrs	r4, r3, #16
    1bae:	19ad      	adds	r5, r5, r6
    1bb0:	1964      	adds	r4, r4, r5
    1bb2:	469c      	mov	ip, r3
    1bb4:	42a6      	cmp	r6, r4
    1bb6:	d903      	bls.n	1bc0 <__aeabi_lmul+0x34>
    1bb8:	2380      	movs	r3, #128	; 0x80
    1bba:	025b      	lsls	r3, r3, #9
    1bbc:	4698      	mov	r8, r3
    1bbe:	4447      	add	r7, r8
    1bc0:	4663      	mov	r3, ip
    1bc2:	0c25      	lsrs	r5, r4, #16
    1bc4:	19ef      	adds	r7, r5, r7
    1bc6:	041d      	lsls	r5, r3, #16
    1bc8:	464b      	mov	r3, r9
    1bca:	434a      	muls	r2, r1
    1bcc:	4343      	muls	r3, r0
    1bce:	0c2d      	lsrs	r5, r5, #16
    1bd0:	0424      	lsls	r4, r4, #16
    1bd2:	1964      	adds	r4, r4, r5
    1bd4:	1899      	adds	r1, r3, r2
    1bd6:	19c9      	adds	r1, r1, r7
    1bd8:	0020      	movs	r0, r4
    1bda:	bc0c      	pop	{r2, r3}
    1bdc:	4690      	mov	r8, r2
    1bde:	4699      	mov	r9, r3
    1be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1be2:	46c0      	nop			; (mov r8, r8)

00001be4 <__libc_init_array>:
    1be4:	4b0e      	ldr	r3, [pc, #56]	; (1c20 <__libc_init_array+0x3c>)
    1be6:	b570      	push	{r4, r5, r6, lr}
    1be8:	2500      	movs	r5, #0
    1bea:	001e      	movs	r6, r3
    1bec:	4c0d      	ldr	r4, [pc, #52]	; (1c24 <__libc_init_array+0x40>)
    1bee:	1ae4      	subs	r4, r4, r3
    1bf0:	10a4      	asrs	r4, r4, #2
    1bf2:	42a5      	cmp	r5, r4
    1bf4:	d004      	beq.n	1c00 <__libc_init_array+0x1c>
    1bf6:	00ab      	lsls	r3, r5, #2
    1bf8:	58f3      	ldr	r3, [r6, r3]
    1bfa:	4798      	blx	r3
    1bfc:	3501      	adds	r5, #1
    1bfe:	e7f8      	b.n	1bf2 <__libc_init_array+0xe>
    1c00:	f000 fc46 	bl	2490 <_init>
    1c04:	4b08      	ldr	r3, [pc, #32]	; (1c28 <__libc_init_array+0x44>)
    1c06:	2500      	movs	r5, #0
    1c08:	001e      	movs	r6, r3
    1c0a:	4c08      	ldr	r4, [pc, #32]	; (1c2c <__libc_init_array+0x48>)
    1c0c:	1ae4      	subs	r4, r4, r3
    1c0e:	10a4      	asrs	r4, r4, #2
    1c10:	42a5      	cmp	r5, r4
    1c12:	d004      	beq.n	1c1e <__libc_init_array+0x3a>
    1c14:	00ab      	lsls	r3, r5, #2
    1c16:	58f3      	ldr	r3, [r6, r3]
    1c18:	4798      	blx	r3
    1c1a:	3501      	adds	r5, #1
    1c1c:	e7f8      	b.n	1c10 <__libc_init_array+0x2c>
    1c1e:	bd70      	pop	{r4, r5, r6, pc}
    1c20:	0000249c 	.word	0x0000249c
    1c24:	0000249c 	.word	0x0000249c
    1c28:	0000249c 	.word	0x0000249c
    1c2c:	000024a0 	.word	0x000024a0

00001c30 <memcpy>:
    1c30:	2300      	movs	r3, #0
    1c32:	b510      	push	{r4, lr}
    1c34:	429a      	cmp	r2, r3
    1c36:	d003      	beq.n	1c40 <memcpy+0x10>
    1c38:	5ccc      	ldrb	r4, [r1, r3]
    1c3a:	54c4      	strb	r4, [r0, r3]
    1c3c:	3301      	adds	r3, #1
    1c3e:	e7f9      	b.n	1c34 <memcpy+0x4>
    1c40:	bd10      	pop	{r4, pc}

00001c42 <memset>:
    1c42:	0003      	movs	r3, r0
    1c44:	1882      	adds	r2, r0, r2
    1c46:	4293      	cmp	r3, r2
    1c48:	d002      	beq.n	1c50 <memset+0xe>
    1c4a:	7019      	strb	r1, [r3, #0]
    1c4c:	3301      	adds	r3, #1
    1c4e:	e7fa      	b.n	1c46 <memset+0x4>
    1c50:	4770      	bx	lr

00001c52 <setbuf>:
    1c52:	424a      	negs	r2, r1
    1c54:	414a      	adcs	r2, r1
    1c56:	2380      	movs	r3, #128	; 0x80
    1c58:	b510      	push	{r4, lr}
    1c5a:	0052      	lsls	r2, r2, #1
    1c5c:	00db      	lsls	r3, r3, #3
    1c5e:	f000 f801 	bl	1c64 <setvbuf>
    1c62:	bd10      	pop	{r4, pc}

00001c64 <setvbuf>:
    1c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c66:	001d      	movs	r5, r3
    1c68:	4b51      	ldr	r3, [pc, #324]	; (1db0 <setvbuf+0x14c>)
    1c6a:	b085      	sub	sp, #20
    1c6c:	681e      	ldr	r6, [r3, #0]
    1c6e:	0004      	movs	r4, r0
    1c70:	000f      	movs	r7, r1
    1c72:	9200      	str	r2, [sp, #0]
    1c74:	2e00      	cmp	r6, #0
    1c76:	d005      	beq.n	1c84 <setvbuf+0x20>
    1c78:	69b3      	ldr	r3, [r6, #24]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d102      	bne.n	1c84 <setvbuf+0x20>
    1c7e:	0030      	movs	r0, r6
    1c80:	f000 f994 	bl	1fac <__sinit>
    1c84:	4b4b      	ldr	r3, [pc, #300]	; (1db4 <setvbuf+0x150>)
    1c86:	429c      	cmp	r4, r3
    1c88:	d101      	bne.n	1c8e <setvbuf+0x2a>
    1c8a:	6874      	ldr	r4, [r6, #4]
    1c8c:	e008      	b.n	1ca0 <setvbuf+0x3c>
    1c8e:	4b4a      	ldr	r3, [pc, #296]	; (1db8 <setvbuf+0x154>)
    1c90:	429c      	cmp	r4, r3
    1c92:	d101      	bne.n	1c98 <setvbuf+0x34>
    1c94:	68b4      	ldr	r4, [r6, #8]
    1c96:	e003      	b.n	1ca0 <setvbuf+0x3c>
    1c98:	4b48      	ldr	r3, [pc, #288]	; (1dbc <setvbuf+0x158>)
    1c9a:	429c      	cmp	r4, r3
    1c9c:	d100      	bne.n	1ca0 <setvbuf+0x3c>
    1c9e:	68f4      	ldr	r4, [r6, #12]
    1ca0:	9b00      	ldr	r3, [sp, #0]
    1ca2:	2b02      	cmp	r3, #2
    1ca4:	d005      	beq.n	1cb2 <setvbuf+0x4e>
    1ca6:	2b01      	cmp	r3, #1
    1ca8:	d900      	bls.n	1cac <setvbuf+0x48>
    1caa:	e07c      	b.n	1da6 <setvbuf+0x142>
    1cac:	2d00      	cmp	r5, #0
    1cae:	da00      	bge.n	1cb2 <setvbuf+0x4e>
    1cb0:	e079      	b.n	1da6 <setvbuf+0x142>
    1cb2:	0021      	movs	r1, r4
    1cb4:	0030      	movs	r0, r6
    1cb6:	f000 f90b 	bl	1ed0 <_fflush_r>
    1cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1cbc:	2900      	cmp	r1, #0
    1cbe:	d008      	beq.n	1cd2 <setvbuf+0x6e>
    1cc0:	0023      	movs	r3, r4
    1cc2:	3344      	adds	r3, #68	; 0x44
    1cc4:	4299      	cmp	r1, r3
    1cc6:	d002      	beq.n	1cce <setvbuf+0x6a>
    1cc8:	0030      	movs	r0, r6
    1cca:	f000 fa33 	bl	2134 <_free_r>
    1cce:	2300      	movs	r3, #0
    1cd0:	6363      	str	r3, [r4, #52]	; 0x34
    1cd2:	2300      	movs	r3, #0
    1cd4:	61a3      	str	r3, [r4, #24]
    1cd6:	6063      	str	r3, [r4, #4]
    1cd8:	89a3      	ldrh	r3, [r4, #12]
    1cda:	061b      	lsls	r3, r3, #24
    1cdc:	d503      	bpl.n	1ce6 <setvbuf+0x82>
    1cde:	6921      	ldr	r1, [r4, #16]
    1ce0:	0030      	movs	r0, r6
    1ce2:	f000 fa27 	bl	2134 <_free_r>
    1ce6:	89a2      	ldrh	r2, [r4, #12]
    1ce8:	4b35      	ldr	r3, [pc, #212]	; (1dc0 <setvbuf+0x15c>)
    1cea:	4013      	ands	r3, r2
    1cec:	81a3      	strh	r3, [r4, #12]
    1cee:	9b00      	ldr	r3, [sp, #0]
    1cf0:	2b02      	cmp	r3, #2
    1cf2:	d021      	beq.n	1d38 <setvbuf+0xd4>
    1cf4:	ab03      	add	r3, sp, #12
    1cf6:	aa02      	add	r2, sp, #8
    1cf8:	0021      	movs	r1, r4
    1cfa:	0030      	movs	r0, r6
    1cfc:	f000 f9ea 	bl	20d4 <__swhatbuf_r>
    1d00:	89a3      	ldrh	r3, [r4, #12]
    1d02:	4318      	orrs	r0, r3
    1d04:	81a0      	strh	r0, [r4, #12]
    1d06:	2d00      	cmp	r5, #0
    1d08:	d101      	bne.n	1d0e <setvbuf+0xaa>
    1d0a:	9d02      	ldr	r5, [sp, #8]
    1d0c:	e001      	b.n	1d12 <setvbuf+0xae>
    1d0e:	2f00      	cmp	r7, #0
    1d10:	d125      	bne.n	1d5e <setvbuf+0xfa>
    1d12:	0028      	movs	r0, r5
    1d14:	f000 fa04 	bl	2120 <malloc>
    1d18:	9501      	str	r5, [sp, #4]
    1d1a:	1e07      	subs	r7, r0, #0
    1d1c:	d11a      	bne.n	1d54 <setvbuf+0xf0>
    1d1e:	9b02      	ldr	r3, [sp, #8]
    1d20:	9301      	str	r3, [sp, #4]
    1d22:	42ab      	cmp	r3, r5
    1d24:	d102      	bne.n	1d2c <setvbuf+0xc8>
    1d26:	2001      	movs	r0, #1
    1d28:	4240      	negs	r0, r0
    1d2a:	e006      	b.n	1d3a <setvbuf+0xd6>
    1d2c:	9801      	ldr	r0, [sp, #4]
    1d2e:	f000 f9f7 	bl	2120 <malloc>
    1d32:	1e07      	subs	r7, r0, #0
    1d34:	d10e      	bne.n	1d54 <setvbuf+0xf0>
    1d36:	e7f6      	b.n	1d26 <setvbuf+0xc2>
    1d38:	2000      	movs	r0, #0
    1d3a:	2202      	movs	r2, #2
    1d3c:	89a3      	ldrh	r3, [r4, #12]
    1d3e:	4313      	orrs	r3, r2
    1d40:	81a3      	strh	r3, [r4, #12]
    1d42:	2300      	movs	r3, #0
    1d44:	60a3      	str	r3, [r4, #8]
    1d46:	0023      	movs	r3, r4
    1d48:	3347      	adds	r3, #71	; 0x47
    1d4a:	6023      	str	r3, [r4, #0]
    1d4c:	6123      	str	r3, [r4, #16]
    1d4e:	2301      	movs	r3, #1
    1d50:	6163      	str	r3, [r4, #20]
    1d52:	e02a      	b.n	1daa <setvbuf+0x146>
    1d54:	2280      	movs	r2, #128	; 0x80
    1d56:	89a3      	ldrh	r3, [r4, #12]
    1d58:	9d01      	ldr	r5, [sp, #4]
    1d5a:	4313      	orrs	r3, r2
    1d5c:	81a3      	strh	r3, [r4, #12]
    1d5e:	69b3      	ldr	r3, [r6, #24]
    1d60:	2b00      	cmp	r3, #0
    1d62:	d102      	bne.n	1d6a <setvbuf+0x106>
    1d64:	0030      	movs	r0, r6
    1d66:	f000 f921 	bl	1fac <__sinit>
    1d6a:	9b00      	ldr	r3, [sp, #0]
    1d6c:	2b01      	cmp	r3, #1
    1d6e:	d103      	bne.n	1d78 <setvbuf+0x114>
    1d70:	89a3      	ldrh	r3, [r4, #12]
    1d72:	9a00      	ldr	r2, [sp, #0]
    1d74:	431a      	orrs	r2, r3
    1d76:	81a2      	strh	r2, [r4, #12]
    1d78:	2308      	movs	r3, #8
    1d7a:	89a2      	ldrh	r2, [r4, #12]
    1d7c:	6027      	str	r7, [r4, #0]
    1d7e:	4013      	ands	r3, r2
    1d80:	6127      	str	r7, [r4, #16]
    1d82:	6165      	str	r5, [r4, #20]
    1d84:	1e18      	subs	r0, r3, #0
    1d86:	d00c      	beq.n	1da2 <setvbuf+0x13e>
    1d88:	2301      	movs	r3, #1
    1d8a:	401a      	ands	r2, r3
    1d8c:	2300      	movs	r3, #0
    1d8e:	1e10      	subs	r0, r2, #0
    1d90:	4298      	cmp	r0, r3
    1d92:	d004      	beq.n	1d9e <setvbuf+0x13a>
    1d94:	426d      	negs	r5, r5
    1d96:	60a3      	str	r3, [r4, #8]
    1d98:	61a5      	str	r5, [r4, #24]
    1d9a:	0018      	movs	r0, r3
    1d9c:	e005      	b.n	1daa <setvbuf+0x146>
    1d9e:	60a5      	str	r5, [r4, #8]
    1da0:	e003      	b.n	1daa <setvbuf+0x146>
    1da2:	60a3      	str	r3, [r4, #8]
    1da4:	e001      	b.n	1daa <setvbuf+0x146>
    1da6:	2001      	movs	r0, #1
    1da8:	4240      	negs	r0, r0
    1daa:	b005      	add	sp, #20
    1dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	2000006c 	.word	0x2000006c
    1db4:	00002430 	.word	0x00002430
    1db8:	00002450 	.word	0x00002450
    1dbc:	00002470 	.word	0x00002470
    1dc0:	fffff35c 	.word	0xfffff35c

00001dc4 <__sflush_r>:
    1dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1dc6:	898a      	ldrh	r2, [r1, #12]
    1dc8:	0005      	movs	r5, r0
    1dca:	000c      	movs	r4, r1
    1dcc:	0713      	lsls	r3, r2, #28
    1dce:	d45a      	bmi.n	1e86 <__sflush_r+0xc2>
    1dd0:	684b      	ldr	r3, [r1, #4]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	dc02      	bgt.n	1ddc <__sflush_r+0x18>
    1dd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1dd8:	2b00      	cmp	r3, #0
    1dda:	dd19      	ble.n	1e10 <__sflush_r+0x4c>
    1ddc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1dde:	2f00      	cmp	r7, #0
    1de0:	d016      	beq.n	1e10 <__sflush_r+0x4c>
    1de2:	2300      	movs	r3, #0
    1de4:	682e      	ldr	r6, [r5, #0]
    1de6:	602b      	str	r3, [r5, #0]
    1de8:	2380      	movs	r3, #128	; 0x80
    1dea:	015b      	lsls	r3, r3, #5
    1dec:	401a      	ands	r2, r3
    1dee:	d001      	beq.n	1df4 <__sflush_r+0x30>
    1df0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1df2:	e014      	b.n	1e1e <__sflush_r+0x5a>
    1df4:	2301      	movs	r3, #1
    1df6:	6a21      	ldr	r1, [r4, #32]
    1df8:	0028      	movs	r0, r5
    1dfa:	47b8      	blx	r7
    1dfc:	1c43      	adds	r3, r0, #1
    1dfe:	d10e      	bne.n	1e1e <__sflush_r+0x5a>
    1e00:	682b      	ldr	r3, [r5, #0]
    1e02:	2b00      	cmp	r3, #0
    1e04:	d00b      	beq.n	1e1e <__sflush_r+0x5a>
    1e06:	2b1d      	cmp	r3, #29
    1e08:	d001      	beq.n	1e0e <__sflush_r+0x4a>
    1e0a:	2b16      	cmp	r3, #22
    1e0c:	d102      	bne.n	1e14 <__sflush_r+0x50>
    1e0e:	602e      	str	r6, [r5, #0]
    1e10:	2000      	movs	r0, #0
    1e12:	e05a      	b.n	1eca <__sflush_r+0x106>
    1e14:	2240      	movs	r2, #64	; 0x40
    1e16:	89a3      	ldrh	r3, [r4, #12]
    1e18:	4313      	orrs	r3, r2
    1e1a:	81a3      	strh	r3, [r4, #12]
    1e1c:	e055      	b.n	1eca <__sflush_r+0x106>
    1e1e:	89a3      	ldrh	r3, [r4, #12]
    1e20:	075b      	lsls	r3, r3, #29
    1e22:	d506      	bpl.n	1e32 <__sflush_r+0x6e>
    1e24:	6863      	ldr	r3, [r4, #4]
    1e26:	1ac0      	subs	r0, r0, r3
    1e28:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d001      	beq.n	1e32 <__sflush_r+0x6e>
    1e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1e30:	1ac0      	subs	r0, r0, r3
    1e32:	2300      	movs	r3, #0
    1e34:	0002      	movs	r2, r0
    1e36:	6a21      	ldr	r1, [r4, #32]
    1e38:	0028      	movs	r0, r5
    1e3a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1e3c:	47b8      	blx	r7
    1e3e:	89a3      	ldrh	r3, [r4, #12]
    1e40:	1c42      	adds	r2, r0, #1
    1e42:	d106      	bne.n	1e52 <__sflush_r+0x8e>
    1e44:	6829      	ldr	r1, [r5, #0]
    1e46:	291d      	cmp	r1, #29
    1e48:	d83a      	bhi.n	1ec0 <__sflush_r+0xfc>
    1e4a:	4a20      	ldr	r2, [pc, #128]	; (1ecc <__sflush_r+0x108>)
    1e4c:	40ca      	lsrs	r2, r1
    1e4e:	07d2      	lsls	r2, r2, #31
    1e50:	d536      	bpl.n	1ec0 <__sflush_r+0xfc>
    1e52:	2200      	movs	r2, #0
    1e54:	6062      	str	r2, [r4, #4]
    1e56:	6922      	ldr	r2, [r4, #16]
    1e58:	6022      	str	r2, [r4, #0]
    1e5a:	04db      	lsls	r3, r3, #19
    1e5c:	d505      	bpl.n	1e6a <__sflush_r+0xa6>
    1e5e:	1c43      	adds	r3, r0, #1
    1e60:	d102      	bne.n	1e68 <__sflush_r+0xa4>
    1e62:	682b      	ldr	r3, [r5, #0]
    1e64:	2b00      	cmp	r3, #0
    1e66:	d100      	bne.n	1e6a <__sflush_r+0xa6>
    1e68:	6560      	str	r0, [r4, #84]	; 0x54
    1e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1e6c:	602e      	str	r6, [r5, #0]
    1e6e:	2900      	cmp	r1, #0
    1e70:	d0ce      	beq.n	1e10 <__sflush_r+0x4c>
    1e72:	0023      	movs	r3, r4
    1e74:	3344      	adds	r3, #68	; 0x44
    1e76:	4299      	cmp	r1, r3
    1e78:	d002      	beq.n	1e80 <__sflush_r+0xbc>
    1e7a:	0028      	movs	r0, r5
    1e7c:	f000 f95a 	bl	2134 <_free_r>
    1e80:	2000      	movs	r0, #0
    1e82:	6360      	str	r0, [r4, #52]	; 0x34
    1e84:	e021      	b.n	1eca <__sflush_r+0x106>
    1e86:	690f      	ldr	r7, [r1, #16]
    1e88:	2f00      	cmp	r7, #0
    1e8a:	d0c1      	beq.n	1e10 <__sflush_r+0x4c>
    1e8c:	680b      	ldr	r3, [r1, #0]
    1e8e:	600f      	str	r7, [r1, #0]
    1e90:	1bdb      	subs	r3, r3, r7
    1e92:	9301      	str	r3, [sp, #4]
    1e94:	2300      	movs	r3, #0
    1e96:	0792      	lsls	r2, r2, #30
    1e98:	d100      	bne.n	1e9c <__sflush_r+0xd8>
    1e9a:	694b      	ldr	r3, [r1, #20]
    1e9c:	60a3      	str	r3, [r4, #8]
    1e9e:	e003      	b.n	1ea8 <__sflush_r+0xe4>
    1ea0:	9b01      	ldr	r3, [sp, #4]
    1ea2:	183f      	adds	r7, r7, r0
    1ea4:	1a1b      	subs	r3, r3, r0
    1ea6:	9301      	str	r3, [sp, #4]
    1ea8:	9b01      	ldr	r3, [sp, #4]
    1eaa:	2b00      	cmp	r3, #0
    1eac:	ddb0      	ble.n	1e10 <__sflush_r+0x4c>
    1eae:	9b01      	ldr	r3, [sp, #4]
    1eb0:	003a      	movs	r2, r7
    1eb2:	6a21      	ldr	r1, [r4, #32]
    1eb4:	0028      	movs	r0, r5
    1eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1eb8:	47b0      	blx	r6
    1eba:	2800      	cmp	r0, #0
    1ebc:	dcf0      	bgt.n	1ea0 <__sflush_r+0xdc>
    1ebe:	89a3      	ldrh	r3, [r4, #12]
    1ec0:	2240      	movs	r2, #64	; 0x40
    1ec2:	2001      	movs	r0, #1
    1ec4:	4313      	orrs	r3, r2
    1ec6:	81a3      	strh	r3, [r4, #12]
    1ec8:	4240      	negs	r0, r0
    1eca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1ecc:	20400001 	.word	0x20400001

00001ed0 <_fflush_r>:
    1ed0:	690b      	ldr	r3, [r1, #16]
    1ed2:	b570      	push	{r4, r5, r6, lr}
    1ed4:	0005      	movs	r5, r0
    1ed6:	000c      	movs	r4, r1
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d101      	bne.n	1ee0 <_fflush_r+0x10>
    1edc:	2000      	movs	r0, #0
    1ede:	e01c      	b.n	1f1a <_fflush_r+0x4a>
    1ee0:	2800      	cmp	r0, #0
    1ee2:	d004      	beq.n	1eee <_fflush_r+0x1e>
    1ee4:	6983      	ldr	r3, [r0, #24]
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d101      	bne.n	1eee <_fflush_r+0x1e>
    1eea:	f000 f85f 	bl	1fac <__sinit>
    1eee:	4b0b      	ldr	r3, [pc, #44]	; (1f1c <_fflush_r+0x4c>)
    1ef0:	429c      	cmp	r4, r3
    1ef2:	d101      	bne.n	1ef8 <_fflush_r+0x28>
    1ef4:	686c      	ldr	r4, [r5, #4]
    1ef6:	e008      	b.n	1f0a <_fflush_r+0x3a>
    1ef8:	4b09      	ldr	r3, [pc, #36]	; (1f20 <_fflush_r+0x50>)
    1efa:	429c      	cmp	r4, r3
    1efc:	d101      	bne.n	1f02 <_fflush_r+0x32>
    1efe:	68ac      	ldr	r4, [r5, #8]
    1f00:	e003      	b.n	1f0a <_fflush_r+0x3a>
    1f02:	4b08      	ldr	r3, [pc, #32]	; (1f24 <_fflush_r+0x54>)
    1f04:	429c      	cmp	r4, r3
    1f06:	d100      	bne.n	1f0a <_fflush_r+0x3a>
    1f08:	68ec      	ldr	r4, [r5, #12]
    1f0a:	220c      	movs	r2, #12
    1f0c:	5ea3      	ldrsh	r3, [r4, r2]
    1f0e:	2b00      	cmp	r3, #0
    1f10:	d0e4      	beq.n	1edc <_fflush_r+0xc>
    1f12:	0021      	movs	r1, r4
    1f14:	0028      	movs	r0, r5
    1f16:	f7ff ff55 	bl	1dc4 <__sflush_r>
    1f1a:	bd70      	pop	{r4, r5, r6, pc}
    1f1c:	00002430 	.word	0x00002430
    1f20:	00002450 	.word	0x00002450
    1f24:	00002470 	.word	0x00002470

00001f28 <_cleanup_r>:
    1f28:	b510      	push	{r4, lr}
    1f2a:	4902      	ldr	r1, [pc, #8]	; (1f34 <_cleanup_r+0xc>)
    1f2c:	f000 f8b0 	bl	2090 <_fwalk_reent>
    1f30:	bd10      	pop	{r4, pc}
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	00001ed1 	.word	0x00001ed1

00001f38 <std.isra.0>:
    1f38:	2300      	movs	r3, #0
    1f3a:	b510      	push	{r4, lr}
    1f3c:	0004      	movs	r4, r0
    1f3e:	6003      	str	r3, [r0, #0]
    1f40:	6043      	str	r3, [r0, #4]
    1f42:	6083      	str	r3, [r0, #8]
    1f44:	8181      	strh	r1, [r0, #12]
    1f46:	6643      	str	r3, [r0, #100]	; 0x64
    1f48:	81c2      	strh	r2, [r0, #14]
    1f4a:	6103      	str	r3, [r0, #16]
    1f4c:	6143      	str	r3, [r0, #20]
    1f4e:	6183      	str	r3, [r0, #24]
    1f50:	0019      	movs	r1, r3
    1f52:	2208      	movs	r2, #8
    1f54:	305c      	adds	r0, #92	; 0x5c
    1f56:	f7ff fe74 	bl	1c42 <memset>
    1f5a:	4b05      	ldr	r3, [pc, #20]	; (1f70 <std.isra.0+0x38>)
    1f5c:	6224      	str	r4, [r4, #32]
    1f5e:	6263      	str	r3, [r4, #36]	; 0x24
    1f60:	4b04      	ldr	r3, [pc, #16]	; (1f74 <std.isra.0+0x3c>)
    1f62:	62a3      	str	r3, [r4, #40]	; 0x28
    1f64:	4b04      	ldr	r3, [pc, #16]	; (1f78 <std.isra.0+0x40>)
    1f66:	62e3      	str	r3, [r4, #44]	; 0x2c
    1f68:	4b04      	ldr	r3, [pc, #16]	; (1f7c <std.isra.0+0x44>)
    1f6a:	6323      	str	r3, [r4, #48]	; 0x30
    1f6c:	bd10      	pop	{r4, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	00002291 	.word	0x00002291
    1f74:	000022b9 	.word	0x000022b9
    1f78:	000022f1 	.word	0x000022f1
    1f7c:	0000231d 	.word	0x0000231d

00001f80 <__sfmoreglue>:
    1f80:	b570      	push	{r4, r5, r6, lr}
    1f82:	2568      	movs	r5, #104	; 0x68
    1f84:	1e4b      	subs	r3, r1, #1
    1f86:	435d      	muls	r5, r3
    1f88:	000e      	movs	r6, r1
    1f8a:	0029      	movs	r1, r5
    1f8c:	3174      	adds	r1, #116	; 0x74
    1f8e:	f000 f917 	bl	21c0 <_malloc_r>
    1f92:	1e04      	subs	r4, r0, #0
    1f94:	d008      	beq.n	1fa8 <__sfmoreglue+0x28>
    1f96:	2100      	movs	r1, #0
    1f98:	002a      	movs	r2, r5
    1f9a:	6001      	str	r1, [r0, #0]
    1f9c:	6046      	str	r6, [r0, #4]
    1f9e:	300c      	adds	r0, #12
    1fa0:	60a0      	str	r0, [r4, #8]
    1fa2:	3268      	adds	r2, #104	; 0x68
    1fa4:	f7ff fe4d 	bl	1c42 <memset>
    1fa8:	0020      	movs	r0, r4
    1faa:	bd70      	pop	{r4, r5, r6, pc}

00001fac <__sinit>:
    1fac:	6983      	ldr	r3, [r0, #24]
    1fae:	b513      	push	{r0, r1, r4, lr}
    1fb0:	0004      	movs	r4, r0
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d128      	bne.n	2008 <STACK_SIZE+0x8>
    1fb6:	6483      	str	r3, [r0, #72]	; 0x48
    1fb8:	64c3      	str	r3, [r0, #76]	; 0x4c
    1fba:	6503      	str	r3, [r0, #80]	; 0x50
    1fbc:	4b13      	ldr	r3, [pc, #76]	; (200c <STACK_SIZE+0xc>)
    1fbe:	4a14      	ldr	r2, [pc, #80]	; (2010 <STACK_SIZE+0x10>)
    1fc0:	681b      	ldr	r3, [r3, #0]
    1fc2:	6282      	str	r2, [r0, #40]	; 0x28
    1fc4:	9301      	str	r3, [sp, #4]
    1fc6:	4298      	cmp	r0, r3
    1fc8:	d101      	bne.n	1fce <__sinit+0x22>
    1fca:	2301      	movs	r3, #1
    1fcc:	6183      	str	r3, [r0, #24]
    1fce:	0020      	movs	r0, r4
    1fd0:	f000 f820 	bl	2014 <__sfp>
    1fd4:	6060      	str	r0, [r4, #4]
    1fd6:	0020      	movs	r0, r4
    1fd8:	f000 f81c 	bl	2014 <__sfp>
    1fdc:	60a0      	str	r0, [r4, #8]
    1fde:	0020      	movs	r0, r4
    1fe0:	f000 f818 	bl	2014 <__sfp>
    1fe4:	2200      	movs	r2, #0
    1fe6:	60e0      	str	r0, [r4, #12]
    1fe8:	2104      	movs	r1, #4
    1fea:	6860      	ldr	r0, [r4, #4]
    1fec:	f7ff ffa4 	bl	1f38 <std.isra.0>
    1ff0:	2201      	movs	r2, #1
    1ff2:	2109      	movs	r1, #9
    1ff4:	68a0      	ldr	r0, [r4, #8]
    1ff6:	f7ff ff9f 	bl	1f38 <std.isra.0>
    1ffa:	2202      	movs	r2, #2
    1ffc:	2112      	movs	r1, #18
    1ffe:	68e0      	ldr	r0, [r4, #12]
    2000:	f7ff ff9a 	bl	1f38 <std.isra.0>
    2004:	2301      	movs	r3, #1
    2006:	61a3      	str	r3, [r4, #24]
    2008:	bd13      	pop	{r0, r1, r4, pc}
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	0000242c 	.word	0x0000242c
    2010:	00001f29 	.word	0x00001f29

00002014 <__sfp>:
    2014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2016:	4b1d      	ldr	r3, [pc, #116]	; (208c <__sfp+0x78>)
    2018:	0006      	movs	r6, r0
    201a:	681d      	ldr	r5, [r3, #0]
    201c:	69ab      	ldr	r3, [r5, #24]
    201e:	2b00      	cmp	r3, #0
    2020:	d102      	bne.n	2028 <__sfp+0x14>
    2022:	0028      	movs	r0, r5
    2024:	f7ff ffc2 	bl	1fac <__sinit>
    2028:	3548      	adds	r5, #72	; 0x48
    202a:	68ac      	ldr	r4, [r5, #8]
    202c:	686b      	ldr	r3, [r5, #4]
    202e:	3b01      	subs	r3, #1
    2030:	d405      	bmi.n	203e <__sfp+0x2a>
    2032:	220c      	movs	r2, #12
    2034:	5ea7      	ldrsh	r7, [r4, r2]
    2036:	2f00      	cmp	r7, #0
    2038:	d010      	beq.n	205c <__sfp+0x48>
    203a:	3468      	adds	r4, #104	; 0x68
    203c:	e7f7      	b.n	202e <__sfp+0x1a>
    203e:	682b      	ldr	r3, [r5, #0]
    2040:	2b00      	cmp	r3, #0
    2042:	d001      	beq.n	2048 <__sfp+0x34>
    2044:	682d      	ldr	r5, [r5, #0]
    2046:	e7f0      	b.n	202a <__sfp+0x16>
    2048:	2104      	movs	r1, #4
    204a:	0030      	movs	r0, r6
    204c:	f7ff ff98 	bl	1f80 <__sfmoreglue>
    2050:	6028      	str	r0, [r5, #0]
    2052:	2800      	cmp	r0, #0
    2054:	d1f6      	bne.n	2044 <__sfp+0x30>
    2056:	230c      	movs	r3, #12
    2058:	6033      	str	r3, [r6, #0]
    205a:	e016      	b.n	208a <__sfp+0x76>
    205c:	2301      	movs	r3, #1
    205e:	0020      	movs	r0, r4
    2060:	425b      	negs	r3, r3
    2062:	81e3      	strh	r3, [r4, #14]
    2064:	3302      	adds	r3, #2
    2066:	81a3      	strh	r3, [r4, #12]
    2068:	6667      	str	r7, [r4, #100]	; 0x64
    206a:	6027      	str	r7, [r4, #0]
    206c:	60a7      	str	r7, [r4, #8]
    206e:	6067      	str	r7, [r4, #4]
    2070:	6127      	str	r7, [r4, #16]
    2072:	6167      	str	r7, [r4, #20]
    2074:	61a7      	str	r7, [r4, #24]
    2076:	305c      	adds	r0, #92	; 0x5c
    2078:	2208      	movs	r2, #8
    207a:	0039      	movs	r1, r7
    207c:	f7ff fde1 	bl	1c42 <memset>
    2080:	0020      	movs	r0, r4
    2082:	6367      	str	r7, [r4, #52]	; 0x34
    2084:	63a7      	str	r7, [r4, #56]	; 0x38
    2086:	64a7      	str	r7, [r4, #72]	; 0x48
    2088:	64e7      	str	r7, [r4, #76]	; 0x4c
    208a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    208c:	0000242c 	.word	0x0000242c

00002090 <_fwalk_reent>:
    2090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2092:	0004      	movs	r4, r0
    2094:	0007      	movs	r7, r0
    2096:	2600      	movs	r6, #0
    2098:	9101      	str	r1, [sp, #4]
    209a:	3448      	adds	r4, #72	; 0x48
    209c:	2c00      	cmp	r4, #0
    209e:	d016      	beq.n	20ce <_fwalk_reent+0x3e>
    20a0:	6863      	ldr	r3, [r4, #4]
    20a2:	68a5      	ldr	r5, [r4, #8]
    20a4:	9300      	str	r3, [sp, #0]
    20a6:	9b00      	ldr	r3, [sp, #0]
    20a8:	3b01      	subs	r3, #1
    20aa:	9300      	str	r3, [sp, #0]
    20ac:	d40d      	bmi.n	20ca <_fwalk_reent+0x3a>
    20ae:	89ab      	ldrh	r3, [r5, #12]
    20b0:	2b01      	cmp	r3, #1
    20b2:	d908      	bls.n	20c6 <_fwalk_reent+0x36>
    20b4:	220e      	movs	r2, #14
    20b6:	5eab      	ldrsh	r3, [r5, r2]
    20b8:	3301      	adds	r3, #1
    20ba:	d004      	beq.n	20c6 <_fwalk_reent+0x36>
    20bc:	0029      	movs	r1, r5
    20be:	0038      	movs	r0, r7
    20c0:	9b01      	ldr	r3, [sp, #4]
    20c2:	4798      	blx	r3
    20c4:	4306      	orrs	r6, r0
    20c6:	3568      	adds	r5, #104	; 0x68
    20c8:	e7ed      	b.n	20a6 <_fwalk_reent+0x16>
    20ca:	6824      	ldr	r4, [r4, #0]
    20cc:	e7e6      	b.n	209c <_fwalk_reent+0xc>
    20ce:	0030      	movs	r0, r6
    20d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000020d4 <__swhatbuf_r>:
    20d4:	b570      	push	{r4, r5, r6, lr}
    20d6:	000e      	movs	r6, r1
    20d8:	001d      	movs	r5, r3
    20da:	230e      	movs	r3, #14
    20dc:	5ec9      	ldrsh	r1, [r1, r3]
    20de:	b090      	sub	sp, #64	; 0x40
    20e0:	0014      	movs	r4, r2
    20e2:	2900      	cmp	r1, #0
    20e4:	da06      	bge.n	20f4 <__swhatbuf_r+0x20>
    20e6:	2300      	movs	r3, #0
    20e8:	602b      	str	r3, [r5, #0]
    20ea:	89b3      	ldrh	r3, [r6, #12]
    20ec:	061b      	lsls	r3, r3, #24
    20ee:	d50f      	bpl.n	2110 <__swhatbuf_r+0x3c>
    20f0:	2340      	movs	r3, #64	; 0x40
    20f2:	e00f      	b.n	2114 <__swhatbuf_r+0x40>
    20f4:	aa01      	add	r2, sp, #4
    20f6:	f000 f93d 	bl	2374 <_fstat_r>
    20fa:	2800      	cmp	r0, #0
    20fc:	dbf3      	blt.n	20e6 <__swhatbuf_r+0x12>
    20fe:	23f0      	movs	r3, #240	; 0xf0
    2100:	9a02      	ldr	r2, [sp, #8]
    2102:	021b      	lsls	r3, r3, #8
    2104:	4013      	ands	r3, r2
    2106:	4a05      	ldr	r2, [pc, #20]	; (211c <__swhatbuf_r+0x48>)
    2108:	189b      	adds	r3, r3, r2
    210a:	425a      	negs	r2, r3
    210c:	4153      	adcs	r3, r2
    210e:	602b      	str	r3, [r5, #0]
    2110:	2380      	movs	r3, #128	; 0x80
    2112:	00db      	lsls	r3, r3, #3
    2114:	2000      	movs	r0, #0
    2116:	6023      	str	r3, [r4, #0]
    2118:	b010      	add	sp, #64	; 0x40
    211a:	bd70      	pop	{r4, r5, r6, pc}
    211c:	ffffe000 	.word	0xffffe000

00002120 <malloc>:
    2120:	b510      	push	{r4, lr}
    2122:	4b03      	ldr	r3, [pc, #12]	; (2130 <malloc+0x10>)
    2124:	0001      	movs	r1, r0
    2126:	6818      	ldr	r0, [r3, #0]
    2128:	f000 f84a 	bl	21c0 <_malloc_r>
    212c:	bd10      	pop	{r4, pc}
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	2000006c 	.word	0x2000006c

00002134 <_free_r>:
    2134:	b530      	push	{r4, r5, lr}
    2136:	2900      	cmp	r1, #0
    2138:	d03e      	beq.n	21b8 <_free_r+0x84>
    213a:	3904      	subs	r1, #4
    213c:	680b      	ldr	r3, [r1, #0]
    213e:	2b00      	cmp	r3, #0
    2140:	da00      	bge.n	2144 <_free_r+0x10>
    2142:	18c9      	adds	r1, r1, r3
    2144:	4a1d      	ldr	r2, [pc, #116]	; (21bc <_free_r+0x88>)
    2146:	6813      	ldr	r3, [r2, #0]
    2148:	0014      	movs	r4, r2
    214a:	2b00      	cmp	r3, #0
    214c:	d102      	bne.n	2154 <_free_r+0x20>
    214e:	604b      	str	r3, [r1, #4]
    2150:	6011      	str	r1, [r2, #0]
    2152:	e031      	b.n	21b8 <_free_r+0x84>
    2154:	428b      	cmp	r3, r1
    2156:	d90d      	bls.n	2174 <_free_r+0x40>
    2158:	680a      	ldr	r2, [r1, #0]
    215a:	1888      	adds	r0, r1, r2
    215c:	4283      	cmp	r3, r0
    215e:	d103      	bne.n	2168 <_free_r+0x34>
    2160:	6818      	ldr	r0, [r3, #0]
    2162:	685b      	ldr	r3, [r3, #4]
    2164:	1882      	adds	r2, r0, r2
    2166:	600a      	str	r2, [r1, #0]
    2168:	604b      	str	r3, [r1, #4]
    216a:	6021      	str	r1, [r4, #0]
    216c:	e024      	b.n	21b8 <_free_r+0x84>
    216e:	428a      	cmp	r2, r1
    2170:	d803      	bhi.n	217a <_free_r+0x46>
    2172:	0013      	movs	r3, r2
    2174:	685a      	ldr	r2, [r3, #4]
    2176:	2a00      	cmp	r2, #0
    2178:	d1f9      	bne.n	216e <_free_r+0x3a>
    217a:	681d      	ldr	r5, [r3, #0]
    217c:	195c      	adds	r4, r3, r5
    217e:	428c      	cmp	r4, r1
    2180:	d10b      	bne.n	219a <_free_r+0x66>
    2182:	6809      	ldr	r1, [r1, #0]
    2184:	1869      	adds	r1, r5, r1
    2186:	1858      	adds	r0, r3, r1
    2188:	6019      	str	r1, [r3, #0]
    218a:	4282      	cmp	r2, r0
    218c:	d114      	bne.n	21b8 <_free_r+0x84>
    218e:	6810      	ldr	r0, [r2, #0]
    2190:	6852      	ldr	r2, [r2, #4]
    2192:	1841      	adds	r1, r0, r1
    2194:	6019      	str	r1, [r3, #0]
    2196:	605a      	str	r2, [r3, #4]
    2198:	e00e      	b.n	21b8 <_free_r+0x84>
    219a:	428c      	cmp	r4, r1
    219c:	d902      	bls.n	21a4 <_free_r+0x70>
    219e:	230c      	movs	r3, #12
    21a0:	6003      	str	r3, [r0, #0]
    21a2:	e009      	b.n	21b8 <_free_r+0x84>
    21a4:	6808      	ldr	r0, [r1, #0]
    21a6:	180c      	adds	r4, r1, r0
    21a8:	42a2      	cmp	r2, r4
    21aa:	d103      	bne.n	21b4 <_free_r+0x80>
    21ac:	6814      	ldr	r4, [r2, #0]
    21ae:	6852      	ldr	r2, [r2, #4]
    21b0:	1820      	adds	r0, r4, r0
    21b2:	6008      	str	r0, [r1, #0]
    21b4:	604a      	str	r2, [r1, #4]
    21b6:	6059      	str	r1, [r3, #4]
    21b8:	bd30      	pop	{r4, r5, pc}
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	200000cc 	.word	0x200000cc

000021c0 <_malloc_r>:
    21c0:	2303      	movs	r3, #3
    21c2:	b570      	push	{r4, r5, r6, lr}
    21c4:	1ccd      	adds	r5, r1, #3
    21c6:	439d      	bics	r5, r3
    21c8:	3508      	adds	r5, #8
    21ca:	0006      	movs	r6, r0
    21cc:	2d0c      	cmp	r5, #12
    21ce:	d201      	bcs.n	21d4 <_malloc_r+0x14>
    21d0:	250c      	movs	r5, #12
    21d2:	e005      	b.n	21e0 <_malloc_r+0x20>
    21d4:	2d00      	cmp	r5, #0
    21d6:	da03      	bge.n	21e0 <_malloc_r+0x20>
    21d8:	230c      	movs	r3, #12
    21da:	2000      	movs	r0, #0
    21dc:	6033      	str	r3, [r6, #0]
    21de:	e040      	b.n	2262 <_malloc_r+0xa2>
    21e0:	42a9      	cmp	r1, r5
    21e2:	d8f9      	bhi.n	21d8 <_malloc_r+0x18>
    21e4:	4b1f      	ldr	r3, [pc, #124]	; (2264 <_malloc_r+0xa4>)
    21e6:	681c      	ldr	r4, [r3, #0]
    21e8:	001a      	movs	r2, r3
    21ea:	0021      	movs	r1, r4
    21ec:	2900      	cmp	r1, #0
    21ee:	d013      	beq.n	2218 <_malloc_r+0x58>
    21f0:	680b      	ldr	r3, [r1, #0]
    21f2:	1b5b      	subs	r3, r3, r5
    21f4:	d40d      	bmi.n	2212 <_malloc_r+0x52>
    21f6:	2b0b      	cmp	r3, #11
    21f8:	d902      	bls.n	2200 <_malloc_r+0x40>
    21fa:	600b      	str	r3, [r1, #0]
    21fc:	18cc      	adds	r4, r1, r3
    21fe:	e01e      	b.n	223e <_malloc_r+0x7e>
    2200:	428c      	cmp	r4, r1
    2202:	d102      	bne.n	220a <_malloc_r+0x4a>
    2204:	6863      	ldr	r3, [r4, #4]
    2206:	6013      	str	r3, [r2, #0]
    2208:	e01a      	b.n	2240 <_malloc_r+0x80>
    220a:	684b      	ldr	r3, [r1, #4]
    220c:	6063      	str	r3, [r4, #4]
    220e:	000c      	movs	r4, r1
    2210:	e016      	b.n	2240 <_malloc_r+0x80>
    2212:	000c      	movs	r4, r1
    2214:	6849      	ldr	r1, [r1, #4]
    2216:	e7e9      	b.n	21ec <_malloc_r+0x2c>
    2218:	4c13      	ldr	r4, [pc, #76]	; (2268 <_malloc_r+0xa8>)
    221a:	6823      	ldr	r3, [r4, #0]
    221c:	2b00      	cmp	r3, #0
    221e:	d103      	bne.n	2228 <_malloc_r+0x68>
    2220:	0030      	movs	r0, r6
    2222:	f000 f823 	bl	226c <_sbrk_r>
    2226:	6020      	str	r0, [r4, #0]
    2228:	0029      	movs	r1, r5
    222a:	0030      	movs	r0, r6
    222c:	f000 f81e 	bl	226c <_sbrk_r>
    2230:	1c43      	adds	r3, r0, #1
    2232:	d0d1      	beq.n	21d8 <_malloc_r+0x18>
    2234:	2303      	movs	r3, #3
    2236:	1cc4      	adds	r4, r0, #3
    2238:	439c      	bics	r4, r3
    223a:	42a0      	cmp	r0, r4
    223c:	d10a      	bne.n	2254 <_malloc_r+0x94>
    223e:	6025      	str	r5, [r4, #0]
    2240:	0020      	movs	r0, r4
    2242:	2207      	movs	r2, #7
    2244:	300b      	adds	r0, #11
    2246:	1d23      	adds	r3, r4, #4
    2248:	4390      	bics	r0, r2
    224a:	1ac3      	subs	r3, r0, r3
    224c:	d009      	beq.n	2262 <_malloc_r+0xa2>
    224e:	425a      	negs	r2, r3
    2250:	50e2      	str	r2, [r4, r3]
    2252:	e006      	b.n	2262 <_malloc_r+0xa2>
    2254:	1a21      	subs	r1, r4, r0
    2256:	0030      	movs	r0, r6
    2258:	f000 f808 	bl	226c <_sbrk_r>
    225c:	1c43      	adds	r3, r0, #1
    225e:	d1ee      	bne.n	223e <_malloc_r+0x7e>
    2260:	e7ba      	b.n	21d8 <_malloc_r+0x18>
    2262:	bd70      	pop	{r4, r5, r6, pc}
    2264:	200000cc 	.word	0x200000cc
    2268:	200000c8 	.word	0x200000c8

0000226c <_sbrk_r>:
    226c:	2300      	movs	r3, #0
    226e:	b570      	push	{r4, r5, r6, lr}
    2270:	4c06      	ldr	r4, [pc, #24]	; (228c <_sbrk_r+0x20>)
    2272:	0005      	movs	r5, r0
    2274:	0008      	movs	r0, r1
    2276:	6023      	str	r3, [r4, #0]
    2278:	f7ff fbc4 	bl	1a04 <_sbrk>
    227c:	1c43      	adds	r3, r0, #1
    227e:	d103      	bne.n	2288 <_sbrk_r+0x1c>
    2280:	6823      	ldr	r3, [r4, #0]
    2282:	2b00      	cmp	r3, #0
    2284:	d000      	beq.n	2288 <_sbrk_r+0x1c>
    2286:	602b      	str	r3, [r5, #0]
    2288:	bd70      	pop	{r4, r5, r6, pc}
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	20000178 	.word	0x20000178

00002290 <__sread>:
    2290:	b570      	push	{r4, r5, r6, lr}
    2292:	000c      	movs	r4, r1
    2294:	250e      	movs	r5, #14
    2296:	5f49      	ldrsh	r1, [r1, r5]
    2298:	f000 f892 	bl	23c0 <_read_r>
    229c:	2800      	cmp	r0, #0
    229e:	db03      	blt.n	22a8 <__sread+0x18>
    22a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    22a2:	181b      	adds	r3, r3, r0
    22a4:	6563      	str	r3, [r4, #84]	; 0x54
    22a6:	e003      	b.n	22b0 <__sread+0x20>
    22a8:	89a2      	ldrh	r2, [r4, #12]
    22aa:	4b02      	ldr	r3, [pc, #8]	; (22b4 <__sread+0x24>)
    22ac:	4013      	ands	r3, r2
    22ae:	81a3      	strh	r3, [r4, #12]
    22b0:	bd70      	pop	{r4, r5, r6, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	ffffefff 	.word	0xffffefff

000022b8 <__swrite>:
    22b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ba:	001f      	movs	r7, r3
    22bc:	898b      	ldrh	r3, [r1, #12]
    22be:	0005      	movs	r5, r0
    22c0:	000c      	movs	r4, r1
    22c2:	0016      	movs	r6, r2
    22c4:	05db      	lsls	r3, r3, #23
    22c6:	d505      	bpl.n	22d4 <__swrite+0x1c>
    22c8:	230e      	movs	r3, #14
    22ca:	5ec9      	ldrsh	r1, [r1, r3]
    22cc:	2200      	movs	r2, #0
    22ce:	2302      	movs	r3, #2
    22d0:	f000 f862 	bl	2398 <_lseek_r>
    22d4:	89a2      	ldrh	r2, [r4, #12]
    22d6:	4b05      	ldr	r3, [pc, #20]	; (22ec <__swrite+0x34>)
    22d8:	0028      	movs	r0, r5
    22da:	4013      	ands	r3, r2
    22dc:	81a3      	strh	r3, [r4, #12]
    22de:	0032      	movs	r2, r6
    22e0:	230e      	movs	r3, #14
    22e2:	5ee1      	ldrsh	r1, [r4, r3]
    22e4:	003b      	movs	r3, r7
    22e6:	f000 f81f 	bl	2328 <_write_r>
    22ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22ec:	ffffefff 	.word	0xffffefff

000022f0 <__sseek>:
    22f0:	b570      	push	{r4, r5, r6, lr}
    22f2:	000c      	movs	r4, r1
    22f4:	250e      	movs	r5, #14
    22f6:	5f49      	ldrsh	r1, [r1, r5]
    22f8:	f000 f84e 	bl	2398 <_lseek_r>
    22fc:	89a3      	ldrh	r3, [r4, #12]
    22fe:	1c42      	adds	r2, r0, #1
    2300:	d103      	bne.n	230a <__sseek+0x1a>
    2302:	4a05      	ldr	r2, [pc, #20]	; (2318 <__sseek+0x28>)
    2304:	4013      	ands	r3, r2
    2306:	81a3      	strh	r3, [r4, #12]
    2308:	e004      	b.n	2314 <__sseek+0x24>
    230a:	2280      	movs	r2, #128	; 0x80
    230c:	0152      	lsls	r2, r2, #5
    230e:	4313      	orrs	r3, r2
    2310:	81a3      	strh	r3, [r4, #12]
    2312:	6560      	str	r0, [r4, #84]	; 0x54
    2314:	bd70      	pop	{r4, r5, r6, pc}
    2316:	46c0      	nop			; (mov r8, r8)
    2318:	ffffefff 	.word	0xffffefff

0000231c <__sclose>:
    231c:	b510      	push	{r4, lr}
    231e:	230e      	movs	r3, #14
    2320:	5ec9      	ldrsh	r1, [r1, r3]
    2322:	f000 f815 	bl	2350 <_close_r>
    2326:	bd10      	pop	{r4, pc}

00002328 <_write_r>:
    2328:	b570      	push	{r4, r5, r6, lr}
    232a:	0005      	movs	r5, r0
    232c:	0008      	movs	r0, r1
    232e:	0011      	movs	r1, r2
    2330:	2200      	movs	r2, #0
    2332:	4c06      	ldr	r4, [pc, #24]	; (234c <_write_r+0x24>)
    2334:	6022      	str	r2, [r4, #0]
    2336:	001a      	movs	r2, r3
    2338:	f7fe fff2 	bl	1320 <_write>
    233c:	1c43      	adds	r3, r0, #1
    233e:	d103      	bne.n	2348 <_write_r+0x20>
    2340:	6823      	ldr	r3, [r4, #0]
    2342:	2b00      	cmp	r3, #0
    2344:	d000      	beq.n	2348 <_write_r+0x20>
    2346:	602b      	str	r3, [r5, #0]
    2348:	bd70      	pop	{r4, r5, r6, pc}
    234a:	46c0      	nop			; (mov r8, r8)
    234c:	20000178 	.word	0x20000178

00002350 <_close_r>:
    2350:	2300      	movs	r3, #0
    2352:	b570      	push	{r4, r5, r6, lr}
    2354:	4c06      	ldr	r4, [pc, #24]	; (2370 <_close_r+0x20>)
    2356:	0005      	movs	r5, r0
    2358:	0008      	movs	r0, r1
    235a:	6023      	str	r3, [r4, #0]
    235c:	f7ff fb64 	bl	1a28 <_close>
    2360:	1c43      	adds	r3, r0, #1
    2362:	d103      	bne.n	236c <_close_r+0x1c>
    2364:	6823      	ldr	r3, [r4, #0]
    2366:	2b00      	cmp	r3, #0
    2368:	d000      	beq.n	236c <_close_r+0x1c>
    236a:	602b      	str	r3, [r5, #0]
    236c:	bd70      	pop	{r4, r5, r6, pc}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	20000178 	.word	0x20000178

00002374 <_fstat_r>:
    2374:	2300      	movs	r3, #0
    2376:	b570      	push	{r4, r5, r6, lr}
    2378:	4c06      	ldr	r4, [pc, #24]	; (2394 <_fstat_r+0x20>)
    237a:	0005      	movs	r5, r0
    237c:	0008      	movs	r0, r1
    237e:	0011      	movs	r1, r2
    2380:	6023      	str	r3, [r4, #0]
    2382:	f7ff fb55 	bl	1a30 <_fstat>
    2386:	1c43      	adds	r3, r0, #1
    2388:	d103      	bne.n	2392 <_fstat_r+0x1e>
    238a:	6823      	ldr	r3, [r4, #0]
    238c:	2b00      	cmp	r3, #0
    238e:	d000      	beq.n	2392 <_fstat_r+0x1e>
    2390:	602b      	str	r3, [r5, #0]
    2392:	bd70      	pop	{r4, r5, r6, pc}
    2394:	20000178 	.word	0x20000178

00002398 <_lseek_r>:
    2398:	b570      	push	{r4, r5, r6, lr}
    239a:	0005      	movs	r5, r0
    239c:	0008      	movs	r0, r1
    239e:	0011      	movs	r1, r2
    23a0:	2200      	movs	r2, #0
    23a2:	4c06      	ldr	r4, [pc, #24]	; (23bc <_lseek_r+0x24>)
    23a4:	6022      	str	r2, [r4, #0]
    23a6:	001a      	movs	r2, r3
    23a8:	f7ff fb48 	bl	1a3c <_lseek>
    23ac:	1c43      	adds	r3, r0, #1
    23ae:	d103      	bne.n	23b8 <_lseek_r+0x20>
    23b0:	6823      	ldr	r3, [r4, #0]
    23b2:	2b00      	cmp	r3, #0
    23b4:	d000      	beq.n	23b8 <_lseek_r+0x20>
    23b6:	602b      	str	r3, [r5, #0]
    23b8:	bd70      	pop	{r4, r5, r6, pc}
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	20000178 	.word	0x20000178

000023c0 <_read_r>:
    23c0:	b570      	push	{r4, r5, r6, lr}
    23c2:	0005      	movs	r5, r0
    23c4:	0008      	movs	r0, r1
    23c6:	0011      	movs	r1, r2
    23c8:	2200      	movs	r2, #0
    23ca:	4c06      	ldr	r4, [pc, #24]	; (23e4 <_read_r+0x24>)
    23cc:	6022      	str	r2, [r4, #0]
    23ce:	001a      	movs	r2, r3
    23d0:	f7fe ff86 	bl	12e0 <_read>
    23d4:	1c43      	adds	r3, r0, #1
    23d6:	d103      	bne.n	23e0 <_read_r+0x20>
    23d8:	6823      	ldr	r3, [r4, #0]
    23da:	2b00      	cmp	r3, #0
    23dc:	d000      	beq.n	23e0 <_read_r+0x20>
    23de:	602b      	str	r3, [r5, #0]
    23e0:	bd70      	pop	{r4, r5, r6, pc}
    23e2:	46c0      	nop			; (mov r8, r8)
    23e4:	20000178 	.word	0x20000178
    23e8:	42000400 	.word	0x42000400
    23ec:	42000800 	.word	0x42000800
    23f0:	42000c00 	.word	0x42000c00
    23f4:	42001000 	.word	0x42001000
    23f8:	42001400 	.word	0x42001400
    23fc:	42001800 	.word	0x42001800
    2400:	0c0b0a09 	.word	0x0c0b0a09
    2404:	00000e0d 	.word	0x00000e0d
    2408:	00001572 	.word	0x00001572
    240c:	0000156e 	.word	0x0000156e
    2410:	0000156e 	.word	0x0000156e
    2414:	000015a0 	.word	0x000015a0
    2418:	000015a0 	.word	0x000015a0
    241c:	0000158a 	.word	0x0000158a
    2420:	00001578 	.word	0x00001578
    2424:	00001590 	.word	0x00001590
    2428:	00000043 	.word	0x00000043

0000242c <_global_impure_ptr>:
    242c:	2000000c                                ... 

00002430 <__sf_fake_stdin>:
	...

00002450 <__sf_fake_stdout>:
	...

00002470 <__sf_fake_stderr>:
	...

00002490 <_init>:
    2490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2492:	46c0      	nop			; (mov r8, r8)
    2494:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2496:	bc08      	pop	{r3}
    2498:	469e      	mov	lr, r3
    249a:	4770      	bx	lr

0000249c <__init_array_start>:
    249c:	000000e5 	.word	0x000000e5

000024a0 <_fini>:
    24a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    24a6:	bc08      	pop	{r3}
    24a8:	469e      	mov	lr, r3
    24aa:	4770      	bx	lr

000024ac <__fini_array_start>:
    24ac:	000000bd 	.word	0x000000bd
