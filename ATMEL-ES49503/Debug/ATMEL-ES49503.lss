
ATMEL-ES49503.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bb8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000022c  20000070  00002c28  00020070  2**2
                  ALLOC
  3 .stack        00002004  2000029c  00002e54  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00028ded  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000412f  00000000  00000000  00048ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000088cd  00000000  00000000  0004d00d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006d0  00000000  00000000  000558da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b88  00000000  00000000  00055faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022de1  00000000  00000000  00056b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000142c8  00000000  00000000  00079913  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a09b7  00000000  00000000  0008dbdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000015a0  00000000  00000000  0012e594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200022a0 	.word	0x200022a0
       4:	00001f35 	.word	0x00001f35
       8:	00001f31 	.word	0x00001f31
       c:	00001f31 	.word	0x00001f31
	...
      2c:	00001f31 	.word	0x00001f31
	...
      38:	00001f31 	.word	0x00001f31
      3c:	00001f31 	.word	0x00001f31
      40:	00001f31 	.word	0x00001f31
      44:	00001f31 	.word	0x00001f31
      48:	00001f31 	.word	0x00001f31
      4c:	000005bd 	.word	0x000005bd
      50:	00001f31 	.word	0x00001f31
      54:	00001f31 	.word	0x00001f31
      58:	00001f31 	.word	0x00001f31
      5c:	00001f31 	.word	0x00001f31
      60:	00001f31 	.word	0x00001f31
      64:	00000e71 	.word	0x00000e71
      68:	00000e81 	.word	0x00000e81
      6c:	00000e91 	.word	0x00000e91
      70:	00000ea1 	.word	0x00000ea1
      74:	00000eb1 	.word	0x00000eb1
      78:	00000ec1 	.word	0x00000ec1
      7c:	00001f31 	.word	0x00001f31
      80:	00001f31 	.word	0x00001f31
      84:	00001f31 	.word	0x00001f31
      88:	00001f31 	.word	0x00001f31
      8c:	00001f31 	.word	0x00001f31
      90:	00001f31 	.word	0x00001f31
      94:	00001f31 	.word	0x00001f31
      98:	00001f31 	.word	0x00001f31
      9c:	00001f31 	.word	0x00001f31
      a0:	00001f31 	.word	0x00001f31
      a4:	00001f31 	.word	0x00001f31
      a8:	00001f31 	.word	0x00001f31
      ac:	00001f31 	.word	0x00001f31
      b0:	00001f31 	.word	0x00001f31
      b4:	00001f31 	.word	0x00001f31
      b8:	00001f31 	.word	0x00001f31

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000070 	.word	0x20000070
      dc:	00000000 	.word	0x00000000
      e0:	00002bb8 	.word	0x00002bb8

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000074 	.word	0x20000074
     110:	00002bb8 	.word	0x00002bb8
     114:	00002bb8 	.word	0x00002bb8
     118:	00000000 	.word	0x00000000

0000011c <Configure_Flash>:
  * @param  None
  * @retval None
  */

void Configure_Flash(void)
{
     11c:	b500      	push	{lr}
     11e:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
     120:	2300      	movs	r3, #0
     122:	466a      	mov	r2, sp
     124:	7013      	strb	r3, [r2, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
     126:	4a07      	ldr	r2, [pc, #28]	; (144 <Configure_Flash+0x28>)
     128:	6852      	ldr	r2, [r2, #4]
     12a:	06d2      	lsls	r2, r2, #27
     12c:	0f12      	lsrs	r2, r2, #28
     12e:	4669      	mov	r1, sp
     130:	708a      	strb	r2, [r1, #2]
	config->disable_cache     = false;
     132:	70cb      	strb	r3, [r1, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
     134:	710b      	strb	r3, [r1, #4]
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
     136:	714b      	strb	r3, [r1, #5]
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
     138:	704b      	strb	r3, [r1, #1]
	nvm_set_config(&config_nvm);
     13a:	4668      	mov	r0, sp
     13c:	4b02      	ldr	r3, [pc, #8]	; (148 <Configure_Flash+0x2c>)
     13e:	4798      	blx	r3
}
     140:	b003      	add	sp, #12
     142:	bd00      	pop	{pc}
     144:	41004000 	.word	0x41004000
     148:	000006c9 	.word	0x000006c9

0000014c <Bsp_Erase_Row>:
  * @param  address
  * @retval None
  */

void Bsp_Erase_Row(uint32_t address)
{
     14c:	b570      	push	{r4, r5, r6, lr}
     14e:	0005      	movs	r5, r0
	enum status_code error_code;
	do
	{
		error_code = nvm_erase_row(address);
     150:	4c02      	ldr	r4, [pc, #8]	; (15c <Bsp_Erase_Row+0x10>)
     152:	0028      	movs	r0, r5
     154:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
     156:	2805      	cmp	r0, #5
     158:	d0fb      	beq.n	152 <Bsp_Erase_Row+0x6>
}
     15a:	bd70      	pop	{r4, r5, r6, pc}
     15c:	00000959 	.word	0x00000959

00000160 <Bsp_Write_Buffer>:
  * @param  address,point of buffer,length
  * @retval None
  */

void Bsp_Write_Buffer(uint32_t address,uint8_t *buff,uint16_t length)
{
     160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     162:	0006      	movs	r6, r0
     164:	000d      	movs	r5, r1
     166:	0014      	movs	r4, r2
	enum status_code error_code;
	do
	{
		error_code = nvm_write_buffer(address,buff, length);
     168:	4f03      	ldr	r7, [pc, #12]	; (178 <Bsp_Write_Buffer+0x18>)
     16a:	0022      	movs	r2, r4
     16c:	0029      	movs	r1, r5
     16e:	0030      	movs	r0, r6
     170:	47b8      	blx	r7
	} while (error_code == STATUS_BUSY);
     172:	2805      	cmp	r0, #5
     174:	d0f9      	beq.n	16a <Bsp_Write_Buffer+0xa>
}
     176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     178:	00000811 	.word	0x00000811

0000017c <Bsp_Read_Buffer>:
  * @param  address,point of buffer,length
  * @retval None
  */

void Bsp_Read_Buffer(uint32_t address,uint8_t *buff,uint16_t length)
{
     17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     17e:	0006      	movs	r6, r0
     180:	000d      	movs	r5, r1
     182:	0014      	movs	r4, r2
	enum status_code error_code;
	do
	{
		error_code = nvm_read_buffer(address,buff, length);
     184:	4f03      	ldr	r7, [pc, #12]	; (194 <Bsp_Read_Buffer+0x18>)
     186:	0022      	movs	r2, r4
     188:	0029      	movs	r1, r5
     18a:	0030      	movs	r0, r6
     18c:	47b8      	blx	r7
	} while (error_code == STATUS_BUSY);
     18e:	2805      	cmp	r0, #5
     190:	d0f9      	beq.n	186 <Bsp_Read_Buffer+0xa>
}
     192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     194:	000008e1 	.word	0x000008e1

00000198 <EEPROM_To_RAM>:
  * @retval None
  */

void EEPROM_To_RAM(void)
{
	g_sys_cap.val.re_cap_rate = flash_ram_buffer[EEPROM_INDEX_CAP_VAL];
     198:	4a34      	ldr	r2, [pc, #208]	; (26c <EEPROM_To_RAM+0xd4>)
     19a:	7851      	ldrb	r1, [r2, #1]
     19c:	4b34      	ldr	r3, [pc, #208]	; (270 <EEPROM_To_RAM+0xd8>)
     19e:	7499      	strb	r1, [r3, #18]
	g_sys_cap.val.re_cap_rate_old = g_sys_cap.val.re_cap_rate;
     1a0:	7c99      	ldrb	r1, [r3, #18]
     1a2:	b2c9      	uxtb	r1, r1
     1a4:	7519      	strb	r1, [r3, #20]
	g_sys_cap.val.re_cap_rate_old2 = g_sys_cap.val.re_cap_rate;   //ÐÞÕýsocÖµ20161010zzysoc3
     1a6:	7c99      	ldrb	r1, [r3, #18]
     1a8:	b2c9      	uxtb	r1, r1
     1aa:	7559      	strb	r1, [r3, #21]

	//cap_update =  flash_ram_buffer[EEPROM_INDEX_FULL_CAP];
	//cap_update <<=8;
	//cap_update |=  flash_ram_buffer[EEPROM_INDEX_FULL_CAP+1];

	g_sys_cap.val.bat_cycle_cnt =  flash_ram_buffer[EEPROM_INDEX_CYCLE];
     1ac:	7911      	ldrb	r1, [r2, #4]
     1ae:	8499      	strh	r1, [r3, #36]	; 0x24
	g_sys_cap.val.bat_cycle_cnt <<=8;
     1b0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
     1b2:	0209      	lsls	r1, r1, #8
     1b4:	b289      	uxth	r1, r1
     1b6:	8499      	strh	r1, [r3, #36]	; 0x24
	g_sys_cap.val.bat_cycle_cnt |=  flash_ram_buffer[EEPROM_INDEX_CYCLE+1];
     1b8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
     1ba:	7951      	ldrb	r1, [r2, #5]
     1bc:	4301      	orrs	r1, r0
     1be:	8499      	strh	r1, [r3, #36]	; 0x24
	    
	g_sys_cap.val.deep_dch_cycle_cnt =  flash_ram_buffer[EEPROM_INDEX_DEEP_DCH_CYCLE];
     1c0:	7991      	ldrb	r1, [r2, #6]
     1c2:	84d9      	strh	r1, [r3, #38]	; 0x26
	g_sys_cap.val.deep_dch_cycle_cnt <<=8;
     1c4:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
     1c6:	0209      	lsls	r1, r1, #8
     1c8:	b289      	uxth	r1, r1
     1ca:	84d9      	strh	r1, [r3, #38]	; 0x26
	g_sys_cap.val.deep_dch_cycle_cnt |=  flash_ram_buffer[EEPROM_INDEX_DEEP_DCH_CYCLE+1];
     1cc:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
     1ce:	79d1      	ldrb	r1, [r2, #7]
     1d0:	4301      	orrs	r1, r0
     1d2:	84d9      	strh	r1, [r3, #38]	; 0x26
	    
	    
	g_sys_cap.val.deep_chg_cycle_cnt =  flash_ram_buffer[EEPROM_INDEX_DEEP_CHG_CYCLE];
     1d4:	7a11      	ldrb	r1, [r2, #8]
     1d6:	8519      	strh	r1, [r3, #40]	; 0x28
	g_sys_cap.val.deep_chg_cycle_cnt <<=8;
     1d8:	8d19      	ldrh	r1, [r3, #40]	; 0x28
     1da:	0209      	lsls	r1, r1, #8
     1dc:	b289      	uxth	r1, r1
     1de:	8519      	strh	r1, [r3, #40]	; 0x28
	g_sys_cap.val.deep_chg_cycle_cnt |= flash_ram_buffer[EEPROM_INDEX_DEEP_CHG_CYCLE+1];
     1e0:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     1e2:	7a51      	ldrb	r1, [r2, #9]
     1e4:	4301      	orrs	r1, r0
     1e6:	8519      	strh	r1, [r3, #40]	; 0x28
	    
	//0819
	sys_err_flags.VAL = flash_ram_buffer[EEPROM_INDEX_SYS_ERR];
	sys_err_flags.VAL <<=8;
	sys_err_flags.VAL = flash_ram_buffer[EEPROM_INDEX_SYS_ERR+1];
     1e8:	7ad1      	ldrb	r1, [r2, #11]
     1ea:	4b22      	ldr	r3, [pc, #136]	; (274 <EEPROM_To_RAM+0xdc>)
     1ec:	8019      	strh	r1, [r3, #0]

	g_sys_history.val.vcell_min = flash_ram_buffer[EEPROM_INDEX_HIS_VCELLMIN];
     1ee:	7b11      	ldrb	r1, [r2, #12]
     1f0:	4b21      	ldr	r3, [pc, #132]	; (278 <EEPROM_To_RAM+0xe0>)
     1f2:	8019      	strh	r1, [r3, #0]
	g_sys_history.val.vcell_min <<=8;
     1f4:	8819      	ldrh	r1, [r3, #0]
     1f6:	0209      	lsls	r1, r1, #8
     1f8:	b289      	uxth	r1, r1
     1fa:	8019      	strh	r1, [r3, #0]
	g_sys_history.val.vcell_min |=  flash_ram_buffer[EEPROM_INDEX_HIS_VCELLMIN+1];
     1fc:	8818      	ldrh	r0, [r3, #0]
     1fe:	7b51      	ldrb	r1, [r2, #13]
     200:	4301      	orrs	r1, r0
     202:	8019      	strh	r1, [r3, #0]
	    
	g_sys_history.val.vcell_max = flash_ram_buffer[EEPROM_INDEX_HIS_VCELLMAX];
     204:	7b91      	ldrb	r1, [r2, #14]
     206:	8059      	strh	r1, [r3, #2]
	g_sys_history.val.vcell_max <<=8;
     208:	8859      	ldrh	r1, [r3, #2]
     20a:	0209      	lsls	r1, r1, #8
     20c:	b289      	uxth	r1, r1
     20e:	8059      	strh	r1, [r3, #2]
	g_sys_history.val.vcell_max |=  flash_ram_buffer[EEPROM_INDEX_HIS_VCELLMAX+1];
     210:	8858      	ldrh	r0, [r3, #2]
     212:	7bd1      	ldrb	r1, [r2, #15]
     214:	4301      	orrs	r1, r0
     216:	8059      	strh	r1, [r3, #2]

	g_sys_history.val.bat_temp_min = flash_ram_buffer[EEPROM_INDEX_HIS_TEMPMIN];
     218:	2110      	movs	r1, #16
     21a:	5651      	ldrsb	r1, [r2, r1]
     21c:	7119      	strb	r1, [r3, #4]
	g_sys_history.val.bat_temp_max =  flash_ram_buffer[EEPROM_INDEX_HIS_TEMPMAX];
     21e:	2111      	movs	r1, #17
     220:	5651      	ldrsb	r1, [r2, r1]
     222:	7159      	strb	r1, [r3, #5]

	g_sys_history.val.dch_cur_max = flash_ram_buffer[EEPROM_INDEX_HIS_DCHCMAX];
     224:	7c91      	ldrb	r1, [r2, #18]
     226:	80d9      	strh	r1, [r3, #6]
	g_sys_history.val.dch_cur_max <<=8;
     228:	88d9      	ldrh	r1, [r3, #6]
     22a:	b249      	sxtb	r1, r1
     22c:	0209      	lsls	r1, r1, #8
     22e:	80d9      	strh	r1, [r3, #6]
	g_sys_history.val.dch_cur_max |=  flash_ram_buffer[EEPROM_INDEX_HIS_DCHCMAX+1];
     230:	88d9      	ldrh	r1, [r3, #6]
     232:	b209      	sxth	r1, r1
     234:	7cd0      	ldrb	r0, [r2, #19]
     236:	4301      	orrs	r1, r0
     238:	80d9      	strh	r1, [r3, #6]
	    
	g_sys_history.val.chg_cur_max = flash_ram_buffer[EEPROM_INDEX_HIS_CHGCMAX];
     23a:	7d11      	ldrb	r1, [r2, #20]
     23c:	8119      	strh	r1, [r3, #8]
	g_sys_history.val.chg_cur_max <<=8;
     23e:	8919      	ldrh	r1, [r3, #8]
     240:	b249      	sxtb	r1, r1
     242:	0209      	lsls	r1, r1, #8
     244:	8119      	strh	r1, [r3, #8]
	g_sys_history.val.chg_cur_max |=  flash_ram_buffer[EEPROM_INDEX_HIS_CHGCMAX+1];
     246:	8919      	ldrh	r1, [r3, #8]
     248:	b209      	sxth	r1, r1
     24a:	7d50      	ldrb	r0, [r2, #21]
     24c:	4301      	orrs	r1, r0
     24e:	8119      	strh	r1, [r3, #8]

	g_sys_history.val.soc_max = flash_ram_buffer[EEPROM_INDEX_HIS_SOC_MAX];
     250:	7d91      	ldrb	r1, [r2, #22]
     252:	8159      	strh	r1, [r3, #10]
	g_sys_history.val.soc_max <<=8;
     254:	8959      	ldrh	r1, [r3, #10]
     256:	0209      	lsls	r1, r1, #8
     258:	b289      	uxth	r1, r1
     25a:	8159      	strh	r1, [r3, #10]
	g_sys_history.val.soc_max |=  flash_ram_buffer[EEPROM_INDEX_HIS_SOC_MAX+1];
     25c:	8958      	ldrh	r0, [r3, #10]
     25e:	7dd1      	ldrb	r1, [r2, #23]
     260:	4301      	orrs	r1, r0
     262:	8159      	strh	r1, [r3, #10]
	    
	g_sys_history.val.pcb_temp_max = flash_ram_buffer[EEPROM_INDEX_HIS_PCBTEMPMAX];
     264:	7e12      	ldrb	r2, [r2, #24]
     266:	b252      	sxtb	r2, r2
     268:	731a      	strb	r2, [r3, #12]
}
     26a:	4770      	bx	lr
     26c:	20000278 	.word	0x20000278
     270:	20000228 	.word	0x20000228
     274:	2000026c 	.word	0x2000026c
     278:	2000025c 	.word	0x2000025c

0000027c <EEPROM_Init>:
  * @param  None
  * @retval None
  */

void EEPROM_Init(void)
{
     27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint8_t block_crc;
    block_crc =0;
    flash_ram_buffer[EEPROM_INDEX_BEGIN] = 0xB3;
     27e:	4b2e      	ldr	r3, [pc, #184]	; (338 <EEPROM_Init+0xbc>)
     280:	22b3      	movs	r2, #179	; 0xb3
     282:	701a      	strb	r2, [r3, #0]
    flash_ram_buffer[EEPROM_INDEX_FULL_CAP] = (uint8_t)(cap_update>>8);
     284:	492d      	ldr	r1, [pc, #180]	; (33c <EEPROM_Init+0xc0>)
     286:	880a      	ldrh	r2, [r1, #0]
     288:	0a12      	lsrs	r2, r2, #8
     28a:	709a      	strb	r2, [r3, #2]
    flash_ram_buffer[EEPROM_INDEX_FULL_CAP+1] = (uint8_t)(cap_update);
     28c:	880a      	ldrh	r2, [r1, #0]
     28e:	70da      	strb	r2, [r3, #3]
    
    flash_ram_buffer[EEPROM_INDEX_CYCLE] = (uint8_t)(g_sys_cap.val.bat_cycle_cnt>>8);
     290:	4a2b      	ldr	r2, [pc, #172]	; (340 <EEPROM_Init+0xc4>)
     292:	8c91      	ldrh	r1, [r2, #36]	; 0x24
     294:	0a09      	lsrs	r1, r1, #8
     296:	7119      	strb	r1, [r3, #4]
    flash_ram_buffer[EEPROM_INDEX_CYCLE+1] = (uint8_t)(g_sys_cap.val.bat_cycle_cnt);
     298:	8c91      	ldrh	r1, [r2, #36]	; 0x24
     29a:	7159      	strb	r1, [r3, #5]
    
    flash_ram_buffer[EEPROM_INDEX_DEEP_DCH_CYCLE] = (uint8_t)(g_sys_cap.val.deep_dch_cycle_cnt>>8);
     29c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
     29e:	0a09      	lsrs	r1, r1, #8
     2a0:	7199      	strb	r1, [r3, #6]
    flash_ram_buffer[EEPROM_INDEX_DEEP_DCH_CYCLE+1] = (uint8_t)(g_sys_cap.val.deep_dch_cycle_cnt);
     2a2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
     2a4:	71d9      	strb	r1, [r3, #7]
    
    flash_ram_buffer[EEPROM_INDEX_DEEP_CHG_CYCLE] = (uint8_t)(g_sys_cap.val.deep_chg_cycle_cnt>>8);
     2a6:	8d11      	ldrh	r1, [r2, #40]	; 0x28
     2a8:	0a09      	lsrs	r1, r1, #8
     2aa:	7219      	strb	r1, [r3, #8]
    flash_ram_buffer[EEPROM_INDEX_DEEP_CHG_CYCLE+1] = (uint8_t)(g_sys_cap.val.deep_chg_cycle_cnt);
     2ac:	8d12      	ldrh	r2, [r2, #40]	; 0x28
     2ae:	725a      	strb	r2, [r3, #9]
    
    //0819
    flash_ram_buffer[EEPROM_INDEX_SYS_ERR] = (uint8_t)(sys_err_flags.VAL>>8);
     2b0:	4a24      	ldr	r2, [pc, #144]	; (344 <EEPROM_Init+0xc8>)
     2b2:	8812      	ldrh	r2, [r2, #0]
     2b4:	0a11      	lsrs	r1, r2, #8
     2b6:	7299      	strb	r1, [r3, #10]
    flash_ram_buffer[EEPROM_INDEX_SYS_ERR+1] = (uint8_t)(sys_err_flags.VAL);
     2b8:	72da      	strb	r2, [r3, #11]
    //20160810ÐÂÔöÀúÊ·ÐÅÏ¢
    flash_ram_buffer[EEPROM_INDEX_HIS_VCELLMIN] = (uint8_t)(g_sys_history.val.vcell_min>>8);
     2ba:	4a23      	ldr	r2, [pc, #140]	; (348 <EEPROM_Init+0xcc>)
     2bc:	8811      	ldrh	r1, [r2, #0]
     2be:	0a09      	lsrs	r1, r1, #8
     2c0:	7319      	strb	r1, [r3, #12]
    flash_ram_buffer[EEPROM_INDEX_HIS_VCELLMIN+1] = (uint8_t)(g_sys_history.val.vcell_min);
     2c2:	8811      	ldrh	r1, [r2, #0]
     2c4:	7359      	strb	r1, [r3, #13]
    flash_ram_buffer[EEPROM_INDEX_HIS_VCELLMAX] = (uint8_t)(g_sys_history.val.vcell_max>>8);
     2c6:	8851      	ldrh	r1, [r2, #2]
     2c8:	0a09      	lsrs	r1, r1, #8
     2ca:	7399      	strb	r1, [r3, #14]
    flash_ram_buffer[EEPROM_INDEX_HIS_VCELLMAX+1] = (uint8_t)(g_sys_history.val.vcell_max);
     2cc:	8851      	ldrh	r1, [r2, #2]
     2ce:	73d9      	strb	r1, [r3, #15]

    flash_ram_buffer[EEPROM_INDEX_HIS_TEMPMIN] = (uint8_t)(g_sys_history.val.bat_temp_min);
     2d0:	7911      	ldrb	r1, [r2, #4]
     2d2:	7419      	strb	r1, [r3, #16]
    flash_ram_buffer[EEPROM_INDEX_HIS_TEMPMAX] = (uint8_t)(g_sys_history.val.bat_temp_max);
     2d4:	7951      	ldrb	r1, [r2, #5]
     2d6:	7459      	strb	r1, [r3, #17]
    
    flash_ram_buffer[EEPROM_INDEX_HIS_DCHCMAX] = (uint8_t)(g_sys_history.val.dch_cur_max>>8);
     2d8:	88d1      	ldrh	r1, [r2, #6]
     2da:	0a09      	lsrs	r1, r1, #8
     2dc:	7499      	strb	r1, [r3, #18]
    flash_ram_buffer[EEPROM_INDEX_HIS_DCHCMAX+1] = (uint8_t)(g_sys_history.val.dch_cur_max);
     2de:	88d1      	ldrh	r1, [r2, #6]
     2e0:	74d9      	strb	r1, [r3, #19]
    flash_ram_buffer[EEPROM_INDEX_HIS_CHGCMAX] = (uint8_t)(g_sys_history.val.chg_cur_max>>8);
     2e2:	8911      	ldrh	r1, [r2, #8]
     2e4:	0a09      	lsrs	r1, r1, #8
     2e6:	7519      	strb	r1, [r3, #20]
    flash_ram_buffer[EEPROM_INDEX_HIS_CHGCMAX+1] = (uint8_t)(g_sys_history.val.chg_cur_max);
     2e8:	8911      	ldrh	r1, [r2, #8]
     2ea:	7559      	strb	r1, [r3, #21]
    
    flash_ram_buffer[EEPROM_INDEX_HIS_SOC_MAX] = (uint8_t)(g_sys_history.val.soc_max>>8);
     2ec:	8951      	ldrh	r1, [r2, #10]
     2ee:	0a09      	lsrs	r1, r1, #8
     2f0:	7599      	strb	r1, [r3, #22]
    flash_ram_buffer[EEPROM_INDEX_HIS_SOC_MAX+1] = (uint8_t)(g_sys_history.val.soc_max);
     2f2:	8951      	ldrh	r1, [r2, #10]
     2f4:	75d9      	strb	r1, [r3, #23]
    flash_ram_buffer[EEPROM_INDEX_HIS_PCBTEMPMAX] = (uint8_t)(g_sys_history.val.pcb_temp_max>>8);
     2f6:	7b12      	ldrb	r2, [r2, #12]
     2f8:	b252      	sxtb	r2, r2
     2fa:	1212      	asrs	r2, r2, #8
     2fc:	761a      	strb	r2, [r3, #24]
     2fe:	001a      	movs	r2, r3
     300:	3319      	adds	r3, #25
     302:	0019      	movs	r1, r3

void EEPROM_Init(void)
{
    uint8_t i;
    uint8_t block_crc;
    block_crc =0;
     304:	2300      	movs	r3, #0
    flash_ram_buffer[EEPROM_INDEX_HIS_SOC_MAX+1] = (uint8_t)(g_sys_history.val.soc_max);
    flash_ram_buffer[EEPROM_INDEX_HIS_PCBTEMPMAX] = (uint8_t)(g_sys_history.val.pcb_temp_max>>8);
    
    for(i=0;i<EEPROM_INDEX_CRC;i++)
    {
	    block_crc += flash_ram_buffer[i];
     306:	7810      	ldrb	r0, [r2, #0]
     308:	181b      	adds	r3, r3, r0
     30a:	b2db      	uxtb	r3, r3
     30c:	3201      	adds	r2, #1
    
    flash_ram_buffer[EEPROM_INDEX_HIS_SOC_MAX] = (uint8_t)(g_sys_history.val.soc_max>>8);
    flash_ram_buffer[EEPROM_INDEX_HIS_SOC_MAX+1] = (uint8_t)(g_sys_history.val.soc_max);
    flash_ram_buffer[EEPROM_INDEX_HIS_PCBTEMPMAX] = (uint8_t)(g_sys_history.val.pcb_temp_max>>8);
    
    for(i=0;i<EEPROM_INDEX_CRC;i++)
     30e:	428a      	cmp	r2, r1
     310:	d1f9      	bne.n	306 <EEPROM_Init+0x8a>
    {
	    block_crc += flash_ram_buffer[i];
    }
    flash_ram_buffer[EEPROM_INDEX_CRC] = block_crc;
     312:	4c09      	ldr	r4, [pc, #36]	; (338 <EEPROM_Init+0xbc>)
     314:	7663      	strb	r3, [r4, #25]
	
	Bsp_Erase_Row(EEPROM_SYS_BEGIN);
     316:	4d0d      	ldr	r5, [pc, #52]	; (34c <EEPROM_Init+0xd0>)
     318:	0028      	movs	r0, r5
     31a:	4f0d      	ldr	r7, [pc, #52]	; (350 <EEPROM_Init+0xd4>)
     31c:	47b8      	blx	r7
	Bsp_Erase_Row(EEPROM_SYS_BK_BEGIN);
     31e:	4e0d      	ldr	r6, [pc, #52]	; (354 <EEPROM_Init+0xd8>)
     320:	0030      	movs	r0, r6
     322:	47b8      	blx	r7
	
	Bsp_Write_Buffer(EEPROM_SYS_BEGIN,flash_ram_buffer,EEPROM_SYS_DATA_LEN);
     324:	221a      	movs	r2, #26
     326:	0021      	movs	r1, r4
     328:	0028      	movs	r0, r5
     32a:	4d0b      	ldr	r5, [pc, #44]	; (358 <EEPROM_Init+0xdc>)
     32c:	47a8      	blx	r5
	Bsp_Write_Buffer(EEPROM_SYS_BK_BEGIN,flash_ram_buffer,EEPROM_SYS_DATA_LEN);
     32e:	221a      	movs	r2, #26
     330:	0021      	movs	r1, r4
     332:	0030      	movs	r0, r6
     334:	47a8      	blx	r5

     336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     338:	20000278 	.word	0x20000278
     33c:	20000254 	.word	0x20000254
     340:	20000228 	.word	0x20000228
     344:	2000026c 	.word	0x2000026c
     348:	2000025c 	.word	0x2000025c
     34c:	0003fe00 	.word	0x0003fe00
     350:	0000014d 	.word	0x0000014d
     354:	0003ff00 	.word	0x0003ff00
     358:	00000161 	.word	0x00000161

0000035c <EEPROM_BACKUP_READ>:
  * @param  None
  * @retval None
  */

void EEPROM_BACKUP_READ(void)
{
     35c:	b510      	push	{r4, lr}
   uint8_t i;
   uint8_t block_crc;
   Bsp_Read_Buffer(EEPROM_SYS_BK_BEGIN,flash_ram_buffer,EEPROM_SYS_DATA_LEN);
     35e:	4c10      	ldr	r4, [pc, #64]	; (3a0 <EEPROM_BACKUP_READ+0x44>)
     360:	221a      	movs	r2, #26
     362:	0021      	movs	r1, r4
     364:	480f      	ldr	r0, [pc, #60]	; (3a4 <EEPROM_BACKUP_READ+0x48>)
     366:	4b10      	ldr	r3, [pc, #64]	; (3a8 <EEPROM_BACKUP_READ+0x4c>)
     368:	4798      	blx	r3
   if(flash_ram_buffer[0] == 0xB3)
     36a:	7823      	ldrb	r3, [r4, #0]
     36c:	2bb3      	cmp	r3, #179	; 0xb3
     36e:	d113      	bne.n	398 <EEPROM_BACKUP_READ+0x3c>
     370:	4a0b      	ldr	r2, [pc, #44]	; (3a0 <EEPROM_BACKUP_READ+0x44>)
     372:	0010      	movs	r0, r2
     374:	3019      	adds	r0, #25
     376:	2300      	movs	r3, #0
   {
	   block_crc =0;
	   for(i=0;i<EEPROM_INDEX_CRC;i++)
	   {
		   block_crc += flash_ram_buffer[i];
     378:	7811      	ldrb	r1, [r2, #0]
     37a:	185b      	adds	r3, r3, r1
     37c:	b2db      	uxtb	r3, r3
     37e:	3201      	adds	r2, #1
   uint8_t block_crc;
   Bsp_Read_Buffer(EEPROM_SYS_BK_BEGIN,flash_ram_buffer,EEPROM_SYS_DATA_LEN);
   if(flash_ram_buffer[0] == 0xB3)
   {
	   block_crc =0;
	   for(i=0;i<EEPROM_INDEX_CRC;i++)
     380:	4282      	cmp	r2, r0
     382:	d1f9      	bne.n	378 <EEPROM_BACKUP_READ+0x1c>
	   {
		   block_crc += flash_ram_buffer[i];
	   }
	   if(block_crc == flash_ram_buffer[EEPROM_INDEX_CRC])
     384:	4a06      	ldr	r2, [pc, #24]	; (3a0 <EEPROM_BACKUP_READ+0x44>)
     386:	7e52      	ldrb	r2, [r2, #25]
     388:	429a      	cmp	r2, r3
     38a:	d102      	bne.n	392 <EEPROM_BACKUP_READ+0x36>
	   {
		   EEPROM_To_RAM();
     38c:	4b07      	ldr	r3, [pc, #28]	; (3ac <EEPROM_BACKUP_READ+0x50>)
     38e:	4798      	blx	r3
     390:	e004      	b.n	39c <EEPROM_BACKUP_READ+0x40>
		   //iap_vision <<=8;
		   //iap_vision |=  DATAEE_BK_ReadByte(EEPROM_INDEX_VISION+1); //DATAEE_ReadByte
	   }
	   else
	   {
		   EEPROM_Init();
     392:	4b07      	ldr	r3, [pc, #28]	; (3b0 <EEPROM_BACKUP_READ+0x54>)
     394:	4798      	blx	r3
     396:	e001      	b.n	39c <EEPROM_BACKUP_READ+0x40>
	   }
   }
   else
   {
	   EEPROM_Init();
     398:	4b05      	ldr	r3, [pc, #20]	; (3b0 <EEPROM_BACKUP_READ+0x54>)
     39a:	4798      	blx	r3
   }
}
     39c:	bd10      	pop	{r4, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	20000278 	.word	0x20000278
     3a4:	0003ff00 	.word	0x0003ff00
     3a8:	0000017d 	.word	0x0000017d
     3ac:	00000199 	.word	0x00000199
     3b0:	0000027d 	.word	0x0000027d

000003b4 <SYS_EEPROM_Init>:
  * @param  None
  * @retval None
  */

void SYS_EEPROM_Init(void)
{
     3b4:	b510      	push	{r4, lr}
	uint8_t i;
	uint8_t block_crc;
   
	Bsp_Read_Buffer(EEPROM_SYS_BEGIN,flash_ram_buffer,EEPROM_SYS_DATA_LEN);
     3b6:	4c10      	ldr	r4, [pc, #64]	; (3f8 <SYS_EEPROM_Init+0x44>)
     3b8:	221a      	movs	r2, #26
     3ba:	0021      	movs	r1, r4
     3bc:	480f      	ldr	r0, [pc, #60]	; (3fc <SYS_EEPROM_Init+0x48>)
     3be:	4b10      	ldr	r3, [pc, #64]	; (400 <SYS_EEPROM_Init+0x4c>)
     3c0:	4798      	blx	r3
	//FLASH¿é¶ÁÈ¡
	if(flash_ram_buffer[0] == 0xB3)
     3c2:	7823      	ldrb	r3, [r4, #0]
     3c4:	2bb3      	cmp	r3, #179	; 0xb3
     3c6:	d113      	bne.n	3f0 <SYS_EEPROM_Init+0x3c>
     3c8:	4a0b      	ldr	r2, [pc, #44]	; (3f8 <SYS_EEPROM_Init+0x44>)
     3ca:	0010      	movs	r0, r2
     3cc:	3019      	adds	r0, #25
     3ce:	2300      	movs	r3, #0
		//ÅÐ¶Ï¿é1,²»Õý³£ÅÐ¶Ï±¸·Ý¿é4
		//BLOCK1·ÖÅä£ºHEAD+FULLCAp*2+CYCLES*2+CRC
		block_crc =0;
		for(i=0;i<EEPROM_INDEX_CRC;i++)
		{
			block_crc += flash_ram_buffer[i];
     3d0:	7811      	ldrb	r1, [r2, #0]
     3d2:	185b      	adds	r3, r3, r1
     3d4:	b2db      	uxtb	r3, r3
     3d6:	3201      	adds	r2, #1
	if(flash_ram_buffer[0] == 0xB3)
	{
		//ÅÐ¶Ï¿é1,²»Õý³£ÅÐ¶Ï±¸·Ý¿é4
		//BLOCK1·ÖÅä£ºHEAD+FULLCAp*2+CYCLES*2+CRC
		block_crc =0;
		for(i=0;i<EEPROM_INDEX_CRC;i++)
     3d8:	4282      	cmp	r2, r0
     3da:	d1f9      	bne.n	3d0 <SYS_EEPROM_Init+0x1c>
		{
			block_crc += flash_ram_buffer[i];
		}
		if(block_crc == flash_ram_buffer[EEPROM_INDEX_CRC])
     3dc:	4a06      	ldr	r2, [pc, #24]	; (3f8 <SYS_EEPROM_Init+0x44>)
     3de:	7e52      	ldrb	r2, [r2, #25]
     3e0:	429a      	cmp	r2, r3
     3e2:	d102      	bne.n	3ea <SYS_EEPROM_Init+0x36>
		{
			EEPROM_To_RAM();
     3e4:	4b07      	ldr	r3, [pc, #28]	; (404 <SYS_EEPROM_Init+0x50>)
     3e6:	4798      	blx	r3
     3e8:	e004      	b.n	3f4 <SYS_EEPROM_Init+0x40>
			//iap_vision <<=8;
			//iap_vision |=  DATAEE_ReadByte(EEPROM_INDEX_VISION+1); //DATAEE_ReadByte
		}
		else
		{
			EEPROM_BACKUP_READ();
     3ea:	4b07      	ldr	r3, [pc, #28]	; (408 <SYS_EEPROM_Init+0x54>)
     3ec:	4798      	blx	r3
     3ee:	e001      	b.n	3f4 <SYS_EEPROM_Init+0x40>
		}

	}
	else
	{
		EEPROM_BACKUP_READ();
     3f0:	4b05      	ldr	r3, [pc, #20]	; (408 <SYS_EEPROM_Init+0x54>)
     3f2:	4798      	blx	r3
	}
}
     3f4:	bd10      	pop	{r4, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	20000278 	.word	0x20000278
     3fc:	0003fe00 	.word	0x0003fe00
     400:	0000017d 	.word	0x0000017d
     404:	00000199 	.word	0x00000199
     408:	0000035d 	.word	0x0000035d

0000040c <PowerOn_Init>:
  * @param  None
  * @retval None
  */

void PowerOn_Init(void)
{
     40c:	b570      	push	{r4, r5, r6, lr}
    sys_flags.VAL =0;
     40e:	4813      	ldr	r0, [pc, #76]	; (45c <PowerOn_Init+0x50>)
     410:	2300      	movs	r3, #0
     412:	2100      	movs	r1, #0
    sys_states.VAL =0;
     414:	4d12      	ldr	r5, [pc, #72]	; (460 <PowerOn_Init+0x54>)
    afe_flags.VAL =0;
     416:	4a13      	ldr	r2, [pc, #76]	; (464 <PowerOn_Init+0x58>)
     418:	8013      	strh	r3, [r2, #0]
    flash_flags.VAL =0;
     41a:	4a13      	ldr	r2, [pc, #76]	; (468 <PowerOn_Init+0x5c>)
     41c:	8013      	strh	r3, [r2, #0]
    sys_err_flags.VAL =0;
     41e:	4a13      	ldr	r2, [pc, #76]	; (46c <PowerOn_Init+0x60>)
     420:	8013      	strh	r3, [r2, #0]
	cap_update = BAT_NORMAL_CAP;
     422:	4c13      	ldr	r4, [pc, #76]	; (470 <PowerOn_Init+0x64>)
     424:	4a13      	ldr	r2, [pc, #76]	; (474 <PowerOn_Init+0x68>)
     426:	8014      	strh	r4, [r2, #0]
	
    sys_states.val.sys_sw_nconnect_flag=1;//zzy20161021 ³õÊ¼ÖµÎª¶Ï¿ªÁ¬½Ó
     428:	2240      	movs	r2, #64	; 0x40
     42a:	706a      	strb	r2, [r5, #1]
    g_sys_cap.val.cycle_record_flag =0;
     42c:	4a12      	ldr	r2, [pc, #72]	; (478 <PowerOn_Init+0x6c>)
     42e:	7611      	strb	r1, [r2, #24]
    sys_flags.val.afe_connect_flag =1;
     430:	2401      	movs	r4, #1
     432:	7004      	strb	r4, [r0, #0]
    sys_states.val.sys_dch_on =0;
    sys_states.val.sys_chg_on =0;
     434:	2600      	movs	r6, #0
     436:	702e      	strb	r6, [r5, #0]
    sys_flags.val.afe_adirq2_flag = 1;
     438:	7044      	strb	r4, [r0, #1]
    g_sys_cap.val.cap_cnt =0;
     43a:	6213      	str	r3, [r2, #32]
    g_sys_cap.val.bat_cycle_cnt =0;
     43c:	8493      	strh	r3, [r2, #36]	; 0x24
    g_sys_cap.val.re_cap_rate_sum =0;
     43e:	75d1      	strb	r1, [r2, #23]
    g_sys_cap.val.deep_rate_sum =0;
     440:	7691      	strb	r1, [r2, #26]
	
	//ÀúÊ·ÐÅÏ¢³õÊ¼»¯,ÎªÁË·½±ãÅÐ¶Ï,³õÊ¼»¯È«²¿ÅäÖÃ¼«ÏÞÖµ
	g_sys_history.val.bat_temp_max =0;
     442:	4a0e      	ldr	r2, [pc, #56]	; (47c <PowerOn_Init+0x70>)
     444:	7151      	strb	r1, [r2, #5]
	g_sys_history.val.bat_temp_min =100;
     446:	2064      	movs	r0, #100	; 0x64
     448:	7110      	strb	r0, [r2, #4]
	g_sys_history.val.chg_cur_max =0;
     44a:	8113      	strh	r3, [r2, #8]
	g_sys_history.val.dch_cur_max =0;
     44c:	80d3      	strh	r3, [r2, #6]
	g_sys_history.val.pcb_temp_max =0;
     44e:	7311      	strb	r1, [r2, #12]
	g_sys_history.val.soc_max =0;
     450:	8153      	strh	r3, [r2, #10]
	g_sys_history.val.vcell_max =0;
     452:	8053      	strh	r3, [r2, #2]
	g_sys_history.val.vcell_min =0xffff;
     454:	3b01      	subs	r3, #1
     456:	8013      	strh	r3, [r2, #0]
     458:	bd70      	pop	{r4, r5, r6, pc}
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	20000258 	.word	0x20000258
     460:	20000294 	.word	0x20000294
     464:	20000274 	.word	0x20000274
     468:	20000270 	.word	0x20000270
     46c:	2000026c 	.word	0x2000026c
     470:	fffff618 	.word	0xfffff618
     474:	20000254 	.word	0x20000254
     478:	20000228 	.word	0x20000228
     47c:	2000025c 	.word	0x2000025c

00000480 <SPI_Slave_Low>:
  * @param  None
  * @retval None
  */

void SPI_Slave_Low(void)
{
     480:	b510      	push	{r4, lr}
	spi_select_slave(&spi_master_instance, &slave, true);
     482:	2201      	movs	r2, #1
     484:	4902      	ldr	r1, [pc, #8]	; (490 <SPI_Slave_Low+0x10>)
     486:	4803      	ldr	r0, [pc, #12]	; (494 <SPI_Slave_Low+0x14>)
     488:	4b03      	ldr	r3, [pc, #12]	; (498 <SPI_Slave_Low+0x18>)
     48a:	4798      	blx	r3
}
     48c:	bd10      	pop	{r4, pc}
     48e:	46c0      	nop			; (mov r8, r8)
     490:	2000018c 	.word	0x2000018c
     494:	20000180 	.word	0x20000180
     498:	000011f9 	.word	0x000011f9

0000049c <Configure_Spi_Master>:
  * @param  None
  * @retval None
  */

void Configure_Spi_Master(void)
{
     49c:	b530      	push	{r4, r5, lr}
     49e:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     4a0:	4c2b      	ldr	r4, [pc, #172]	; (550 <Configure_Spi_Master+0xb4>)
     4a2:	2311      	movs	r3, #17
     4a4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     4a6:	2300      	movs	r3, #0
     4a8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     4aa:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     4ac:	2201      	movs	r2, #1
     4ae:	4669      	mov	r1, sp
     4b0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     4b2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     4b4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     4b6:	2011      	movs	r0, #17
     4b8:	4b26      	ldr	r3, [pc, #152]	; (554 <Configure_Spi_Master+0xb8>)
     4ba:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     4bc:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     4be:	09da      	lsrs	r2, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     4c0:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     4c2:	2a00      	cmp	r2, #0
     4c4:	d105      	bne.n	4d2 <Configure_Spi_Master+0x36>
		return &(ports[port_index]->Group[group_index]);
     4c6:	0959      	lsrs	r1, r3, #5
     4c8:	01c9      	lsls	r1, r1, #7
     4ca:	2282      	movs	r2, #130	; 0x82
     4cc:	05d2      	lsls	r2, r2, #23
     4ce:	4694      	mov	ip, r2
     4d0:	4461      	add	r1, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     4d2:	221f      	movs	r2, #31
     4d4:	4013      	ands	r3, r2
     4d6:	3a1e      	subs	r2, #30
     4d8:	0010      	movs	r0, r2
     4da:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     4dc:	6188      	str	r0, [r1, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     4de:	ac02      	add	r4, sp, #8
     4e0:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     4e2:	2300      	movs	r3, #0
     4e4:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     4e6:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     4e8:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     4ea:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     4ec:	74a2      	strb	r2, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     4ee:	74e2      	strb	r2, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     4f0:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     4f2:	3223      	adds	r2, #35	; 0x23
     4f4:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     4f6:	3a18      	subs	r2, #24
     4f8:	2100      	movs	r1, #0
     4fa:	a808      	add	r0, sp, #32
     4fc:	4b16      	ldr	r3, [pc, #88]	; (558 <Configure_Spi_Master+0xbc>)
     4fe:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     500:	4b16      	ldr	r3, [pc, #88]	; (55c <Configure_Spi_Master+0xc0>)
     502:	61a3      	str	r3, [r4, #24]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = CONF_MASTER_SS_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
     504:	2380      	movs	r3, #128	; 0x80
     506:	025b      	lsls	r3, r3, #9
     508:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
     50a:	4b15      	ldr	r3, [pc, #84]	; (560 <Configure_Spi_Master+0xc4>)
     50c:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
     50e:	2301      	movs	r3, #1
     510:	425b      	negs	r3, r3
     512:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
     514:	4b13      	ldr	r3, [pc, #76]	; (564 <Configure_Spi_Master+0xc8>)
     516:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
     518:	4b13      	ldr	r3, [pc, #76]	; (568 <Configure_Spi_Master+0xcc>)
     51a:	6363      	str	r3, [r4, #52]	; 0x34
	
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
     51c:	4d13      	ldr	r5, [pc, #76]	; (56c <Configure_Spi_Master+0xd0>)
     51e:	0022      	movs	r2, r4
     520:	4913      	ldr	r1, [pc, #76]	; (570 <Configure_Spi_Master+0xd4>)
     522:	0028      	movs	r0, r5
     524:	4b13      	ldr	r3, [pc, #76]	; (574 <Configure_Spi_Master+0xd8>)
     526:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     528:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     52a:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     52c:	2b00      	cmp	r3, #0
     52e:	d1fc      	bne.n	52a <Configure_Spi_Master+0x8e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     530:	6811      	ldr	r1, [r2, #0]
     532:	3302      	adds	r3, #2
     534:	430b      	orrs	r3, r1
     536:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
	SPI_Slave_Low();
     538:	4b0f      	ldr	r3, [pc, #60]	; (578 <Configure_Spi_Master+0xdc>)
     53a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     53c:	a901      	add	r1, sp, #4
     53e:	2300      	movs	r3, #0
     540:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
     542:	708b      	strb	r3, [r1, #2]
	
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     544:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(SDI_PIN, &pin_conf);
     546:	2030      	movs	r0, #48	; 0x30
     548:	4b02      	ldr	r3, [pc, #8]	; (554 <Configure_Spi_Master+0xb8>)
     54a:	4798      	blx	r3
}
     54c:	b011      	add	sp, #68	; 0x44
     54e:	bd30      	pop	{r4, r5, pc}
     550:	2000018c 	.word	0x2000018c
     554:	000009dd 	.word	0x000009dd
     558:	00002233 	.word	0x00002233
     55c:	000186a0 	.word	0x000186a0
     560:	00100002 	.word	0x00100002
     564:	00120002 	.word	0x00120002
     568:	00130002 	.word	0x00130002
     56c:	20000180 	.word	0x20000180
     570:	42000800 	.word	0x42000800
     574:	00000ed1 	.word	0x00000ed1
     578:	00000481 	.word	0x00000481

0000057c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     57c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     57e:	2000      	movs	r0, #0
     580:	4b08      	ldr	r3, [pc, #32]	; (5a4 <delay_init+0x28>)
     582:	4798      	blx	r3
     584:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     586:	4c08      	ldr	r4, [pc, #32]	; (5a8 <delay_init+0x2c>)
     588:	21fa      	movs	r1, #250	; 0xfa
     58a:	0089      	lsls	r1, r1, #2
     58c:	47a0      	blx	r4
     58e:	4b07      	ldr	r3, [pc, #28]	; (5ac <delay_init+0x30>)
     590:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     592:	4907      	ldr	r1, [pc, #28]	; (5b0 <delay_init+0x34>)
     594:	0028      	movs	r0, r5
     596:	47a0      	blx	r4
     598:	4b06      	ldr	r3, [pc, #24]	; (5b4 <delay_init+0x38>)
     59a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     59c:	2205      	movs	r2, #5
     59e:	4b06      	ldr	r3, [pc, #24]	; (5b8 <delay_init+0x3c>)
     5a0:	601a      	str	r2, [r3, #0]
}
     5a2:	bd70      	pop	{r4, r5, r6, pc}
     5a4:	00001cfd 	.word	0x00001cfd
     5a8:	00002065 	.word	0x00002065
     5ac:	20000004 	.word	0x20000004
     5b0:	000f4240 	.word	0x000f4240
     5b4:	20000000 	.word	0x20000000
     5b8:	e000e010 	.word	0xe000e010

000005bc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     5bc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     5be:	2200      	movs	r2, #0
     5c0:	4b15      	ldr	r3, [pc, #84]	; (618 <EIC_Handler+0x5c>)
     5c2:	701a      	strb	r2, [r3, #0]
     5c4:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     5c6:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     5c8:	4e14      	ldr	r6, [pc, #80]	; (61c <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     5ca:	4c13      	ldr	r4, [pc, #76]	; (618 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     5cc:	2b1f      	cmp	r3, #31
     5ce:	d919      	bls.n	604 <EIC_Handler+0x48>
     5d0:	e00f      	b.n	5f2 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     5d2:	2100      	movs	r1, #0
     5d4:	e000      	b.n	5d8 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     5d6:	4912      	ldr	r1, [pc, #72]	; (620 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     5d8:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     5da:	009b      	lsls	r3, r3, #2
     5dc:	599b      	ldr	r3, [r3, r6]
     5de:	2b00      	cmp	r3, #0
     5e0:	d000      	beq.n	5e4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     5e2:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     5e4:	7823      	ldrb	r3, [r4, #0]
     5e6:	3301      	adds	r3, #1
     5e8:	b2db      	uxtb	r3, r3
     5ea:	7023      	strb	r3, [r4, #0]
     5ec:	2b0f      	cmp	r3, #15
     5ee:	d9ed      	bls.n	5cc <EIC_Handler+0x10>
     5f0:	e011      	b.n	616 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     5f2:	0029      	movs	r1, r5
     5f4:	4019      	ands	r1, r3
     5f6:	2201      	movs	r2, #1
     5f8:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     5fa:	2100      	movs	r1, #0
     5fc:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     5fe:	4211      	tst	r1, r2
     600:	d1e7      	bne.n	5d2 <EIC_Handler+0x16>
     602:	e7ef      	b.n	5e4 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     604:	0029      	movs	r1, r5
     606:	4019      	ands	r1, r3
     608:	2201      	movs	r2, #1
     60a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     60c:	4904      	ldr	r1, [pc, #16]	; (620 <EIC_Handler+0x64>)
     60e:	6949      	ldr	r1, [r1, #20]
     610:	4211      	tst	r1, r2
     612:	d1e0      	bne.n	5d6 <EIC_Handler+0x1a>
     614:	e7e6      	b.n	5e4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     616:	bd70      	pop	{r4, r5, r6, pc}
     618:	2000018f 	.word	0x2000018f
     61c:	20000190 	.word	0x20000190
     620:	40002800 	.word	0x40002800

00000624 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     624:	4a06      	ldr	r2, [pc, #24]	; (640 <_extint_enable+0x1c>)
     626:	7811      	ldrb	r1, [r2, #0]
     628:	2302      	movs	r3, #2
     62a:	430b      	orrs	r3, r1
     62c:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     62e:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     630:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     632:	6853      	ldr	r3, [r2, #4]
     634:	4219      	tst	r1, r3
     636:	d1fc      	bne.n	632 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     638:	6853      	ldr	r3, [r2, #4]
     63a:	4218      	tst	r0, r3
     63c:	d1f9      	bne.n	632 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     63e:	4770      	bx	lr
     640:	40002800 	.word	0x40002800

00000644 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     644:	b500      	push	{lr}
     646:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     648:	4a18      	ldr	r2, [pc, #96]	; (6ac <_system_extint_init+0x68>)
     64a:	6953      	ldr	r3, [r2, #20]
     64c:	2180      	movs	r1, #128	; 0x80
     64e:	00c9      	lsls	r1, r1, #3
     650:	430b      	orrs	r3, r1
     652:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     654:	a901      	add	r1, sp, #4
     656:	2300      	movs	r3, #0
     658:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     65a:	2002      	movs	r0, #2
     65c:	4b14      	ldr	r3, [pc, #80]	; (6b0 <_system_extint_init+0x6c>)
     65e:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     660:	2002      	movs	r0, #2
     662:	4b14      	ldr	r3, [pc, #80]	; (6b4 <_system_extint_init+0x70>)
     664:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     666:	4a14      	ldr	r2, [pc, #80]	; (6b8 <_system_extint_init+0x74>)
     668:	7811      	ldrb	r1, [r2, #0]
     66a:	2301      	movs	r3, #1
     66c:	430b      	orrs	r3, r1
     66e:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     670:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     672:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     674:	6853      	ldr	r3, [r2, #4]
     676:	4219      	tst	r1, r3
     678:	d1fc      	bne.n	674 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     67a:	6853      	ldr	r3, [r2, #4]
     67c:	4218      	tst	r0, r3
     67e:	d009      	beq.n	694 <_system_extint_init+0x50>
     680:	e7f8      	b.n	674 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     682:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     684:	428b      	cmp	r3, r1
     686:	d1fc      	bne.n	682 <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     688:	2208      	movs	r2, #8
     68a:	4b0c      	ldr	r3, [pc, #48]	; (6bc <_system_extint_init+0x78>)
     68c:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     68e:	4b0c      	ldr	r3, [pc, #48]	; (6c0 <_system_extint_init+0x7c>)
     690:	4798      	blx	r3
}
     692:	e009      	b.n	6a8 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     694:	4a08      	ldr	r2, [pc, #32]	; (6b8 <_system_extint_init+0x74>)
     696:	7813      	ldrb	r3, [r2, #0]
     698:	2110      	movs	r1, #16
     69a:	438b      	bics	r3, r1
     69c:	7013      	strb	r3, [r2, #0]
     69e:	4b09      	ldr	r3, [pc, #36]	; (6c4 <_system_extint_init+0x80>)
     6a0:	0019      	movs	r1, r3
     6a2:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     6a4:	2200      	movs	r2, #0
     6a6:	e7ec      	b.n	682 <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     6a8:	b003      	add	sp, #12
     6aa:	bd00      	pop	{pc}
     6ac:	40000800 	.word	0x40000800
     6b0:	00001dd9 	.word	0x00001dd9
     6b4:	00001d69 	.word	0x00001d69
     6b8:	40002800 	.word	0x40002800
     6bc:	e000e100 	.word	0xe000e100
     6c0:	00000625 	.word	0x00000625
     6c4:	20000190 	.word	0x20000190

000006c8 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     6c8:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     6ca:	4a1f      	ldr	r2, [pc, #124]	; (748 <nvm_set_config+0x80>)
     6cc:	6991      	ldr	r1, [r2, #24]
     6ce:	2304      	movs	r3, #4
     6d0:	430b      	orrs	r3, r1
     6d2:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     6d4:	4b1d      	ldr	r3, [pc, #116]	; (74c <nvm_set_config+0x84>)
     6d6:	2220      	movs	r2, #32
     6d8:	32ff      	adds	r2, #255	; 0xff
     6da:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     6dc:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     6de:	2305      	movs	r3, #5

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     6e0:	07d2      	lsls	r2, r2, #31
     6e2:	d52e      	bpl.n	742 <nvm_set_config+0x7a>
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#else
	uint8_t cache_disable_value =  0;
	if (config->disable_rww_cache == false) {
     6e4:	7903      	ldrb	r3, [r0, #4]
		cache_disable_value = 0x02;
     6e6:	2402      	movs	r4, #2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#else
	uint8_t cache_disable_value =  0;
	if (config->disable_rww_cache == false) {
     6e8:	2b00      	cmp	r3, #0
     6ea:	d000      	beq.n	6ee <nvm_set_config+0x26>
		cache_disable_value = 0x02;
	} else {
		cache_disable_value = (config->disable_cache & 0x01);
     6ec:	78c4      	ldrb	r4, [r0, #3]
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     6ee:	7803      	ldrb	r3, [r0, #0]
     6f0:	021b      	lsls	r3, r3, #8
     6f2:	22c0      	movs	r2, #192	; 0xc0
     6f4:	0092      	lsls	r2, r2, #2
     6f6:	4013      	ands	r3, r2
     6f8:	7842      	ldrb	r2, [r0, #1]
     6fa:	01d2      	lsls	r2, r2, #7
     6fc:	21ff      	movs	r1, #255	; 0xff
     6fe:	400a      	ands	r2, r1
     700:	4313      	orrs	r3, r2
     702:	0019      	movs	r1, r3
     704:	7882      	ldrb	r2, [r0, #2]
     706:	0052      	lsls	r2, r2, #1
     708:	231e      	movs	r3, #30
     70a:	401a      	ands	r2, r3
     70c:	000b      	movs	r3, r1
     70e:	4313      	orrs	r3, r2
     710:	7942      	ldrb	r2, [r0, #5]
     712:	0412      	lsls	r2, r2, #16
     714:	21c0      	movs	r1, #192	; 0xc0
     716:	0289      	lsls	r1, r1, #10
     718:	400a      	ands	r2, r1
     71a:	4313      	orrs	r3, r2
     71c:	04a4      	lsls	r4, r4, #18
     71e:	4323      	orrs	r3, r4
		cache_disable_value = 0x02;
	} else {
		cache_disable_value = (config->disable_cache & 0x01);
	}
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
     720:	4a0a      	ldr	r2, [pc, #40]	; (74c <nvm_set_config+0x84>)
     722:	6053      	str	r3, [r2, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     724:	6893      	ldr	r3, [r2, #8]
     726:	035b      	lsls	r3, r3, #13
     728:	0f5b      	lsrs	r3, r3, #29
     72a:	4909      	ldr	r1, [pc, #36]	; (750 <nvm_set_config+0x88>)
     72c:	2408      	movs	r4, #8
     72e:	409c      	lsls	r4, r3
     730:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     732:	6893      	ldr	r3, [r2, #8]
     734:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     736:	7843      	ldrb	r3, [r0, #1]
     738:	710b      	strb	r3, [r1, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     73a:	8b13      	ldrh	r3, [r2, #24]
     73c:	05db      	lsls	r3, r3, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
     73e:	0fdb      	lsrs	r3, r3, #31
     740:	011b      	lsls	r3, r3, #4
}
     742:	0018      	movs	r0, r3
     744:	bd10      	pop	{r4, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	40000800 	.word	0x40000800
     74c:	41004000 	.word	0x41004000
     750:	2000008c 	.word	0x2000008c

00000754 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     754:	b530      	push	{r4, r5, lr}
     756:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     758:	4a26      	ldr	r2, [pc, #152]	; (7f4 <nvm_execute_command+0xa0>)
     75a:	8810      	ldrh	r0, [r2, #0]
     75c:	8853      	ldrh	r3, [r2, #2]
     75e:	4343      	muls	r3, r0
     760:	428b      	cmp	r3, r1
     762:	d20b      	bcs.n	77c <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     764:	2280      	movs	r2, #128	; 0x80
     766:	0192      	lsls	r2, r2, #6
     768:	4b23      	ldr	r3, [pc, #140]	; (7f8 <nvm_execute_command+0xa4>)
     76a:	18cb      	adds	r3, r1, r3
     76c:	4293      	cmp	r3, r2
     76e:	d905      	bls.n	77c <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     770:	2018      	movs	r0, #24

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     772:	4a22      	ldr	r2, [pc, #136]	; (7fc <nvm_execute_command+0xa8>)
     774:	4b22      	ldr	r3, [pc, #136]	; (800 <nvm_execute_command+0xac>)
     776:	18cb      	adds	r3, r1, r3
     778:	4293      	cmp	r3, r2
     77a:	d839      	bhi.n	7f0 <nvm_execute_command+0x9c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     77c:	4a21      	ldr	r2, [pc, #132]	; (804 <nvm_execute_command+0xb0>)
     77e:	6855      	ldr	r5, [r2, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
     780:	4b21      	ldr	r3, [pc, #132]	; (808 <nvm_execute_command+0xb4>)
     782:	402b      	ands	r3, r5
     784:	2080      	movs	r0, #128	; 0x80
     786:	02c0      	lsls	r0, r0, #11
     788:	4303      	orrs	r3, r0
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
     78a:	6053      	str	r3, [r2, #4]
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     78c:	2320      	movs	r3, #32
     78e:	33ff      	adds	r3, #255	; 0xff
     790:	8313      	strh	r3, [r2, #24]
     792:	7d13      	ldrb	r3, [r2, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     794:	07db      	lsls	r3, r3, #31
     796:	d402      	bmi.n	79e <nvm_execute_command+0x4a>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     798:	6055      	str	r5, [r2, #4]
		return STATUS_BUSY;
     79a:	2005      	movs	r0, #5
     79c:	e028      	b.n	7f0 <nvm_execute_command+0x9c>
	}

	switch (command) {
     79e:	2c45      	cmp	r4, #69	; 0x45
     7a0:	d815      	bhi.n	7ce <nvm_execute_command+0x7a>
     7a2:	00a3      	lsls	r3, r4, #2
     7a4:	4a19      	ldr	r2, [pc, #100]	; (80c <nvm_execute_command+0xb8>)
     7a6:	58d3      	ldr	r3, [r2, r3]
     7a8:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     7aa:	4b16      	ldr	r3, [pc, #88]	; (804 <nvm_execute_command+0xb0>)
     7ac:	8b1b      	ldrh	r3, [r3, #24]
     7ae:	05db      	lsls	r3, r3, #23
     7b0:	d503      	bpl.n	7ba <nvm_execute_command+0x66>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
     7b2:	4b14      	ldr	r3, [pc, #80]	; (804 <nvm_execute_command+0xb0>)
     7b4:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     7b6:	2010      	movs	r0, #16
     7b8:	e01a      	b.n	7f0 <nvm_execute_command+0x9c>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     7ba:	0889      	lsrs	r1, r1, #2
     7bc:	0049      	lsls	r1, r1, #1
     7be:	4b11      	ldr	r3, [pc, #68]	; (804 <nvm_execute_command+0xb0>)
     7c0:	61d9      	str	r1, [r3, #28]
			break;
     7c2:	e008      	b.n	7d6 <nvm_execute_command+0x82>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     7c4:	0889      	lsrs	r1, r1, #2
     7c6:	0049      	lsls	r1, r1, #1
     7c8:	4b0e      	ldr	r3, [pc, #56]	; (804 <nvm_execute_command+0xb0>)
     7ca:	61d9      	str	r1, [r3, #28]
			break;
     7cc:	e003      	b.n	7d6 <nvm_execute_command+0x82>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
     7ce:	4b0d      	ldr	r3, [pc, #52]	; (804 <nvm_execute_command+0xb0>)
     7d0:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     7d2:	2017      	movs	r0, #23
     7d4:	e00c      	b.n	7f0 <nvm_execute_command+0x9c>
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     7d6:	20a5      	movs	r0, #165	; 0xa5
     7d8:	0200      	lsls	r0, r0, #8
     7da:	4304      	orrs	r4, r0
     7dc:	4b09      	ldr	r3, [pc, #36]	; (804 <nvm_execute_command+0xb0>)
     7de:	801c      	strh	r4, [r3, #0]
     7e0:	0019      	movs	r1, r3

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
     7e2:	2201      	movs	r2, #1
     7e4:	7d0b      	ldrb	r3, [r1, #20]
     7e6:	4213      	tst	r3, r2
     7e8:	d0fc      	beq.n	7e4 <nvm_execute_command+0x90>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
     7ea:	4b06      	ldr	r3, [pc, #24]	; (804 <nvm_execute_command+0xb0>)
     7ec:	605d      	str	r5, [r3, #4]

	return STATUS_OK;
     7ee:	2000      	movs	r0, #0
}
     7f0:	bd30      	pop	{r4, r5, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	2000008c 	.word	0x2000008c
     7f8:	ff7fc000 	.word	0xff7fc000
     7fc:	00001fff 	.word	0x00001fff
     800:	ffc00000 	.word	0xffc00000
     804:	41004000 	.word	0x41004000
     808:	fff3ffff 	.word	0xfff3ffff
     80c:	000029d8 	.word	0x000029d8

00000810 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     812:	4b2d      	ldr	r3, [pc, #180]	; (8c8 <nvm_write_buffer+0xb8>)
     814:	881c      	ldrh	r4, [r3, #0]
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
     816:	885b      	ldrh	r3, [r3, #2]
     818:	4363      	muls	r3, r4
     81a:	4283      	cmp	r3, r0
     81c:	d207      	bcs.n	82e <nvm_write_buffer+0x1e>
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     81e:	2518      	movs	r5, #24

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     820:	4e2a      	ldr	r6, [pc, #168]	; (8cc <nvm_write_buffer+0xbc>)
     822:	4b2b      	ldr	r3, [pc, #172]	; (8d0 <nvm_write_buffer+0xc0>)
     824:	18c3      	adds	r3, r0, r3
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
     826:	2701      	movs	r7, #1

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     828:	42b3      	cmp	r3, r6
     82a:	d901      	bls.n	830 <nvm_write_buffer+0x20>
     82c:	e04a      	b.n	8c4 <nvm_write_buffer+0xb4>
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
     82e:	2700      	movs	r7, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     830:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     832:	2518      	movs	r5, #24
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     834:	4218      	tst	r0, r3
     836:	d145      	bne.n	8c4 <nvm_write_buffer+0xb4>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
     838:	3d01      	subs	r5, #1
	if (destination_address & (_nvm_dev.page_size - 1)) {
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
     83a:	4294      	cmp	r4, r2
     83c:	d342      	bcc.n	8c4 <nvm_write_buffer+0xb4>
     83e:	4b25      	ldr	r3, [pc, #148]	; (8d4 <nvm_write_buffer+0xc4>)
     840:	7d1b      	ldrb	r3, [r3, #20]
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     842:	3d12      	subs	r5, #18

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     844:	07db      	lsls	r3, r3, #31
     846:	d53d      	bpl.n	8c4 <nvm_write_buffer+0xb4>
		return STATUS_BUSY;
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     848:	4c23      	ldr	r4, [pc, #140]	; (8d8 <nvm_write_buffer+0xc8>)
     84a:	4b22      	ldr	r3, [pc, #136]	; (8d4 <nvm_write_buffer+0xc4>)
     84c:	801c      	strh	r4, [r3, #0]
     84e:	001d      	movs	r5, r3

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     850:	2401      	movs	r4, #1
     852:	7d2b      	ldrb	r3, [r5, #20]
     854:	4223      	tst	r3, r4
     856:	d0fc      	beq.n	852 <nvm_write_buffer+0x42>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     858:	2420      	movs	r4, #32
     85a:	34ff      	adds	r4, #255	; 0xff
     85c:	4b1d      	ldr	r3, [pc, #116]	; (8d4 <nvm_write_buffer+0xc4>)
     85e:	831c      	strh	r4, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
     860:	0846      	lsrs	r6, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     862:	2a00      	cmp	r2, #0
     864:	d029      	beq.n	8ba <nvm_write_buffer+0xaa>
     866:	0076      	lsls	r6, r6, #1
     868:	2300      	movs	r3, #0
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     86a:	1e54      	subs	r4, r2, #1
     86c:	46a4      	mov	ip, r4
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     86e:	5ccd      	ldrb	r5, [r1, r3]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     870:	4563      	cmp	r3, ip
     872:	db01      	blt.n	878 <nvm_write_buffer+0x68>
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     874:	b2ac      	uxth	r4, r5
     876:	e003      	b.n	880 <nvm_write_buffer+0x70>

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
			data |= (buffer[i + 1] << 8);
     878:	18cc      	adds	r4, r1, r3
     87a:	7864      	ldrb	r4, [r4, #1]
     87c:	0224      	lsls	r4, r4, #8
     87e:	432c      	orrs	r4, r5
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     880:	8034      	strh	r4, [r6, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     882:	3302      	adds	r3, #2
     884:	b29b      	uxth	r3, r3
     886:	3602      	adds	r6, #2
     888:	429a      	cmp	r2, r3
     88a:	d8f0      	bhi.n	86e <nvm_write_buffer+0x5e>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     88c:	4b0e      	ldr	r3, [pc, #56]	; (8c8 <nvm_write_buffer+0xb8>)
     88e:	791b      	ldrb	r3, [r3, #4]
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     890:	2500      	movs	r5, #0
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     892:	2b00      	cmp	r3, #0
     894:	d116      	bne.n	8c4 <nvm_write_buffer+0xb4>
     896:	2a3f      	cmp	r2, #63	; 0x3f
     898:	d814      	bhi.n	8c4 <nvm_write_buffer+0xb4>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
     89a:	2f00      	cmp	r7, #0
     89c:	d006      	beq.n	8ac <nvm_write_buffer+0x9c>
     89e:	2200      	movs	r2, #0
     8a0:	0001      	movs	r1, r0
     8a2:	201c      	movs	r0, #28
     8a4:	4b0d      	ldr	r3, [pc, #52]	; (8dc <nvm_write_buffer+0xcc>)
     8a6:	4798      	blx	r3
     8a8:	0005      	movs	r5, r0
     8aa:	e00b      	b.n	8c4 <nvm_write_buffer+0xb4>
     8ac:	2200      	movs	r2, #0
     8ae:	0001      	movs	r1, r0
     8b0:	2004      	movs	r0, #4
     8b2:	4b0a      	ldr	r3, [pc, #40]	; (8dc <nvm_write_buffer+0xcc>)
     8b4:	4798      	blx	r3
     8b6:	0005      	movs	r5, r0
     8b8:	e004      	b.n	8c4 <nvm_write_buffer+0xb4>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     8ba:	4b03      	ldr	r3, [pc, #12]	; (8c8 <nvm_write_buffer+0xb8>)
     8bc:	791b      	ldrb	r3, [r3, #4]
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     8be:	2500      	movs	r5, #0
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     8c0:	2b00      	cmp	r3, #0
     8c2:	d0ea      	beq.n	89a <nvm_write_buffer+0x8a>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     8c4:	0028      	movs	r0, r5
     8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8c8:	2000008c 	.word	0x2000008c
     8cc:	00001fff 	.word	0x00001fff
     8d0:	ffc00000 	.word	0xffc00000
     8d4:	41004000 	.word	0x41004000
     8d8:	ffffa544 	.word	0xffffa544
     8dc:	00000755 	.word	0x00000755

000008e0 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     8e0:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     8e2:	4b19      	ldr	r3, [pc, #100]	; (948 <nvm_read_buffer+0x68>)
     8e4:	881c      	ldrh	r4, [r3, #0]
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
	/* Check if the source address is valid */
	if (source_address >
     8e6:	885b      	ldrh	r3, [r3, #2]
     8e8:	4363      	muls	r3, r4
     8ea:	4283      	cmp	r3, r0
     8ec:	d205      	bcs.n	8fa <nvm_read_buffer+0x1a>
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     8ee:	2318      	movs	r3, #24
{
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     8f0:	4e16      	ldr	r6, [pc, #88]	; (94c <nvm_read_buffer+0x6c>)
     8f2:	4d17      	ldr	r5, [pc, #92]	; (950 <nvm_read_buffer+0x70>)
     8f4:	1945      	adds	r5, r0, r5
     8f6:	42b5      	cmp	r5, r6
     8f8:	d823      	bhi.n	942 <nvm_read_buffer+0x62>
		//return STATUS_ERR_BAD_ADDRESS;
	//}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
     8fa:	2317      	movs	r3, #23
	//if (source_address & (_nvm_dev.page_size - 1)) {
		//return STATUS_ERR_BAD_ADDRESS;
	//}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
     8fc:	4294      	cmp	r4, r2
     8fe:	d320      	bcc.n	942 <nvm_read_buffer+0x62>
     900:	4b14      	ldr	r3, [pc, #80]	; (954 <nvm_read_buffer+0x74>)
     902:	7d1c      	ldrb	r4, [r3, #20]
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     904:	2305      	movs	r3, #5

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     906:	07e4      	lsls	r4, r4, #31
     908:	d51b      	bpl.n	942 <nvm_read_buffer+0x62>
		return STATUS_BUSY;
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     90a:	2420      	movs	r4, #32
     90c:	34ff      	adds	r4, #255	; 0xff
     90e:	4b11      	ldr	r3, [pc, #68]	; (954 <nvm_read_buffer+0x74>)
     910:	831c      	strh	r4, [r3, #24]

	uint32_t page_address = source_address / 2;
     912:	0840      	lsrs	r0, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     914:	2a00      	cmp	r2, #0
     916:	d013      	beq.n	940 <nvm_read_buffer+0x60>
     918:	0040      	lsls	r0, r0, #1
     91a:	2500      	movs	r5, #0
		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     91c:	1e56      	subs	r6, r2, #1
     91e:	182b      	adds	r3, r5, r0

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
     920:	881c      	ldrh	r4, [r3, #0]
     922:	b2a4      	uxth	r4, r4

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
     924:	042b      	lsls	r3, r5, #16
     926:	0c1b      	lsrs	r3, r3, #16
     928:	54cc      	strb	r4, [r1, r3]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     92a:	42b3      	cmp	r3, r6
     92c:	da02      	bge.n	934 <nvm_read_buffer+0x54>
			buffer[i + 1] = (data >> 8);
     92e:	18cb      	adds	r3, r1, r3
     930:	0a24      	lsrs	r4, r4, #8
     932:	705c      	strb	r4, [r3, #1]
     934:	3502      	adds	r5, #2

	uint32_t page_address = source_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     936:	b2ab      	uxth	r3, r5
     938:	429a      	cmp	r2, r3
     93a:	d8f0      	bhi.n	91e <nvm_read_buffer+0x3e>
		if (i < (length - 1)) {
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
     93c:	2300      	movs	r3, #0
     93e:	e000      	b.n	942 <nvm_read_buffer+0x62>
     940:	2300      	movs	r3, #0
}
     942:	0018      	movs	r0, r3
     944:	bd70      	pop	{r4, r5, r6, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	2000008c 	.word	0x2000008c
     94c:	00001fff 	.word	0x00001fff
     950:	ffc00000 	.word	0xffc00000
     954:	41004000 	.word	0x41004000

00000958 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     958:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     95a:	4a1a      	ldr	r2, [pc, #104]	; (9c4 <nvm_erase_row+0x6c>)
     95c:	8813      	ldrh	r3, [r2, #0]
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
     95e:	8852      	ldrh	r2, [r2, #2]
     960:	435a      	muls	r2, r3
     962:	4282      	cmp	r2, r0
     964:	d207      	bcs.n	976 <nvm_erase_row+0x1e>
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     966:	2218      	movs	r2, #24

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     968:	4c17      	ldr	r4, [pc, #92]	; (9c8 <nvm_erase_row+0x70>)
     96a:	4918      	ldr	r1, [pc, #96]	; (9cc <nvm_erase_row+0x74>)
     96c:	1841      	adds	r1, r0, r1
     96e:	42a1      	cmp	r1, r4
     970:	d826      	bhi.n	9c0 <nvm_erase_row+0x68>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
     972:	2101      	movs	r1, #1
     974:	e000      	b.n	978 <nvm_erase_row+0x20>
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
     976:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     978:	009b      	lsls	r3, r3, #2
     97a:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
     97c:	2218      	movs	r2, #24
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     97e:	4218      	tst	r0, r3
     980:	d11e      	bne.n	9c0 <nvm_erase_row+0x68>
     982:	4b13      	ldr	r3, [pc, #76]	; (9d0 <nvm_erase_row+0x78>)
     984:	7d1b      	ldrb	r3, [r3, #20]
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     986:	3a13      	subs	r2, #19

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     988:	07db      	lsls	r3, r3, #31
     98a:	d519      	bpl.n	9c0 <nvm_erase_row+0x68>
		return STATUS_BUSY;
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     98c:	4b10      	ldr	r3, [pc, #64]	; (9d0 <nvm_erase_row+0x78>)
     98e:	2220      	movs	r2, #32
     990:	32ff      	adds	r2, #255	; 0xff
     992:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     994:	0880      	lsrs	r0, r0, #2
     996:	0040      	lsls	r0, r0, #1
     998:	61d8      	str	r0, [r3, #28]
		NVM_MEMORY[row_address / 2] = 0x0;
	}
#endif

#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
     99a:	2900      	cmp	r1, #0
     99c:	d101      	bne.n	9a2 <nvm_erase_row+0x4a>
     99e:	4a0d      	ldr	r2, [pc, #52]	; (9d4 <nvm_erase_row+0x7c>)
     9a0:	e000      	b.n	9a4 <nvm_erase_row+0x4c>
     9a2:	4a0d      	ldr	r2, [pc, #52]	; (9d8 <nvm_erase_row+0x80>)
     9a4:	4b0a      	ldr	r3, [pc, #40]	; (9d0 <nvm_erase_row+0x78>)
     9a6:	801a      	strh	r2, [r3, #0]
     9a8:	0019      	movs	r1, r3
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
#endif

	while (!nvm_is_ready()) {
     9aa:	2201      	movs	r2, #1
     9ac:	7d0b      	ldrb	r3, [r1, #20]
     9ae:	4213      	tst	r3, r2
     9b0:	d0fc      	beq.n	9ac <nvm_erase_row+0x54>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     9b2:	4b07      	ldr	r3, [pc, #28]	; (9d0 <nvm_erase_row+0x78>)
     9b4:	8b1a      	ldrh	r2, [r3, #24]
     9b6:	231c      	movs	r3, #28
     9b8:	401a      	ands	r2, r3
		return STATUS_ABORTED;
	}

	return STATUS_OK;
     9ba:	1e50      	subs	r0, r2, #1
     9bc:	4182      	sbcs	r2, r0
     9be:	0092      	lsls	r2, r2, #2
}
     9c0:	0010      	movs	r0, r2
     9c2:	bd10      	pop	{r4, pc}
     9c4:	2000008c 	.word	0x2000008c
     9c8:	00001fff 	.word	0x00001fff
     9cc:	ffc00000 	.word	0xffc00000
     9d0:	41004000 	.word	0x41004000
     9d4:	0000a502 	.word	0x0000a502
     9d8:	0000a51a 	.word	0x0000a51a

000009dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     9dc:	b500      	push	{lr}
     9de:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9e0:	ab01      	add	r3, sp, #4
     9e2:	2280      	movs	r2, #128	; 0x80
     9e4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     9e6:	780a      	ldrb	r2, [r1, #0]
     9e8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     9ea:	784a      	ldrb	r2, [r1, #1]
     9ec:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     9ee:	788a      	ldrb	r2, [r1, #2]
     9f0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     9f2:	0019      	movs	r1, r3
     9f4:	4b01      	ldr	r3, [pc, #4]	; (9fc <port_pin_set_config+0x20>)
     9f6:	4798      	blx	r3
}
     9f8:	b003      	add	sp, #12
     9fa:	bd00      	pop	{pc}
     9fc:	00001ed5 	.word	0x00001ed5

00000a00 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a00:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a02:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a04:	2340      	movs	r3, #64	; 0x40
     a06:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a08:	4281      	cmp	r1, r0
     a0a:	d201      	bcs.n	a10 <_sercom_get_sync_baud_val+0x10>
     a0c:	e00a      	b.n	a24 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     a0e:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     a10:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a12:	1c63      	adds	r3, r4, #1
     a14:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     a16:	4288      	cmp	r0, r1
     a18:	d9f9      	bls.n	a0e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a1a:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     a1c:	2cff      	cmp	r4, #255	; 0xff
     a1e:	d801      	bhi.n	a24 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     a20:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     a22:	2300      	movs	r3, #0
	}
}
     a24:	0018      	movs	r0, r3
     a26:	bd10      	pop	{r4, pc}

00000a28 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a28:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2a:	465f      	mov	r7, fp
     a2c:	4656      	mov	r6, sl
     a2e:	464d      	mov	r5, r9
     a30:	4644      	mov	r4, r8
     a32:	b4f0      	push	{r4, r5, r6, r7}
     a34:	b089      	sub	sp, #36	; 0x24
     a36:	000c      	movs	r4, r1
     a38:	9205      	str	r2, [sp, #20]
     a3a:	aa12      	add	r2, sp, #72	; 0x48
     a3c:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a3e:	0002      	movs	r2, r0
     a40:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a42:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a44:	42a2      	cmp	r2, r4
     a46:	d900      	bls.n	a4a <_sercom_get_async_baud_val+0x22>
     a48:	e0c6      	b.n	bd8 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a4a:	2b00      	cmp	r3, #0
     a4c:	d151      	bne.n	af2 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a4e:	0002      	movs	r2, r0
     a50:	0008      	movs	r0, r1
     a52:	2100      	movs	r1, #0
     a54:	4d64      	ldr	r5, [pc, #400]	; (be8 <_sercom_get_async_baud_val+0x1c0>)
     a56:	47a8      	blx	r5
     a58:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     a5a:	0026      	movs	r6, r4
     a5c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a5e:	2300      	movs	r3, #0
     a60:	2400      	movs	r4, #0
     a62:	9300      	str	r3, [sp, #0]
     a64:	9401      	str	r4, [sp, #4]
     a66:	2200      	movs	r2, #0
     a68:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     a6a:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     a6c:	2120      	movs	r1, #32
     a6e:	468c      	mov	ip, r1
     a70:	391f      	subs	r1, #31
     a72:	9602      	str	r6, [sp, #8]
     a74:	9703      	str	r7, [sp, #12]
     a76:	2420      	movs	r4, #32
     a78:	4264      	negs	r4, r4
     a7a:	1904      	adds	r4, r0, r4
     a7c:	d403      	bmi.n	a86 <_sercom_get_async_baud_val+0x5e>
     a7e:	000d      	movs	r5, r1
     a80:	40a5      	lsls	r5, r4
     a82:	46a8      	mov	r8, r5
     a84:	e004      	b.n	a90 <_sercom_get_async_baud_val+0x68>
     a86:	4664      	mov	r4, ip
     a88:	1a24      	subs	r4, r4, r0
     a8a:	000d      	movs	r5, r1
     a8c:	40e5      	lsrs	r5, r4
     a8e:	46a8      	mov	r8, r5
     a90:	000c      	movs	r4, r1
     a92:	4084      	lsls	r4, r0
     a94:	46a1      	mov	r9, r4

		r = r << 1;
     a96:	0014      	movs	r4, r2
     a98:	001d      	movs	r5, r3
     a9a:	18a4      	adds	r4, r4, r2
     a9c:	415d      	adcs	r5, r3
     a9e:	0022      	movs	r2, r4
     aa0:	002b      	movs	r3, r5

		if (n & bit_shift) {
     aa2:	4646      	mov	r6, r8
     aa4:	465f      	mov	r7, fp
     aa6:	423e      	tst	r6, r7
     aa8:	d003      	beq.n	ab2 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     aaa:	000e      	movs	r6, r1
     aac:	4326      	orrs	r6, r4
     aae:	0032      	movs	r2, r6
     ab0:	002b      	movs	r3, r5
		}

		if (r >= d) {
     ab2:	9c02      	ldr	r4, [sp, #8]
     ab4:	9d03      	ldr	r5, [sp, #12]
     ab6:	429d      	cmp	r5, r3
     ab8:	d80f      	bhi.n	ada <_sercom_get_async_baud_val+0xb2>
     aba:	d101      	bne.n	ac0 <_sercom_get_async_baud_val+0x98>
     abc:	4294      	cmp	r4, r2
     abe:	d80c      	bhi.n	ada <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     ac0:	9c02      	ldr	r4, [sp, #8]
     ac2:	9d03      	ldr	r5, [sp, #12]
     ac4:	1b12      	subs	r2, r2, r4
     ac6:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     ac8:	464d      	mov	r5, r9
     aca:	9e00      	ldr	r6, [sp, #0]
     acc:	9f01      	ldr	r7, [sp, #4]
     ace:	4335      	orrs	r5, r6
     ad0:	003c      	movs	r4, r7
     ad2:	4646      	mov	r6, r8
     ad4:	4334      	orrs	r4, r6
     ad6:	9500      	str	r5, [sp, #0]
     ad8:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     ada:	3801      	subs	r0, #1
     adc:	d2cb      	bcs.n	a76 <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     ade:	2200      	movs	r2, #0
     ae0:	2301      	movs	r3, #1
     ae2:	9800      	ldr	r0, [sp, #0]
     ae4:	9901      	ldr	r1, [sp, #4]
     ae6:	1a12      	subs	r2, r2, r0
     ae8:	418b      	sbcs	r3, r1
     aea:	0c12      	lsrs	r2, r2, #16
     aec:	041b      	lsls	r3, r3, #16
     aee:	431a      	orrs	r2, r3
     af0:	e06f      	b.n	bd2 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     af2:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     af4:	2b01      	cmp	r3, #1
     af6:	d16c      	bne.n	bd2 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     af8:	0f63      	lsrs	r3, r4, #29
     afa:	9304      	str	r3, [sp, #16]
     afc:	00e3      	lsls	r3, r4, #3
     afe:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     b00:	000a      	movs	r2, r1
     b02:	2300      	movs	r3, #0
     b04:	2100      	movs	r1, #0
     b06:	4c38      	ldr	r4, [pc, #224]	; (be8 <_sercom_get_async_baud_val+0x1c0>)
     b08:	47a0      	blx	r4
     b0a:	0004      	movs	r4, r0
     b0c:	000d      	movs	r5, r1
     b0e:	2300      	movs	r3, #0
     b10:	469c      	mov	ip, r3
     b12:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     b14:	3320      	adds	r3, #32
     b16:	469b      	mov	fp, r3
     b18:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     b1a:	4663      	mov	r3, ip
     b1c:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     b1e:	2300      	movs	r3, #0
     b20:	9302      	str	r3, [sp, #8]
     b22:	2200      	movs	r2, #0
     b24:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     b26:	213f      	movs	r1, #63	; 0x3f
     b28:	9400      	str	r4, [sp, #0]
     b2a:	9501      	str	r5, [sp, #4]
     b2c:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     b2e:	2120      	movs	r1, #32
     b30:	4249      	negs	r1, r1
     b32:	1879      	adds	r1, r7, r1
     b34:	d403      	bmi.n	b3e <_sercom_get_async_baud_val+0x116>
     b36:	0030      	movs	r0, r6
     b38:	4088      	lsls	r0, r1
     b3a:	4684      	mov	ip, r0
     b3c:	e004      	b.n	b48 <_sercom_get_async_baud_val+0x120>
     b3e:	4659      	mov	r1, fp
     b40:	1bc9      	subs	r1, r1, r7
     b42:	0030      	movs	r0, r6
     b44:	40c8      	lsrs	r0, r1
     b46:	4684      	mov	ip, r0
     b48:	0031      	movs	r1, r6
     b4a:	40b9      	lsls	r1, r7
     b4c:	4689      	mov	r9, r1

		r = r << 1;
     b4e:	0010      	movs	r0, r2
     b50:	0019      	movs	r1, r3
     b52:	1880      	adds	r0, r0, r2
     b54:	4159      	adcs	r1, r3
     b56:	0002      	movs	r2, r0
     b58:	000b      	movs	r3, r1

		if (n & bit_shift) {
     b5a:	4644      	mov	r4, r8
     b5c:	464d      	mov	r5, r9
     b5e:	402c      	ands	r4, r5
     b60:	46a2      	mov	sl, r4
     b62:	4664      	mov	r4, ip
     b64:	9d04      	ldr	r5, [sp, #16]
     b66:	402c      	ands	r4, r5
     b68:	46a4      	mov	ip, r4
     b6a:	4654      	mov	r4, sl
     b6c:	4665      	mov	r5, ip
     b6e:	432c      	orrs	r4, r5
     b70:	d003      	beq.n	b7a <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     b72:	0034      	movs	r4, r6
     b74:	4304      	orrs	r4, r0
     b76:	0022      	movs	r2, r4
     b78:	000b      	movs	r3, r1
		}

		if (r >= d) {
     b7a:	9800      	ldr	r0, [sp, #0]
     b7c:	9901      	ldr	r1, [sp, #4]
     b7e:	4299      	cmp	r1, r3
     b80:	d80a      	bhi.n	b98 <_sercom_get_async_baud_val+0x170>
     b82:	d101      	bne.n	b88 <_sercom_get_async_baud_val+0x160>
     b84:	4290      	cmp	r0, r2
     b86:	d807      	bhi.n	b98 <_sercom_get_async_baud_val+0x170>
			r = r - d;
     b88:	9800      	ldr	r0, [sp, #0]
     b8a:	9901      	ldr	r1, [sp, #4]
     b8c:	1a12      	subs	r2, r2, r0
     b8e:	418b      	sbcs	r3, r1
			q |= bit_shift;
     b90:	9902      	ldr	r1, [sp, #8]
     b92:	4648      	mov	r0, r9
     b94:	4301      	orrs	r1, r0
     b96:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     b98:	3f01      	subs	r7, #1
     b9a:	d2c8      	bcs.n	b2e <_sercom_get_async_baud_val+0x106>
     b9c:	9c00      	ldr	r4, [sp, #0]
     b9e:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     ba0:	9902      	ldr	r1, [sp, #8]
     ba2:	9a07      	ldr	r2, [sp, #28]
     ba4:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     ba6:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     ba8:	4910      	ldr	r1, [pc, #64]	; (bec <_sercom_get_async_baud_val+0x1c4>)
     baa:	428b      	cmp	r3, r1
     bac:	d90b      	bls.n	bc6 <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     bae:	9b06      	ldr	r3, [sp, #24]
     bb0:	3301      	adds	r3, #1
     bb2:	b2db      	uxtb	r3, r3
     bb4:	0019      	movs	r1, r3
     bb6:	9306      	str	r3, [sp, #24]
     bb8:	0013      	movs	r3, r2
     bba:	3301      	adds	r3, #1
     bbc:	9307      	str	r3, [sp, #28]
     bbe:	2908      	cmp	r1, #8
     bc0:	d1ad      	bne.n	b1e <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bc2:	2540      	movs	r5, #64	; 0x40
     bc4:	e008      	b.n	bd8 <_sercom_get_async_baud_val+0x1b0>
     bc6:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     bc8:	9a06      	ldr	r2, [sp, #24]
     bca:	2a08      	cmp	r2, #8
     bcc:	d004      	beq.n	bd8 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     bce:	0352      	lsls	r2, r2, #13
     bd0:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     bd2:	9b05      	ldr	r3, [sp, #20]
     bd4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     bd6:	2500      	movs	r5, #0
}
     bd8:	0028      	movs	r0, r5
     bda:	b009      	add	sp, #36	; 0x24
     bdc:	bc3c      	pop	{r2, r3, r4, r5}
     bde:	4690      	mov	r8, r2
     be0:	4699      	mov	r9, r3
     be2:	46a2      	mov	sl, r4
     be4:	46ab      	mov	fp, r5
     be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     be8:	0000217d 	.word	0x0000217d
     bec:	00001fff 	.word	0x00001fff

00000bf0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     bf0:	b510      	push	{r4, lr}
     bf2:	b082      	sub	sp, #8
     bf4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     bf6:	4b0e      	ldr	r3, [pc, #56]	; (c30 <sercom_set_gclk_generator+0x40>)
     bf8:	781b      	ldrb	r3, [r3, #0]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d001      	beq.n	c02 <sercom_set_gclk_generator+0x12>
     bfe:	2900      	cmp	r1, #0
     c00:	d00d      	beq.n	c1e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     c02:	a901      	add	r1, sp, #4
     c04:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c06:	2012      	movs	r0, #18
     c08:	4b0a      	ldr	r3, [pc, #40]	; (c34 <sercom_set_gclk_generator+0x44>)
     c0a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c0c:	2012      	movs	r0, #18
     c0e:	4b0a      	ldr	r3, [pc, #40]	; (c38 <sercom_set_gclk_generator+0x48>)
     c10:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     c12:	4b07      	ldr	r3, [pc, #28]	; (c30 <sercom_set_gclk_generator+0x40>)
     c14:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c16:	2201      	movs	r2, #1
     c18:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     c1a:	2000      	movs	r0, #0
     c1c:	e006      	b.n	c2c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     c1e:	4b04      	ldr	r3, [pc, #16]	; (c30 <sercom_set_gclk_generator+0x40>)
     c20:	785b      	ldrb	r3, [r3, #1]
     c22:	4283      	cmp	r3, r0
     c24:	d001      	beq.n	c2a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c26:	201d      	movs	r0, #29
     c28:	e000      	b.n	c2c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     c2a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     c2c:	b002      	add	sp, #8
     c2e:	bd10      	pop	{r4, pc}
     c30:	20000094 	.word	0x20000094
     c34:	00001dd9 	.word	0x00001dd9
     c38:	00001d69 	.word	0x00001d69

00000c3c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c3c:	4b44      	ldr	r3, [pc, #272]	; (d50 <_sercom_get_default_pad+0x114>)
     c3e:	4298      	cmp	r0, r3
     c40:	d033      	beq.n	caa <_sercom_get_default_pad+0x6e>
     c42:	d806      	bhi.n	c52 <_sercom_get_default_pad+0x16>
     c44:	4b43      	ldr	r3, [pc, #268]	; (d54 <_sercom_get_default_pad+0x118>)
     c46:	4298      	cmp	r0, r3
     c48:	d00d      	beq.n	c66 <_sercom_get_default_pad+0x2a>
     c4a:	4b43      	ldr	r3, [pc, #268]	; (d58 <_sercom_get_default_pad+0x11c>)
     c4c:	4298      	cmp	r0, r3
     c4e:	d01b      	beq.n	c88 <_sercom_get_default_pad+0x4c>
     c50:	e06f      	b.n	d32 <_sercom_get_default_pad+0xf6>
     c52:	4b42      	ldr	r3, [pc, #264]	; (d5c <_sercom_get_default_pad+0x120>)
     c54:	4298      	cmp	r0, r3
     c56:	d04a      	beq.n	cee <_sercom_get_default_pad+0xb2>
     c58:	4b41      	ldr	r3, [pc, #260]	; (d60 <_sercom_get_default_pad+0x124>)
     c5a:	4298      	cmp	r0, r3
     c5c:	d058      	beq.n	d10 <_sercom_get_default_pad+0xd4>
     c5e:	4b41      	ldr	r3, [pc, #260]	; (d64 <_sercom_get_default_pad+0x128>)
     c60:	4298      	cmp	r0, r3
     c62:	d166      	bne.n	d32 <_sercom_get_default_pad+0xf6>
     c64:	e032      	b.n	ccc <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c66:	2901      	cmp	r1, #1
     c68:	d006      	beq.n	c78 <_sercom_get_default_pad+0x3c>
     c6a:	2900      	cmp	r1, #0
     c6c:	d063      	beq.n	d36 <_sercom_get_default_pad+0xfa>
     c6e:	2902      	cmp	r1, #2
     c70:	d006      	beq.n	c80 <_sercom_get_default_pad+0x44>
     c72:	2903      	cmp	r1, #3
     c74:	d006      	beq.n	c84 <_sercom_get_default_pad+0x48>
     c76:	e001      	b.n	c7c <_sercom_get_default_pad+0x40>
     c78:	483b      	ldr	r0, [pc, #236]	; (d68 <_sercom_get_default_pad+0x12c>)
     c7a:	e067      	b.n	d4c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     c7c:	2000      	movs	r0, #0
     c7e:	e065      	b.n	d4c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c80:	483a      	ldr	r0, [pc, #232]	; (d6c <_sercom_get_default_pad+0x130>)
     c82:	e063      	b.n	d4c <_sercom_get_default_pad+0x110>
     c84:	483a      	ldr	r0, [pc, #232]	; (d70 <_sercom_get_default_pad+0x134>)
     c86:	e061      	b.n	d4c <_sercom_get_default_pad+0x110>
     c88:	2901      	cmp	r1, #1
     c8a:	d006      	beq.n	c9a <_sercom_get_default_pad+0x5e>
     c8c:	2900      	cmp	r1, #0
     c8e:	d054      	beq.n	d3a <_sercom_get_default_pad+0xfe>
     c90:	2902      	cmp	r1, #2
     c92:	d006      	beq.n	ca2 <_sercom_get_default_pad+0x66>
     c94:	2903      	cmp	r1, #3
     c96:	d006      	beq.n	ca6 <_sercom_get_default_pad+0x6a>
     c98:	e001      	b.n	c9e <_sercom_get_default_pad+0x62>
     c9a:	4836      	ldr	r0, [pc, #216]	; (d74 <_sercom_get_default_pad+0x138>)
     c9c:	e056      	b.n	d4c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     c9e:	2000      	movs	r0, #0
     ca0:	e054      	b.n	d4c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ca2:	4835      	ldr	r0, [pc, #212]	; (d78 <_sercom_get_default_pad+0x13c>)
     ca4:	e052      	b.n	d4c <_sercom_get_default_pad+0x110>
     ca6:	4835      	ldr	r0, [pc, #212]	; (d7c <_sercom_get_default_pad+0x140>)
     ca8:	e050      	b.n	d4c <_sercom_get_default_pad+0x110>
     caa:	2901      	cmp	r1, #1
     cac:	d006      	beq.n	cbc <_sercom_get_default_pad+0x80>
     cae:	2900      	cmp	r1, #0
     cb0:	d045      	beq.n	d3e <_sercom_get_default_pad+0x102>
     cb2:	2902      	cmp	r1, #2
     cb4:	d006      	beq.n	cc4 <_sercom_get_default_pad+0x88>
     cb6:	2903      	cmp	r1, #3
     cb8:	d006      	beq.n	cc8 <_sercom_get_default_pad+0x8c>
     cba:	e001      	b.n	cc0 <_sercom_get_default_pad+0x84>
     cbc:	4830      	ldr	r0, [pc, #192]	; (d80 <_sercom_get_default_pad+0x144>)
     cbe:	e045      	b.n	d4c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     cc0:	2000      	movs	r0, #0
     cc2:	e043      	b.n	d4c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cc4:	482f      	ldr	r0, [pc, #188]	; (d84 <_sercom_get_default_pad+0x148>)
     cc6:	e041      	b.n	d4c <_sercom_get_default_pad+0x110>
     cc8:	482f      	ldr	r0, [pc, #188]	; (d88 <_sercom_get_default_pad+0x14c>)
     cca:	e03f      	b.n	d4c <_sercom_get_default_pad+0x110>
     ccc:	2901      	cmp	r1, #1
     cce:	d006      	beq.n	cde <_sercom_get_default_pad+0xa2>
     cd0:	2900      	cmp	r1, #0
     cd2:	d036      	beq.n	d42 <_sercom_get_default_pad+0x106>
     cd4:	2902      	cmp	r1, #2
     cd6:	d006      	beq.n	ce6 <_sercom_get_default_pad+0xaa>
     cd8:	2903      	cmp	r1, #3
     cda:	d006      	beq.n	cea <_sercom_get_default_pad+0xae>
     cdc:	e001      	b.n	ce2 <_sercom_get_default_pad+0xa6>
     cde:	482b      	ldr	r0, [pc, #172]	; (d8c <_sercom_get_default_pad+0x150>)
     ce0:	e034      	b.n	d4c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ce2:	2000      	movs	r0, #0
     ce4:	e032      	b.n	d4c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ce6:	482a      	ldr	r0, [pc, #168]	; (d90 <_sercom_get_default_pad+0x154>)
     ce8:	e030      	b.n	d4c <_sercom_get_default_pad+0x110>
     cea:	482a      	ldr	r0, [pc, #168]	; (d94 <_sercom_get_default_pad+0x158>)
     cec:	e02e      	b.n	d4c <_sercom_get_default_pad+0x110>
     cee:	2901      	cmp	r1, #1
     cf0:	d006      	beq.n	d00 <_sercom_get_default_pad+0xc4>
     cf2:	2900      	cmp	r1, #0
     cf4:	d027      	beq.n	d46 <_sercom_get_default_pad+0x10a>
     cf6:	2902      	cmp	r1, #2
     cf8:	d006      	beq.n	d08 <_sercom_get_default_pad+0xcc>
     cfa:	2903      	cmp	r1, #3
     cfc:	d006      	beq.n	d0c <_sercom_get_default_pad+0xd0>
     cfe:	e001      	b.n	d04 <_sercom_get_default_pad+0xc8>
     d00:	4825      	ldr	r0, [pc, #148]	; (d98 <_sercom_get_default_pad+0x15c>)
     d02:	e023      	b.n	d4c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d04:	2000      	movs	r0, #0
     d06:	e021      	b.n	d4c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d08:	4824      	ldr	r0, [pc, #144]	; (d9c <_sercom_get_default_pad+0x160>)
     d0a:	e01f      	b.n	d4c <_sercom_get_default_pad+0x110>
     d0c:	4824      	ldr	r0, [pc, #144]	; (da0 <_sercom_get_default_pad+0x164>)
     d0e:	e01d      	b.n	d4c <_sercom_get_default_pad+0x110>
     d10:	2901      	cmp	r1, #1
     d12:	d006      	beq.n	d22 <_sercom_get_default_pad+0xe6>
     d14:	2900      	cmp	r1, #0
     d16:	d018      	beq.n	d4a <_sercom_get_default_pad+0x10e>
     d18:	2902      	cmp	r1, #2
     d1a:	d006      	beq.n	d2a <_sercom_get_default_pad+0xee>
     d1c:	2903      	cmp	r1, #3
     d1e:	d006      	beq.n	d2e <_sercom_get_default_pad+0xf2>
     d20:	e001      	b.n	d26 <_sercom_get_default_pad+0xea>
     d22:	4820      	ldr	r0, [pc, #128]	; (da4 <_sercom_get_default_pad+0x168>)
     d24:	e012      	b.n	d4c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d26:	2000      	movs	r0, #0
     d28:	e010      	b.n	d4c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d2a:	481f      	ldr	r0, [pc, #124]	; (da8 <_sercom_get_default_pad+0x16c>)
     d2c:	e00e      	b.n	d4c <_sercom_get_default_pad+0x110>
     d2e:	481f      	ldr	r0, [pc, #124]	; (dac <_sercom_get_default_pad+0x170>)
     d30:	e00c      	b.n	d4c <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d32:	2000      	movs	r0, #0
     d34:	e00a      	b.n	d4c <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d36:	481e      	ldr	r0, [pc, #120]	; (db0 <_sercom_get_default_pad+0x174>)
     d38:	e008      	b.n	d4c <_sercom_get_default_pad+0x110>
     d3a:	481e      	ldr	r0, [pc, #120]	; (db4 <_sercom_get_default_pad+0x178>)
     d3c:	e006      	b.n	d4c <_sercom_get_default_pad+0x110>
     d3e:	481e      	ldr	r0, [pc, #120]	; (db8 <_sercom_get_default_pad+0x17c>)
     d40:	e004      	b.n	d4c <_sercom_get_default_pad+0x110>
     d42:	481e      	ldr	r0, [pc, #120]	; (dbc <_sercom_get_default_pad+0x180>)
     d44:	e002      	b.n	d4c <_sercom_get_default_pad+0x110>
     d46:	481e      	ldr	r0, [pc, #120]	; (dc0 <_sercom_get_default_pad+0x184>)
     d48:	e000      	b.n	d4c <_sercom_get_default_pad+0x110>
     d4a:	481e      	ldr	r0, [pc, #120]	; (dc4 <_sercom_get_default_pad+0x188>)
	}

	Assert(false);
	return 0;
}
     d4c:	4770      	bx	lr
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	42000c00 	.word	0x42000c00
     d54:	42000400 	.word	0x42000400
     d58:	42000800 	.word	0x42000800
     d5c:	42001400 	.word	0x42001400
     d60:	42001800 	.word	0x42001800
     d64:	42001000 	.word	0x42001000
     d68:	00050003 	.word	0x00050003
     d6c:	00060003 	.word	0x00060003
     d70:	00070003 	.word	0x00070003
     d74:	00110002 	.word	0x00110002
     d78:	00120002 	.word	0x00120002
     d7c:	00130002 	.word	0x00130002
     d80:	000d0002 	.word	0x000d0002
     d84:	000e0002 	.word	0x000e0002
     d88:	000f0002 	.word	0x000f0002
     d8c:	00170002 	.word	0x00170002
     d90:	00180002 	.word	0x00180002
     d94:	00190002 	.word	0x00190002
     d98:	00290003 	.word	0x00290003
     d9c:	002a0003 	.word	0x002a0003
     da0:	002b0003 	.word	0x002b0003
     da4:	00230003 	.word	0x00230003
     da8:	00200003 	.word	0x00200003
     dac:	00210003 	.word	0x00210003
     db0:	00040003 	.word	0x00040003
     db4:	00100002 	.word	0x00100002
     db8:	000c0002 	.word	0x000c0002
     dbc:	00160002 	.word	0x00160002
     dc0:	00280003 	.word	0x00280003
     dc4:	00220003 	.word	0x00220003

00000dc8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     dc8:	b530      	push	{r4, r5, lr}
     dca:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     dcc:	4b0c      	ldr	r3, [pc, #48]	; (e00 <_sercom_get_sercom_inst_index+0x38>)
     dce:	466a      	mov	r2, sp
     dd0:	cb32      	ldmia	r3!, {r1, r4, r5}
     dd2:	c232      	stmia	r2!, {r1, r4, r5}
     dd4:	cb32      	ldmia	r3!, {r1, r4, r5}
     dd6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     dd8:	9b00      	ldr	r3, [sp, #0]
     dda:	4283      	cmp	r3, r0
     ddc:	d006      	beq.n	dec <_sercom_get_sercom_inst_index+0x24>
     dde:	2301      	movs	r3, #1
     de0:	009a      	lsls	r2, r3, #2
     de2:	4669      	mov	r1, sp
     de4:	5852      	ldr	r2, [r2, r1]
     de6:	4282      	cmp	r2, r0
     de8:	d103      	bne.n	df2 <_sercom_get_sercom_inst_index+0x2a>
     dea:	e000      	b.n	dee <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dec:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     dee:	b2d8      	uxtb	r0, r3
     df0:	e003      	b.n	dfa <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     df2:	3301      	adds	r3, #1
     df4:	2b06      	cmp	r3, #6
     df6:	d1f3      	bne.n	de0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     df8:	2000      	movs	r0, #0
}
     dfa:	b007      	add	sp, #28
     dfc:	bd30      	pop	{r4, r5, pc}
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	00002af0 	.word	0x00002af0

00000e04 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     e04:	4770      	bx	lr
     e06:	46c0      	nop			; (mov r8, r8)

00000e08 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e08:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     e0a:	4b0a      	ldr	r3, [pc, #40]	; (e34 <_sercom_set_handler+0x2c>)
     e0c:	781b      	ldrb	r3, [r3, #0]
     e0e:	2b00      	cmp	r3, #0
     e10:	d10c      	bne.n	e2c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e12:	4f09      	ldr	r7, [pc, #36]	; (e38 <_sercom_set_handler+0x30>)
     e14:	4e09      	ldr	r6, [pc, #36]	; (e3c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     e16:	4d0a      	ldr	r5, [pc, #40]	; (e40 <_sercom_set_handler+0x38>)
     e18:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e1a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     e1c:	195a      	adds	r2, r3, r5
     e1e:	6014      	str	r4, [r2, #0]
     e20:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e22:	2b18      	cmp	r3, #24
     e24:	d1f9      	bne.n	e1a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     e26:	2201      	movs	r2, #1
     e28:	4b02      	ldr	r3, [pc, #8]	; (e34 <_sercom_set_handler+0x2c>)
     e2a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     e2c:	0080      	lsls	r0, r0, #2
     e2e:	4b02      	ldr	r3, [pc, #8]	; (e38 <_sercom_set_handler+0x30>)
     e30:	50c1      	str	r1, [r0, r3]
}
     e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e34:	20000096 	.word	0x20000096
     e38:	20000098 	.word	0x20000098
     e3c:	00000e05 	.word	0x00000e05
     e40:	200001d0 	.word	0x200001d0

00000e44 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e44:	b510      	push	{r4, lr}
     e46:	b082      	sub	sp, #8
     e48:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e4a:	2206      	movs	r2, #6
     e4c:	4905      	ldr	r1, [pc, #20]	; (e64 <_sercom_get_interrupt_vector+0x20>)
     e4e:	4668      	mov	r0, sp
     e50:	4b05      	ldr	r3, [pc, #20]	; (e68 <_sercom_get_interrupt_vector+0x24>)
     e52:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e54:	0020      	movs	r0, r4
     e56:	4b05      	ldr	r3, [pc, #20]	; (e6c <_sercom_get_interrupt_vector+0x28>)
     e58:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e5a:	466b      	mov	r3, sp
     e5c:	5618      	ldrsb	r0, [r3, r0]
}
     e5e:	b002      	add	sp, #8
     e60:	bd10      	pop	{r4, pc}
     e62:	46c0      	nop			; (mov r8, r8)
     e64:	00002b08 	.word	0x00002b08
     e68:	00002221 	.word	0x00002221
     e6c:	00000dc9 	.word	0x00000dc9

00000e70 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e70:	b510      	push	{r4, lr}
     e72:	4b02      	ldr	r3, [pc, #8]	; (e7c <SERCOM0_Handler+0xc>)
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	2000      	movs	r0, #0
     e78:	4798      	blx	r3
     e7a:	bd10      	pop	{r4, pc}
     e7c:	20000098 	.word	0x20000098

00000e80 <SERCOM1_Handler>:
     e80:	b510      	push	{r4, lr}
     e82:	4b02      	ldr	r3, [pc, #8]	; (e8c <SERCOM1_Handler+0xc>)
     e84:	685b      	ldr	r3, [r3, #4]
     e86:	2001      	movs	r0, #1
     e88:	4798      	blx	r3
     e8a:	bd10      	pop	{r4, pc}
     e8c:	20000098 	.word	0x20000098

00000e90 <SERCOM2_Handler>:
     e90:	b510      	push	{r4, lr}
     e92:	4b02      	ldr	r3, [pc, #8]	; (e9c <SERCOM2_Handler+0xc>)
     e94:	689b      	ldr	r3, [r3, #8]
     e96:	2002      	movs	r0, #2
     e98:	4798      	blx	r3
     e9a:	bd10      	pop	{r4, pc}
     e9c:	20000098 	.word	0x20000098

00000ea0 <SERCOM3_Handler>:
     ea0:	b510      	push	{r4, lr}
     ea2:	4b02      	ldr	r3, [pc, #8]	; (eac <SERCOM3_Handler+0xc>)
     ea4:	68db      	ldr	r3, [r3, #12]
     ea6:	2003      	movs	r0, #3
     ea8:	4798      	blx	r3
     eaa:	bd10      	pop	{r4, pc}
     eac:	20000098 	.word	0x20000098

00000eb0 <SERCOM4_Handler>:
     eb0:	b510      	push	{r4, lr}
     eb2:	4b02      	ldr	r3, [pc, #8]	; (ebc <SERCOM4_Handler+0xc>)
     eb4:	691b      	ldr	r3, [r3, #16]
     eb6:	2004      	movs	r0, #4
     eb8:	4798      	blx	r3
     eba:	bd10      	pop	{r4, pc}
     ebc:	20000098 	.word	0x20000098

00000ec0 <SERCOM5_Handler>:
     ec0:	b510      	push	{r4, lr}
     ec2:	4b02      	ldr	r3, [pc, #8]	; (ecc <SERCOM5_Handler+0xc>)
     ec4:	695b      	ldr	r3, [r3, #20]
     ec6:	2005      	movs	r0, #5
     ec8:	4798      	blx	r3
     eca:	bd10      	pop	{r4, pc}
     ecc:	20000098 	.word	0x20000098

00000ed0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ed2:	4657      	mov	r7, sl
     ed4:	464e      	mov	r6, r9
     ed6:	4645      	mov	r5, r8
     ed8:	b4e0      	push	{r5, r6, r7}
     eda:	b088      	sub	sp, #32
     edc:	4680      	mov	r8, r0
     ede:	000e      	movs	r6, r1
     ee0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     ee2:	0003      	movs	r3, r0
     ee4:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     ee6:	680b      	ldr	r3, [r1, #0]
     ee8:	079b      	lsls	r3, r3, #30
     eea:	d400      	bmi.n	eee <spi_init+0x1e>
     eec:	e0a7      	b.n	103e <spi_init+0x16e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     eee:	6a93      	ldr	r3, [r2, #40]	; 0x28
     ef0:	9303      	str	r3, [sp, #12]
     ef2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     ef4:	9304      	str	r3, [sp, #16]
     ef6:	6b13      	ldr	r3, [r2, #48]	; 0x30
     ef8:	9305      	str	r3, [sp, #20]
     efa:	6b53      	ldr	r3, [r2, #52]	; 0x34
     efc:	9306      	str	r3, [sp, #24]
     efe:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     f00:	231f      	movs	r3, #31
     f02:	4699      	mov	r9, r3
     f04:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f06:	00bb      	lsls	r3, r7, #2
     f08:	aa03      	add	r2, sp, #12
     f0a:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     f0c:	2800      	cmp	r0, #0
     f0e:	d102      	bne.n	f16 <spi_init+0x46>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f10:	0030      	movs	r0, r6
     f12:	4baf      	ldr	r3, [pc, #700]	; (11d0 <spi_init+0x300>)
     f14:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     f16:	1c43      	adds	r3, r0, #1
     f18:	d028      	beq.n	f6c <spi_init+0x9c>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     f1a:	0402      	lsls	r2, r0, #16
     f1c:	0c13      	lsrs	r3, r2, #16
     f1e:	469c      	mov	ip, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     f20:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     f22:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     f24:	2500      	movs	r5, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     f26:	0603      	lsls	r3, r0, #24
     f28:	d404      	bmi.n	f34 <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
     f2a:	094b      	lsrs	r3, r1, #5
     f2c:	01db      	lsls	r3, r3, #7
     f2e:	2282      	movs	r2, #130	; 0x82
     f30:	05d2      	lsls	r2, r2, #23
     f32:	189d      	adds	r5, r3, r2
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     f34:	464b      	mov	r3, r9
     f36:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     f38:	18e8      	adds	r0, r5, r3
     f3a:	3040      	adds	r0, #64	; 0x40
     f3c:	7800      	ldrb	r0, [r0, #0]
     f3e:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     f40:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     f42:	4652      	mov	r2, sl
     f44:	07d2      	lsls	r2, r2, #31
     f46:	d50a      	bpl.n	f5e <spi_init+0x8e>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     f48:	085b      	lsrs	r3, r3, #1
     f4a:	18eb      	adds	r3, r5, r3
     f4c:	3330      	adds	r3, #48	; 0x30
     f4e:	7818      	ldrb	r0, [r3, #0]
     f50:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
     f52:	07cb      	lsls	r3, r1, #31
     f54:	d501      	bpl.n	f5a <spi_init+0x8a>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     f56:	0900      	lsrs	r0, r0, #4
     f58:	e001      	b.n	f5e <spi_init+0x8e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     f5a:	230f      	movs	r3, #15
     f5c:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     f5e:	4584      	cmp	ip, r0
     f60:	d004      	beq.n	f6c <spi_init+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     f62:	2300      	movs	r3, #0
     f64:	4642      	mov	r2, r8
     f66:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     f68:	201c      	movs	r0, #28
     f6a:	e12b      	b.n	11c4 <spi_init+0x2f4>
     f6c:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f6e:	2f04      	cmp	r7, #4
     f70:	d1c8      	bne.n	f04 <spi_init+0x34>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     f72:	2012      	movs	r0, #18
     f74:	4b97      	ldr	r3, [pc, #604]	; (11d4 <spi_init+0x304>)
     f76:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     f78:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     f7a:	2700      	movs	r7, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     f7c:	2b01      	cmp	r3, #1
     f7e:	d112      	bne.n	fa6 <spi_init+0xd6>
		enum status_code error_code = _sercom_get_sync_baud_val(
     f80:	aa02      	add	r2, sp, #8
     f82:	0001      	movs	r1, r0
     f84:	69a0      	ldr	r0, [r4, #24]
     f86:	4b94      	ldr	r3, [pc, #592]	; (11d8 <spi_init+0x308>)
     f88:	4798      	blx	r3
     f8a:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     f8c:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     f8e:	2b00      	cmp	r3, #0
     f90:	d000      	beq.n	f94 <spi_init+0xc4>
     f92:	e117      	b.n	11c4 <spi_init+0x2f4>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     f94:	7b33      	ldrb	r3, [r6, #12]
     f96:	b2db      	uxtb	r3, r3
     f98:	aa02      	add	r2, sp, #8
     f9a:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     f9c:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     f9e:	429a      	cmp	r2, r3
     fa0:	d000      	beq.n	fa4 <spi_init+0xd4>
     fa2:	e10f      	b.n	11c4 <spi_init+0x2f4>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     fa4:	370c      	adds	r7, #12
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     fa6:	7825      	ldrb	r5, [r4, #0]
     fa8:	2d00      	cmp	r5, #0
     faa:	d114      	bne.n	fd6 <spi_init+0x106>
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     fac:	6832      	ldr	r2, [r6, #0]
     fae:	7fe3      	ldrb	r3, [r4, #31]
     fb0:	041b      	lsls	r3, r3, #16
     fb2:	7fa1      	ldrb	r1, [r4, #30]
     fb4:	430b      	orrs	r3, r1
			return STATUS_ERR_DENIED;
     fb6:	201c      	movs	r0, #28
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
     fb8:	4293      	cmp	r3, r2
     fba:	d000      	beq.n	fbe <spi_init+0xee>
     fbc:	e102      	b.n	11c4 <spi_init+0x2f4>

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
     fbe:	69a1      	ldr	r1, [r4, #24]

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
     fc0:	8ba3      	ldrh	r3, [r4, #28]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
			return STATUS_ERR_DENIED;
		}

		if (config->mode_specific.slave.preload_enable) {
     fc2:	2220      	movs	r2, #32
     fc4:	5ca2      	ldrb	r2, [r4, r2]
     fc6:	2a00      	cmp	r2, #0
     fc8:	d001      	beq.n	fce <spi_init+0xfe>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     fca:	2240      	movs	r2, #64	; 0x40
     fcc:	4313      	orrs	r3, r2
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     fce:	2208      	movs	r2, #8
     fd0:	430a      	orrs	r2, r1
     fd2:	4317      	orrs	r7, r2
     fd4:	e000      	b.n	fd8 <spi_init+0x108>
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
     fd6:	2300      	movs	r3, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     fd8:	6862      	ldr	r2, [r4, #4]
     fda:	68a1      	ldr	r1, [r4, #8]
     fdc:	430a      	orrs	r2, r1
     fde:	68e1      	ldr	r1, [r4, #12]
     fe0:	430a      	orrs	r2, r1
     fe2:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
     fe4:	7c21      	ldrb	r1, [r4, #16]
     fe6:	430b      	orrs	r3, r1

	if (config->run_in_standby) {
     fe8:	7c61      	ldrb	r1, [r4, #17]
     fea:	2900      	cmp	r1, #0
     fec:	d001      	beq.n	ff2 <spi_init+0x122>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     fee:	2180      	movs	r1, #128	; 0x80
     ff0:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     ff2:	7ca1      	ldrb	r1, [r4, #18]
     ff4:	2900      	cmp	r1, #0
     ff6:	d002      	beq.n	ffe <spi_init+0x12e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ff8:	2180      	movs	r1, #128	; 0x80
     ffa:	0289      	lsls	r1, r1, #10
     ffc:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     ffe:	7ce1      	ldrb	r1, [r4, #19]
    1000:	2900      	cmp	r1, #0
    1002:	d002      	beq.n	100a <spi_init+0x13a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1004:	2180      	movs	r1, #128	; 0x80
    1006:	0089      	lsls	r1, r1, #2
    1008:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    100a:	7d21      	ldrb	r1, [r4, #20]
    100c:	2900      	cmp	r1, #0
    100e:	d002      	beq.n	1016 <spi_init+0x146>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1010:	2180      	movs	r1, #128	; 0x80
    1012:	0189      	lsls	r1, r1, #6
    1014:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1016:	6830      	ldr	r0, [r6, #0]
    1018:	2102      	movs	r1, #2
    101a:	430a      	orrs	r2, r1
    101c:	4282      	cmp	r2, r0
    101e:	d109      	bne.n	1034 <spi_init+0x164>
			spi_module->CTRLB.reg == ctrlb) {
    1020:	6872      	ldr	r2, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1022:	429a      	cmp	r2, r3
    1024:	d106      	bne.n	1034 <spi_init+0x164>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    1026:	4643      	mov	r3, r8
    1028:	715d      	strb	r5, [r3, #5]
		module->character_size = config->character_size;
    102a:	7c23      	ldrb	r3, [r4, #16]
    102c:	4642      	mov	r2, r8
    102e:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    1030:	2000      	movs	r0, #0
    1032:	e0c7      	b.n	11c4 <spi_init+0x2f4>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    1034:	2300      	movs	r3, #0
    1036:	4642      	mov	r2, r8
    1038:	6013      	str	r3, [r2, #0]

	return STATUS_ERR_DENIED;
    103a:	201c      	movs	r0, #28
    103c:	e0c2      	b.n	11c4 <spi_init+0x2f4>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    103e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1040:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1042:	07db      	lsls	r3, r3, #31
    1044:	d500      	bpl.n	1048 <spi_init+0x178>
    1046:	e0bd      	b.n	11c4 <spi_init+0x2f4>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1048:	0008      	movs	r0, r1
    104a:	4b64      	ldr	r3, [pc, #400]	; (11dc <spi_init+0x30c>)
    104c:	4798      	blx	r3
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21) 
	if (sercom_index == 5) {
    104e:	2805      	cmp	r0, #5
    1050:	d002      	beq.n	1058 <spi_init+0x188>
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1052:	1c45      	adds	r5, r0, #1
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1054:	3013      	adds	r0, #19
    1056:	e001      	b.n	105c <spi_init+0x18c>
	}
#elif (SAMC21) 
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    1058:	2019      	movs	r0, #25
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21) 
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    105a:	2506      	movs	r5, #6
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    105c:	4960      	ldr	r1, [pc, #384]	; (11e0 <spi_init+0x310>)
    105e:	69ca      	ldr	r2, [r1, #28]
    1060:	2301      	movs	r3, #1
    1062:	40ab      	lsls	r3, r5
    1064:	4313      	orrs	r3, r2
    1066:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1068:	a907      	add	r1, sp, #28
    106a:	2724      	movs	r7, #36	; 0x24
    106c:	5de3      	ldrb	r3, [r4, r7]
    106e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1070:	b2c5      	uxtb	r5, r0
    1072:	0028      	movs	r0, r5
    1074:	4b5b      	ldr	r3, [pc, #364]	; (11e4 <spi_init+0x314>)
    1076:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1078:	0028      	movs	r0, r5
    107a:	4b5b      	ldr	r3, [pc, #364]	; (11e8 <spi_init+0x318>)
    107c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    107e:	5de0      	ldrb	r0, [r4, r7]
    1080:	2100      	movs	r1, #0
    1082:	4b5a      	ldr	r3, [pc, #360]	; (11ec <spi_init+0x31c>)
    1084:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1086:	7823      	ldrb	r3, [r4, #0]
    1088:	2b01      	cmp	r3, #1
    108a:	d103      	bne.n	1094 <spi_init+0x1c4>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    108c:	6832      	ldr	r2, [r6, #0]
    108e:	330b      	adds	r3, #11
    1090:	4313      	orrs	r3, r2
    1092:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	2b00      	cmp	r3, #0
    1098:	d103      	bne.n	10a2 <spi_init+0x1d2>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    109a:	6832      	ldr	r2, [r6, #0]
    109c:	3308      	adds	r3, #8
    109e:	4313      	orrs	r3, r2
    10a0:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    10a2:	4643      	mov	r3, r8
    10a4:	681e      	ldr	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10a6:	ab02      	add	r3, sp, #8
    10a8:	2280      	movs	r2, #128	; 0x80
    10aa:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10ac:	2200      	movs	r2, #0
    10ae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    10b0:	2101      	movs	r1, #1
    10b2:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    10b4:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    10b6:	7823      	ldrb	r3, [r4, #0]
    10b8:	2b00      	cmp	r3, #0
    10ba:	d101      	bne.n	10c0 <spi_init+0x1f0>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    10bc:	ab02      	add	r3, sp, #8
    10be:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    10c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10c2:	9303      	str	r3, [sp, #12]
    10c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    10c6:	9304      	str	r3, [sp, #16]
    10c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    10ca:	9305      	str	r3, [sp, #20]
    10cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    10ce:	9306      	str	r3, [sp, #24]
    10d0:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10d2:	ad02      	add	r5, sp, #8
    10d4:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10d6:	00bb      	lsls	r3, r7, #2
    10d8:	aa03      	add	r2, sp, #12
    10da:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    10dc:	2800      	cmp	r0, #0
    10de:	d102      	bne.n	10e6 <spi_init+0x216>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10e0:	0030      	movs	r0, r6
    10e2:	4b3b      	ldr	r3, [pc, #236]	; (11d0 <spi_init+0x300>)
    10e4:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    10e6:	1c43      	adds	r3, r0, #1
    10e8:	d005      	beq.n	10f6 <spi_init+0x226>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10ea:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    10ec:	0c00      	lsrs	r0, r0, #16
    10ee:	b2c0      	uxtb	r0, r0
    10f0:	0029      	movs	r1, r5
    10f2:	4b3f      	ldr	r3, [pc, #252]	; (11f0 <spi_init+0x320>)
    10f4:	4798      	blx	r3
    10f6:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    10f8:	2f04      	cmp	r7, #4
    10fa:	d1eb      	bne.n	10d4 <spi_init+0x204>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    10fc:	7823      	ldrb	r3, [r4, #0]
    10fe:	4642      	mov	r2, r8
    1100:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    1102:	7c23      	ldrb	r3, [r4, #16]
    1104:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1106:	7ca3      	ldrb	r3, [r4, #18]
    1108:	71d3      	strb	r3, [r2, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    110a:	7d23      	ldrb	r3, [r4, #20]
    110c:	7213      	strb	r3, [r2, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    110e:	2200      	movs	r2, #0
    1110:	466b      	mov	r3, sp
    1112:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1114:	7823      	ldrb	r3, [r4, #0]
    1116:	2b01      	cmp	r3, #1
    1118:	d115      	bne.n	1146 <spi_init+0x276>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    111a:	4643      	mov	r3, r8
    111c:	6818      	ldr	r0, [r3, #0]
    111e:	4b2f      	ldr	r3, [pc, #188]	; (11dc <spi_init+0x30c>)
    1120:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1122:	3013      	adds	r0, #19
    1124:	b2c0      	uxtb	r0, r0
    1126:	4b2b      	ldr	r3, [pc, #172]	; (11d4 <spi_init+0x304>)
    1128:	4798      	blx	r3
    112a:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    112c:	466b      	mov	r3, sp
    112e:	1d9a      	adds	r2, r3, #6
    1130:	69a0      	ldr	r0, [r4, #24]
    1132:	4b29      	ldr	r3, [pc, #164]	; (11d8 <spi_init+0x308>)
    1134:	4798      	blx	r3
    1136:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1138:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    113a:	2b00      	cmp	r3, #0
    113c:	d142      	bne.n	11c4 <spi_init+0x2f4>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    113e:	466b      	mov	r3, sp
    1140:	3306      	adds	r3, #6
    1142:	781b      	ldrb	r3, [r3, #0]
    1144:	7333      	strb	r3, [r6, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1146:	7823      	ldrb	r3, [r4, #0]
    1148:	2b00      	cmp	r3, #0
    114a:	d10f      	bne.n	116c <spi_init+0x29c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    114c:	69a7      	ldr	r7, [r4, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    114e:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1150:	6a70      	ldr	r0, [r6, #36]	; 0x24
    1152:	7fe1      	ldrb	r1, [r4, #31]
    1154:	0409      	lsls	r1, r1, #16
    1156:	7fa5      	ldrb	r5, [r4, #30]
    1158:	4329      	orrs	r1, r5
    115a:	4301      	orrs	r1, r0
    115c:	6271      	str	r1, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    115e:	2220      	movs	r2, #32
    1160:	5ca2      	ldrb	r2, [r4, r2]
    1162:	2a00      	cmp	r2, #0
    1164:	d004      	beq.n	1170 <spi_init+0x2a0>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1166:	2140      	movs	r1, #64	; 0x40
    1168:	430b      	orrs	r3, r1
    116a:	e001      	b.n	1170 <spi_init+0x2a0>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    116c:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    116e:	2700      	movs	r7, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1170:	6862      	ldr	r2, [r4, #4]
    1172:	68a1      	ldr	r1, [r4, #8]
    1174:	430a      	orrs	r2, r1
    1176:	68e1      	ldr	r1, [r4, #12]
    1178:	430a      	orrs	r2, r1
    117a:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
    117c:	7c21      	ldrb	r1, [r4, #16]
    117e:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1180:	7c61      	ldrb	r1, [r4, #17]
    1182:	2900      	cmp	r1, #0
    1184:	d103      	bne.n	118e <spi_init+0x2be>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1186:	491b      	ldr	r1, [pc, #108]	; (11f4 <spi_init+0x324>)
    1188:	7889      	ldrb	r1, [r1, #2]
    118a:	0789      	lsls	r1, r1, #30
    118c:	d501      	bpl.n	1192 <spi_init+0x2c2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    118e:	2180      	movs	r1, #128	; 0x80
    1190:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    1192:	7ca1      	ldrb	r1, [r4, #18]
    1194:	2900      	cmp	r1, #0
    1196:	d002      	beq.n	119e <spi_init+0x2ce>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1198:	2180      	movs	r1, #128	; 0x80
    119a:	0289      	lsls	r1, r1, #10
    119c:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    119e:	7ce1      	ldrb	r1, [r4, #19]
    11a0:	2900      	cmp	r1, #0
    11a2:	d002      	beq.n	11aa <spi_init+0x2da>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    11a4:	2180      	movs	r1, #128	; 0x80
    11a6:	0089      	lsls	r1, r1, #2
    11a8:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    11aa:	7d21      	ldrb	r1, [r4, #20]
    11ac:	2900      	cmp	r1, #0
    11ae:	d002      	beq.n	11b6 <spi_init+0x2e6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    11b0:	2180      	movs	r1, #128	; 0x80
    11b2:	0189      	lsls	r1, r1, #6
    11b4:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    11b6:	6831      	ldr	r1, [r6, #0]
    11b8:	430a      	orrs	r2, r1
    11ba:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    11bc:	6872      	ldr	r2, [r6, #4]
    11be:	4313      	orrs	r3, r2
    11c0:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    11c2:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    11c4:	b008      	add	sp, #32
    11c6:	bc1c      	pop	{r2, r3, r4}
    11c8:	4690      	mov	r8, r2
    11ca:	4699      	mov	r9, r3
    11cc:	46a2      	mov	sl, r4
    11ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11d0:	00000c3d 	.word	0x00000c3d
    11d4:	00001dfd 	.word	0x00001dfd
    11d8:	00000a01 	.word	0x00000a01
    11dc:	00000dc9 	.word	0x00000dc9
    11e0:	40000800 	.word	0x40000800
    11e4:	00001dd9 	.word	0x00001dd9
    11e8:	00001d69 	.word	0x00001d69
    11ec:	00000bf1 	.word	0x00000bf1
    11f0:	00001ed5 	.word	0x00001ed5
    11f4:	41002000 	.word	0x41002000

000011f8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    11f8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    11fa:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    11fc:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    11fe:	2c01      	cmp	r4, #1
    1200:	d172      	bne.n	12e8 <spi_select_slave+0xf0>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1202:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1204:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1206:	2c00      	cmp	r4, #0
    1208:	d16e      	bne.n	12e8 <spi_select_slave+0xf0>
#  endif
	{
		if (select) {
    120a:	2a00      	cmp	r2, #0
    120c:	d05b      	beq.n	12c6 <spi_select_slave+0xce>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    120e:	784b      	ldrb	r3, [r1, #1]
    1210:	2b00      	cmp	r3, #0
    1212:	d046      	beq.n	12a2 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1214:	6803      	ldr	r3, [r0, #0]
    1216:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1218:	07db      	lsls	r3, r3, #31
    121a:	d411      	bmi.n	1240 <spi_select_slave+0x48>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    121c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    121e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1220:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1222:	2900      	cmp	r1, #0
    1224:	d105      	bne.n	1232 <spi_select_slave+0x3a>
		return &(ports[port_index]->Group[group_index]);
    1226:	095a      	lsrs	r2, r3, #5
    1228:	01d2      	lsls	r2, r2, #7
    122a:	2182      	movs	r1, #130	; 0x82
    122c:	05c9      	lsls	r1, r1, #23
    122e:	468c      	mov	ip, r1
    1230:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1232:	211f      	movs	r1, #31
    1234:	400b      	ands	r3, r1
    1236:	391e      	subs	r1, #30
    1238:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    123a:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    123c:	2305      	movs	r3, #5
    123e:	e053      	b.n	12e8 <spi_select_slave+0xf0>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1240:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1242:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1244:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1246:	2c00      	cmp	r4, #0
    1248:	d105      	bne.n	1256 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    124a:	095a      	lsrs	r2, r3, #5
    124c:	01d2      	lsls	r2, r2, #7
    124e:	2482      	movs	r4, #130	; 0x82
    1250:	05e4      	lsls	r4, r4, #23
    1252:	46a4      	mov	ip, r4
    1254:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1256:	241f      	movs	r4, #31
    1258:	4023      	ands	r3, r4
    125a:	3c1e      	subs	r4, #30
    125c:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    125e:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1260:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1262:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1264:	07d2      	lsls	r2, r2, #31
    1266:	d501      	bpl.n	126c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1268:	788a      	ldrb	r2, [r1, #2]
    126a:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    126c:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    126e:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    1270:	2a00      	cmp	r2, #0
    1272:	d139      	bne.n	12e8 <spi_select_slave+0xf0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1274:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1276:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1278:	7e13      	ldrb	r3, [r2, #24]
    127a:	420b      	tst	r3, r1
    127c:	d0fc      	beq.n	1278 <spi_select_slave+0x80>
    127e:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1280:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1282:	0749      	lsls	r1, r1, #29
    1284:	d530      	bpl.n	12e8 <spi_select_slave+0xf0>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1286:	8b53      	ldrh	r3, [r2, #26]
    1288:	075b      	lsls	r3, r3, #29
    128a:	d501      	bpl.n	1290 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    128c:	2304      	movs	r3, #4
    128e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1290:	7983      	ldrb	r3, [r0, #6]
    1292:	2b01      	cmp	r3, #1
    1294:	d102      	bne.n	129c <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1296:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1298:	2300      	movs	r3, #0
    129a:	e025      	b.n	12e8 <spi_select_slave+0xf0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    129c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    129e:	2300      	movs	r3, #0
    12a0:	e022      	b.n	12e8 <spi_select_slave+0xf0>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    12a2:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12a4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12a6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12a8:	2900      	cmp	r1, #0
    12aa:	d105      	bne.n	12b8 <spi_select_slave+0xc0>
		return &(ports[port_index]->Group[group_index]);
    12ac:	095a      	lsrs	r2, r3, #5
    12ae:	01d2      	lsls	r2, r2, #7
    12b0:	2182      	movs	r1, #130	; 0x82
    12b2:	05c9      	lsls	r1, r1, #23
    12b4:	468c      	mov	ip, r1
    12b6:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12b8:	211f      	movs	r1, #31
    12ba:	400b      	ands	r3, r1
    12bc:	391e      	subs	r1, #30
    12be:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    12c0:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    12c2:	2300      	movs	r3, #0
    12c4:	e010      	b.n	12e8 <spi_select_slave+0xf0>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    12c6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12c8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12ca:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12cc:	2900      	cmp	r1, #0
    12ce:	d105      	bne.n	12dc <spi_select_slave+0xe4>
		return &(ports[port_index]->Group[group_index]);
    12d0:	095a      	lsrs	r2, r3, #5
    12d2:	01d2      	lsls	r2, r2, #7
    12d4:	2182      	movs	r1, #130	; 0x82
    12d6:	05c9      	lsls	r1, r1, #23
    12d8:	468c      	mov	ip, r1
    12da:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12dc:	211f      	movs	r1, #31
    12de:	400b      	ands	r3, r1
    12e0:	391e      	subs	r1, #30
    12e2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    12e4:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    12e6:	2300      	movs	r3, #0
}
    12e8:	0018      	movs	r0, r3
    12ea:	bd10      	pop	{r4, pc}

000012ec <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    12ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ee:	465f      	mov	r7, fp
    12f0:	4656      	mov	r6, sl
    12f2:	464d      	mov	r5, r9
    12f4:	4644      	mov	r4, r8
    12f6:	b4f0      	push	{r4, r5, r6, r7}
    12f8:	b091      	sub	sp, #68	; 0x44
    12fa:	0005      	movs	r5, r0
    12fc:	000c      	movs	r4, r1
    12fe:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1300:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1302:	0008      	movs	r0, r1
    1304:	4bcf      	ldr	r3, [pc, #828]	; (1644 <usart_init+0x358>)
    1306:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
    1308:	2805      	cmp	r0, #5
    130a:	d002      	beq.n	1312 <usart_init+0x26>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    130c:	0007      	movs	r7, r0
    130e:	3713      	adds	r7, #19
    1310:	e000      	b.n	1314 <usart_init+0x28>
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    1312:	2719      	movs	r7, #25
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1314:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1316:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1318:	07d2      	lsls	r2, r2, #31
    131a:	d500      	bpl.n	131e <usart_init+0x32>
    131c:	e18a      	b.n	1634 <usart_init+0x348>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    131e:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1320:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1322:	0792      	lsls	r2, r2, #30
    1324:	d500      	bpl.n	1328 <usart_init+0x3c>
    1326:	e185      	b.n	1634 <usart_init+0x348>
    1328:	49c7      	ldr	r1, [pc, #796]	; (1648 <usart_init+0x35c>)
    132a:	69ca      	ldr	r2, [r1, #28]
    132c:	3001      	adds	r0, #1
    132e:	3b1b      	subs	r3, #27
    1330:	4083      	lsls	r3, r0
    1332:	4313      	orrs	r3, r2
    1334:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1336:	a90f      	add	r1, sp, #60	; 0x3c
    1338:	2335      	movs	r3, #53	; 0x35
    133a:	4698      	mov	r8, r3
    133c:	5cf3      	ldrb	r3, [r6, r3]
    133e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1340:	b2ff      	uxtb	r7, r7
    1342:	0038      	movs	r0, r7
    1344:	4bc1      	ldr	r3, [pc, #772]	; (164c <usart_init+0x360>)
    1346:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1348:	0038      	movs	r0, r7
    134a:	4bc1      	ldr	r3, [pc, #772]	; (1650 <usart_init+0x364>)
    134c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    134e:	4643      	mov	r3, r8
    1350:	5cf0      	ldrb	r0, [r6, r3]
    1352:	2100      	movs	r1, #0
    1354:	4bbf      	ldr	r3, [pc, #764]	; (1654 <usart_init+0x368>)
    1356:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1358:	7af3      	ldrb	r3, [r6, #11]
    135a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    135c:	232c      	movs	r3, #44	; 0x2c
    135e:	5cf3      	ldrb	r3, [r6, r3]
    1360:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1362:	232d      	movs	r3, #45	; 0x2d
    1364:	5cf3      	ldrb	r3, [r6, r3]
    1366:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1368:	7ef3      	ldrb	r3, [r6, #27]
    136a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    136c:	2324      	movs	r3, #36	; 0x24
    136e:	5cf3      	ldrb	r3, [r6, r3]
    1370:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1372:	682b      	ldr	r3, [r5, #0]
    1374:	9302      	str	r3, [sp, #8]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1376:	0018      	movs	r0, r3
    1378:	4bb2      	ldr	r3, [pc, #712]	; (1644 <usart_init+0x358>)
    137a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    137c:	3013      	adds	r0, #19
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    137e:	2200      	movs	r2, #0
    1380:	230e      	movs	r3, #14
    1382:	a906      	add	r1, sp, #24
    1384:	468c      	mov	ip, r1
    1386:	4463      	add	r3, ip
    1388:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    138a:	8a33      	ldrh	r3, [r6, #16]
    138c:	4699      	mov	r9, r3
    138e:	2380      	movs	r3, #128	; 0x80
    1390:	01db      	lsls	r3, r3, #7
    1392:	4599      	cmp	r9, r3
    1394:	d019      	beq.n	13ca <usart_init+0xde>
    1396:	d804      	bhi.n	13a2 <usart_init+0xb6>
    1398:	2380      	movs	r3, #128	; 0x80
    139a:	019b      	lsls	r3, r3, #6
    139c:	4599      	cmp	r9, r3
    139e:	d00a      	beq.n	13b6 <usart_init+0xca>
    13a0:	e129      	b.n	15f6 <usart_init+0x30a>
    13a2:	23c0      	movs	r3, #192	; 0xc0
    13a4:	01db      	lsls	r3, r3, #7
    13a6:	4599      	cmp	r9, r3
    13a8:	d00a      	beq.n	13c0 <usart_init+0xd4>
    13aa:	2380      	movs	r3, #128	; 0x80
    13ac:	021b      	lsls	r3, r3, #8
    13ae:	4599      	cmp	r9, r3
    13b0:	d100      	bne.n	13b4 <usart_init+0xc8>
    13b2:	e125      	b.n	1600 <usart_init+0x314>
    13b4:	e11f      	b.n	15f6 <usart_init+0x30a>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13b6:	2310      	movs	r3, #16
    13b8:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    13ba:	3b0f      	subs	r3, #15
    13bc:	9307      	str	r3, [sp, #28]
    13be:	e123      	b.n	1608 <usart_init+0x31c>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    13c0:	2308      	movs	r3, #8
    13c2:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    13c4:	3b07      	subs	r3, #7
    13c6:	9307      	str	r3, [sp, #28]
    13c8:	e11e      	b.n	1608 <usart_init+0x31c>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    13ca:	6833      	ldr	r3, [r6, #0]
    13cc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    13ce:	68f3      	ldr	r3, [r6, #12]
    13d0:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    13d2:	6973      	ldr	r3, [r6, #20]
    13d4:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    13d6:	7e33      	ldrb	r3, [r6, #24]
    13d8:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    13da:	232e      	movs	r3, #46	; 0x2e
    13dc:	5cf3      	ldrb	r3, [r6, r3]
    13de:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    13e0:	6873      	ldr	r3, [r6, #4]
    13e2:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    13e4:	2b00      	cmp	r3, #0
    13e6:	d015      	beq.n	1414 <usart_init+0x128>
    13e8:	2380      	movs	r3, #128	; 0x80
    13ea:	055b      	lsls	r3, r3, #21
    13ec:	459a      	cmp	sl, r3
    13ee:	d136      	bne.n	145e <usart_init+0x172>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    13f0:	232f      	movs	r3, #47	; 0x2f
    13f2:	5cf3      	ldrb	r3, [r6, r3]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d136      	bne.n	1466 <usart_init+0x17a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    13f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    13fa:	001f      	movs	r7, r3
    13fc:	b2c0      	uxtb	r0, r0
    13fe:	4b96      	ldr	r3, [pc, #600]	; (1658 <usart_init+0x36c>)
    1400:	4798      	blx	r3
    1402:	0001      	movs	r1, r0
    1404:	220e      	movs	r2, #14
    1406:	ab06      	add	r3, sp, #24
    1408:	469c      	mov	ip, r3
    140a:	4462      	add	r2, ip
    140c:	0038      	movs	r0, r7
    140e:	4b93      	ldr	r3, [pc, #588]	; (165c <usart_init+0x370>)
    1410:	4798      	blx	r3
    1412:	e025      	b.n	1460 <usart_init+0x174>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1414:	2308      	movs	r3, #8
    1416:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1418:	2300      	movs	r3, #0
    141a:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    141c:	232f      	movs	r3, #47	; 0x2f
    141e:	5cf3      	ldrb	r3, [r6, r3]
    1420:	2b00      	cmp	r3, #0
    1422:	d00b      	beq.n	143c <usart_init+0x150>
				status_code =
    1424:	9b06      	ldr	r3, [sp, #24]
    1426:	9300      	str	r3, [sp, #0]
    1428:	9b07      	ldr	r3, [sp, #28]
    142a:	220e      	movs	r2, #14
    142c:	a906      	add	r1, sp, #24
    142e:	468c      	mov	ip, r1
    1430:	4462      	add	r2, ip
    1432:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1434:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1436:	4f8a      	ldr	r7, [pc, #552]	; (1660 <usart_init+0x374>)
    1438:	47b8      	blx	r7
    143a:	e011      	b.n	1460 <usart_init+0x174>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    143c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    143e:	001f      	movs	r7, r3
    1440:	b2c0      	uxtb	r0, r0
    1442:	4b85      	ldr	r3, [pc, #532]	; (1658 <usart_init+0x36c>)
    1444:	4798      	blx	r3
    1446:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1448:	9b06      	ldr	r3, [sp, #24]
    144a:	9300      	str	r3, [sp, #0]
    144c:	9b07      	ldr	r3, [sp, #28]
    144e:	220e      	movs	r2, #14
    1450:	a806      	add	r0, sp, #24
    1452:	4684      	mov	ip, r0
    1454:	4462      	add	r2, ip
    1456:	0038      	movs	r0, r7
    1458:	4f81      	ldr	r7, [pc, #516]	; (1660 <usart_init+0x374>)
    145a:	47b8      	blx	r7
    145c:	e000      	b.n	1460 <usart_init+0x174>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    145e:	2000      	movs	r0, #0
    1460:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1462:	d000      	beq.n	1466 <usart_init+0x17a>
    1464:	e0e6      	b.n	1634 <usart_init+0x348>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1466:	7e73      	ldrb	r3, [r6, #25]
    1468:	2b00      	cmp	r3, #0
    146a:	d002      	beq.n	1472 <usart_init+0x186>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    146c:	7eb3      	ldrb	r3, [r6, #26]
    146e:	9a02      	ldr	r2, [sp, #8]
    1470:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1472:	682a      	ldr	r2, [r5, #0]
    1474:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1476:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1478:	2b00      	cmp	r3, #0
    147a:	d1fc      	bne.n	1476 <usart_init+0x18a>
    147c:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    147e:	330e      	adds	r3, #14
    1480:	a906      	add	r1, sp, #24
    1482:	468c      	mov	ip, r1
    1484:	4463      	add	r3, ip
    1486:	881b      	ldrh	r3, [r3, #0]
    1488:	81bb      	strh	r3, [r7, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    148a:	9b05      	ldr	r3, [sp, #20]
    148c:	465a      	mov	r2, fp
    148e:	4313      	orrs	r3, r2
    1490:	9a03      	ldr	r2, [sp, #12]
    1492:	4313      	orrs	r3, r2
    1494:	4652      	mov	r2, sl
    1496:	4313      	orrs	r3, r2
    1498:	464a      	mov	r2, r9
    149a:	4313      	orrs	r3, r2
    149c:	9a04      	ldr	r2, [sp, #16]
    149e:	0210      	lsls	r0, r2, #8
    14a0:	4303      	orrs	r3, r0
    14a2:	4642      	mov	r2, r8
    14a4:	0750      	lsls	r0, r2, #29
    14a6:	4318      	orrs	r0, r3

	if (config->use_external_clock == false) {
    14a8:	232f      	movs	r3, #47	; 0x2f
    14aa:	5cf3      	ldrb	r3, [r6, r3]
    14ac:	2b00      	cmp	r3, #0
    14ae:	d101      	bne.n	14b4 <usart_init+0x1c8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    14b0:	3304      	adds	r3, #4
    14b2:	4318      	orrs	r0, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    14b4:	7e71      	ldrb	r1, [r6, #25]
    14b6:	0289      	lsls	r1, r1, #10
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14b8:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    14ba:	5cf3      	ldrb	r3, [r6, r3]
    14bc:	025b      	lsls	r3, r3, #9
    14be:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14c0:	2326      	movs	r3, #38	; 0x26
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    14c2:	5cf3      	ldrb	r3, [r6, r3]
    14c4:	021b      	lsls	r3, r3, #8
    14c6:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14c8:	232c      	movs	r3, #44	; 0x2c
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    14ca:	5cf3      	ldrb	r3, [r6, r3]
    14cc:	045b      	lsls	r3, r3, #17
    14ce:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    14d0:	232d      	movs	r3, #45	; 0x2d
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    14d2:	5cf2      	ldrb	r2, [r6, r3]
    14d4:	0412      	lsls	r2, r2, #16
    14d6:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    14d8:	7af3      	ldrb	r3, [r6, #11]
    14da:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    14dc:	8933      	ldrh	r3, [r6, #8]
    14de:	2bff      	cmp	r3, #255	; 0xff
    14e0:	d004      	beq.n	14ec <usart_init+0x200>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    14e2:	2280      	movs	r2, #128	; 0x80
    14e4:	0452      	lsls	r2, r2, #17
    14e6:	4310      	orrs	r0, r2
		ctrlb |= config->parity;
    14e8:	4319      	orrs	r1, r3
    14ea:	e005      	b.n	14f8 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    14ec:	7ef3      	ldrb	r3, [r6, #27]
    14ee:	2b00      	cmp	r3, #0
    14f0:	d002      	beq.n	14f8 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    14f2:	2380      	movs	r3, #128	; 0x80
    14f4:	04db      	lsls	r3, r3, #19
    14f6:	4318      	orrs	r0, r3
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    14f8:	9f02      	ldr	r7, [sp, #8]
    14fa:	68bb      	ldr	r3, [r7, #8]
						| config->lin_header_delay
						| config->lin_break_length;
    14fc:	2207      	movs	r2, #7
    14fe:	4013      	ands	r3, r2
    1500:	8c32      	ldrh	r2, [r6, #32]
    1502:	4313      	orrs	r3, r2
    1504:	8c72      	ldrh	r2, [r6, #34]	; 0x22
    1506:	4313      	orrs	r3, r2
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1508:	60bb      	str	r3, [r7, #8]
						| config->lin_header_delay
						| config->lin_break_length;

	if (config->lin_node != LIN_INVALID_MODE) {
    150a:	69f2      	ldr	r2, [r6, #28]
    150c:	2a00      	cmp	r2, #0
    150e:	d002      	beq.n	1516 <usart_init+0x22a>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    1510:	4b54      	ldr	r3, [pc, #336]	; (1664 <usart_init+0x378>)
    1512:	4018      	ands	r0, r3
		ctrla |= config->lin_node;
    1514:	4310      	orrs	r0, r2
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1516:	2334      	movs	r3, #52	; 0x34
    1518:	5cf3      	ldrb	r3, [r6, r3]
    151a:	2b00      	cmp	r3, #0
    151c:	d103      	bne.n	1526 <usart_init+0x23a>
    151e:	4b52      	ldr	r3, [pc, #328]	; (1668 <usart_init+0x37c>)
    1520:	789b      	ldrb	r3, [r3, #2]
    1522:	079b      	lsls	r3, r3, #30
    1524:	d501      	bpl.n	152a <usart_init+0x23e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1526:	2380      	movs	r3, #128	; 0x80
    1528:	4318      	orrs	r0, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    152a:	682a      	ldr	r2, [r5, #0]
    152c:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    152e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1530:	2b00      	cmp	r3, #0
    1532:	d1fc      	bne.n	152e <usart_init+0x242>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1534:	6079      	str	r1, [r7, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1536:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1538:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    153a:	2b00      	cmp	r3, #0
    153c:	d1fc      	bne.n	1538 <usart_init+0x24c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    153e:	6038      	str	r0, [r7, #0]

#ifdef FEATURE_USART_RS485
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    1540:	683a      	ldr	r2, [r7, #0]
    1542:	23f0      	movs	r3, #240	; 0xf0
    1544:	051b      	lsls	r3, r3, #20
    1546:	4013      	ands	r3, r2
    1548:	22e0      	movs	r2, #224	; 0xe0
    154a:	04d2      	lsls	r2, r2, #19
    154c:	4293      	cmp	r3, r2
    154e:	d03f      	beq.n	15d0 <usart_init+0x2e4>
		SERCOM_USART_CTRLA_FORM(0x07)) {
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    1550:	68bb      	ldr	r3, [r7, #8]
    1552:	2207      	movs	r2, #7
    1554:	4393      	bics	r3, r2
    1556:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1558:	68ba      	ldr	r2, [r7, #8]
    155a:	2325      	movs	r3, #37	; 0x25
    155c:	5cf3      	ldrb	r3, [r6, r3]
    155e:	2107      	movs	r1, #7
    1560:	400b      	ands	r3, r1
    1562:	4313      	orrs	r3, r2
    1564:	60bb      	str	r3, [r7, #8]
    1566:	e033      	b.n	15d0 <usart_init+0x2e4>
    1568:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    156a:	00bb      	lsls	r3, r7, #2
    156c:	aa0a      	add	r2, sp, #40	; 0x28
    156e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1570:	2800      	cmp	r0, #0
    1572:	d102      	bne.n	157a <usart_init+0x28e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1574:	0020      	movs	r0, r4
    1576:	4b3d      	ldr	r3, [pc, #244]	; (166c <usart_init+0x380>)
    1578:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    157a:	1c43      	adds	r3, r0, #1
    157c:	d005      	beq.n	158a <usart_init+0x29e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    157e:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1580:	0c00      	lsrs	r0, r0, #16
    1582:	b2c0      	uxtb	r0, r0
    1584:	0031      	movs	r1, r6
    1586:	4b3a      	ldr	r3, [pc, #232]	; (1670 <usart_init+0x384>)
    1588:	4798      	blx	r3
    158a:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    158c:	2f04      	cmp	r7, #4
    158e:	d1eb      	bne.n	1568 <usart_init+0x27c>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    1590:	2300      	movs	r3, #0
    1592:	60eb      	str	r3, [r5, #12]
    1594:	612b      	str	r3, [r5, #16]
    1596:	616b      	str	r3, [r5, #20]
    1598:	61ab      	str	r3, [r5, #24]
    159a:	61eb      	str	r3, [r5, #28]
    159c:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    159e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    15a0:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    15a2:	2200      	movs	r2, #0
    15a4:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    15a6:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    15a8:	3330      	adds	r3, #48	; 0x30
    15aa:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    15ac:	3301      	adds	r3, #1
    15ae:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    15b0:	3301      	adds	r3, #1
    15b2:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    15b4:	3301      	adds	r3, #1
    15b6:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    15b8:	6828      	ldr	r0, [r5, #0]
    15ba:	4b22      	ldr	r3, [pc, #136]	; (1644 <usart_init+0x358>)
    15bc:	4798      	blx	r3
    15be:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    15c0:	492c      	ldr	r1, [pc, #176]	; (1674 <usart_init+0x388>)
    15c2:	4b2d      	ldr	r3, [pc, #180]	; (1678 <usart_init+0x38c>)
    15c4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    15c6:	00a4      	lsls	r4, r4, #2
    15c8:	4b2c      	ldr	r3, [pc, #176]	; (167c <usart_init+0x390>)
    15ca:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    15cc:	2300      	movs	r3, #0
    15ce:	e031      	b.n	1634 <usart_init+0x348>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    15d0:	ab0e      	add	r3, sp, #56	; 0x38
    15d2:	2280      	movs	r2, #128	; 0x80
    15d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    15d6:	2200      	movs	r2, #0
    15d8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    15da:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    15dc:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    15de:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    15e0:	930a      	str	r3, [sp, #40]	; 0x28
    15e2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    15e4:	930b      	str	r3, [sp, #44]	; 0x2c
    15e6:	6c33      	ldr	r3, [r6, #64]	; 0x40
    15e8:	930c      	str	r3, [sp, #48]	; 0x30
    15ea:	6c73      	ldr	r3, [r6, #68]	; 0x44
    15ec:	9302      	str	r3, [sp, #8]
    15ee:	930d      	str	r3, [sp, #52]	; 0x34
    15f0:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    15f2:	ae0e      	add	r6, sp, #56	; 0x38
    15f4:	e7b8      	b.n	1568 <usart_init+0x27c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    15f6:	2310      	movs	r3, #16
    15f8:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    15fa:	2300      	movs	r3, #0
    15fc:	9307      	str	r3, [sp, #28]
    15fe:	e003      	b.n	1608 <usart_init+0x31c>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1600:	2303      	movs	r3, #3
    1602:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1604:	2300      	movs	r3, #0
    1606:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1608:	6833      	ldr	r3, [r6, #0]
    160a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    160c:	68f3      	ldr	r3, [r6, #12]
    160e:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1610:	6973      	ldr	r3, [r6, #20]
    1612:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1614:	7e33      	ldrb	r3, [r6, #24]
    1616:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1618:	232e      	movs	r3, #46	; 0x2e
    161a:	5cf3      	ldrb	r3, [r6, r3]
    161c:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    161e:	6873      	ldr	r3, [r6, #4]
    1620:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1622:	2b00      	cmp	r3, #0
    1624:	d100      	bne.n	1628 <usart_init+0x33c>
    1626:	e6f9      	b.n	141c <usart_init+0x130>
    1628:	2380      	movs	r3, #128	; 0x80
    162a:	055b      	lsls	r3, r3, #21
    162c:	459a      	cmp	sl, r3
    162e:	d100      	bne.n	1632 <usart_init+0x346>
    1630:	e6de      	b.n	13f0 <usart_init+0x104>
    1632:	e718      	b.n	1466 <usart_init+0x17a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1634:	0018      	movs	r0, r3
    1636:	b011      	add	sp, #68	; 0x44
    1638:	bc3c      	pop	{r2, r3, r4, r5}
    163a:	4690      	mov	r8, r2
    163c:	4699      	mov	r9, r3
    163e:	46a2      	mov	sl, r4
    1640:	46ab      	mov	fp, r5
    1642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1644:	00000dc9 	.word	0x00000dc9
    1648:	40000800 	.word	0x40000800
    164c:	00001dd9 	.word	0x00001dd9
    1650:	00001d69 	.word	0x00001d69
    1654:	00000bf1 	.word	0x00000bf1
    1658:	00001dfd 	.word	0x00001dfd
    165c:	00000a01 	.word	0x00000a01
    1660:	00000a29 	.word	0x00000a29
    1664:	f0ffffff 	.word	0xf0ffffff
    1668:	41002000 	.word	0x41002000
    166c:	00000c3d 	.word	0x00000c3d
    1670:	00001ed5 	.word	0x00001ed5
    1674:	0000171d 	.word	0x0000171d
    1678:	00000e09 	.word	0x00000e09
    167c:	200001d0 	.word	0x200001d0

00001680 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1680:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1682:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1684:	2a00      	cmp	r2, #0
    1686:	d00e      	beq.n	16a6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1688:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    168a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    168c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    168e:	2a00      	cmp	r2, #0
    1690:	d109      	bne.n	16a6 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1692:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1694:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1696:	2a00      	cmp	r2, #0
    1698:	d1fc      	bne.n	1694 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    169a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    169c:	2102      	movs	r1, #2
    169e:	7e1a      	ldrb	r2, [r3, #24]
    16a0:	420a      	tst	r2, r1
    16a2:	d0fc      	beq.n	169e <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    16a4:	2300      	movs	r3, #0
}
    16a6:	0018      	movs	r0, r3
    16a8:	4770      	bx	lr
    16aa:	46c0      	nop			; (mov r8, r8)

000016ac <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    16ac:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    16ae:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    16b0:	2a00      	cmp	r2, #0
    16b2:	d030      	beq.n	1716 <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    16b4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    16b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    16b8:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    16ba:	2a00      	cmp	r2, #0
    16bc:	d12b      	bne.n	1716 <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    16be:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    16c0:	7e10      	ldrb	r0, [r2, #24]
    16c2:	0740      	lsls	r0, r0, #29
    16c4:	d527      	bpl.n	1716 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16c6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    16c8:	2b00      	cmp	r3, #0
    16ca:	d1fc      	bne.n	16c6 <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16cc:	8b53      	ldrh	r3, [r2, #26]
    16ce:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    16d0:	0658      	lsls	r0, r3, #25
    16d2:	d01d      	beq.n	1710 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    16d4:	0798      	lsls	r0, r3, #30
    16d6:	d503      	bpl.n	16e0 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    16d8:	2302      	movs	r3, #2
    16da:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    16dc:	3318      	adds	r3, #24
    16de:	e01a      	b.n	1716 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    16e0:	0758      	lsls	r0, r3, #29
    16e2:	d503      	bpl.n	16ec <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    16e4:	2304      	movs	r3, #4
    16e6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    16e8:	331a      	adds	r3, #26
    16ea:	e014      	b.n	1716 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    16ec:	07d8      	lsls	r0, r3, #31
    16ee:	d503      	bpl.n	16f8 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    16f0:	2301      	movs	r3, #1
    16f2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    16f4:	3312      	adds	r3, #18
    16f6:	e00e      	b.n	1716 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    16f8:	06d8      	lsls	r0, r3, #27
    16fa:	d503      	bpl.n	1704 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    16fc:	2310      	movs	r3, #16
    16fe:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    1700:	3332      	adds	r3, #50	; 0x32
    1702:	e008      	b.n	1716 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1704:	069b      	lsls	r3, r3, #26
    1706:	d503      	bpl.n	1710 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1708:	2320      	movs	r3, #32
    170a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    170c:	3321      	adds	r3, #33	; 0x21
    170e:	e002      	b.n	1716 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1710:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1712:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1714:	2300      	movs	r3, #0
}
    1716:	0018      	movs	r0, r3
    1718:	4770      	bx	lr
    171a:	46c0      	nop			; (mov r8, r8)

0000171c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    171e:	0080      	lsls	r0, r0, #2
    1720:	4b61      	ldr	r3, [pc, #388]	; (18a8 <_usart_interrupt_handler+0x18c>)
    1722:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1724:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1726:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1728:	2b00      	cmp	r3, #0
    172a:	d1fc      	bne.n	1726 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    172c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    172e:	7da6      	ldrb	r6, [r4, #22]
    1730:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1732:	2330      	movs	r3, #48	; 0x30
    1734:	5ceb      	ldrb	r3, [r5, r3]
    1736:	2231      	movs	r2, #49	; 0x31
    1738:	5caf      	ldrb	r7, [r5, r2]
    173a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    173c:	07f3      	lsls	r3, r6, #31
    173e:	d522      	bpl.n	1786 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1740:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1742:	b29b      	uxth	r3, r3
    1744:	2b00      	cmp	r3, #0
    1746:	d01c      	beq.n	1782 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1748:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    174a:	7813      	ldrb	r3, [r2, #0]
    174c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    174e:	1c51      	adds	r1, r2, #1
    1750:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1752:	7969      	ldrb	r1, [r5, #5]
    1754:	2901      	cmp	r1, #1
    1756:	d001      	beq.n	175c <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1758:	b29b      	uxth	r3, r3
    175a:	e004      	b.n	1766 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    175c:	7851      	ldrb	r1, [r2, #1]
    175e:	0209      	lsls	r1, r1, #8
    1760:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1762:	3202      	adds	r2, #2
    1764:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1766:	05db      	lsls	r3, r3, #23
    1768:	0ddb      	lsrs	r3, r3, #23
    176a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    176c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    176e:	3b01      	subs	r3, #1
    1770:	b29b      	uxth	r3, r3
    1772:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1774:	2b00      	cmp	r3, #0
    1776:	d106      	bne.n	1786 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1778:	3301      	adds	r3, #1
    177a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    177c:	3301      	adds	r3, #1
    177e:	75a3      	strb	r3, [r4, #22]
    1780:	e001      	b.n	1786 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1782:	2301      	movs	r3, #1
    1784:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1786:	07b3      	lsls	r3, r6, #30
    1788:	d509      	bpl.n	179e <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    178a:	2302      	movs	r3, #2
    178c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    178e:	2200      	movs	r2, #0
    1790:	3331      	adds	r3, #49	; 0x31
    1792:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1794:	07fb      	lsls	r3, r7, #31
    1796:	d502      	bpl.n	179e <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1798:	0028      	movs	r0, r5
    179a:	68eb      	ldr	r3, [r5, #12]
    179c:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    179e:	0773      	lsls	r3, r6, #29
    17a0:	d563      	bpl.n	186a <_usart_interrupt_handler+0x14e>

		if (module->remaining_rx_buffer_length) {
    17a2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    17a4:	b29b      	uxth	r3, r3
    17a6:	2b00      	cmp	r3, #0
    17a8:	d05d      	beq.n	1866 <_usart_interrupt_handler+0x14a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    17aa:	8b63      	ldrh	r3, [r4, #26]
    17ac:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    17ae:	071a      	lsls	r2, r3, #28
    17b0:	d402      	bmi.n	17b8 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    17b2:	227f      	movs	r2, #127	; 0x7f
    17b4:	4013      	ands	r3, r2
    17b6:	e001      	b.n	17bc <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    17b8:	2277      	movs	r2, #119	; 0x77
    17ba:	4013      	ands	r3, r2
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    17bc:	065a      	lsls	r2, r3, #25
    17be:	d501      	bpl.n	17c4 <_usart_interrupt_handler+0xa8>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    17c0:	2240      	movs	r2, #64	; 0x40
    17c2:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    17c4:	2b00      	cmp	r3, #0
    17c6:	d02c      	beq.n	1822 <_usart_interrupt_handler+0x106>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    17c8:	079a      	lsls	r2, r3, #30
    17ca:	d505      	bpl.n	17d8 <_usart_interrupt_handler+0xbc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    17cc:	221a      	movs	r2, #26
    17ce:	2332      	movs	r3, #50	; 0x32
    17d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    17d2:	3b30      	subs	r3, #48	; 0x30
    17d4:	8363      	strh	r3, [r4, #26]
    17d6:	e01e      	b.n	1816 <_usart_interrupt_handler+0xfa>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    17d8:	075a      	lsls	r2, r3, #29
    17da:	d505      	bpl.n	17e8 <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    17dc:	221e      	movs	r2, #30
    17de:	2332      	movs	r3, #50	; 0x32
    17e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    17e2:	3b2e      	subs	r3, #46	; 0x2e
    17e4:	8363      	strh	r3, [r4, #26]
    17e6:	e016      	b.n	1816 <_usart_interrupt_handler+0xfa>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    17e8:	07da      	lsls	r2, r3, #31
    17ea:	d505      	bpl.n	17f8 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    17ec:	2213      	movs	r2, #19
    17ee:	2332      	movs	r3, #50	; 0x32
    17f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    17f2:	3b31      	subs	r3, #49	; 0x31
    17f4:	8363      	strh	r3, [r4, #26]
    17f6:	e00e      	b.n	1816 <_usart_interrupt_handler+0xfa>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    17f8:	06da      	lsls	r2, r3, #27
    17fa:	d505      	bpl.n	1808 <_usart_interrupt_handler+0xec>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    17fc:	2242      	movs	r2, #66	; 0x42
    17fe:	2332      	movs	r3, #50	; 0x32
    1800:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1802:	3b22      	subs	r3, #34	; 0x22
    1804:	8363      	strh	r3, [r4, #26]
    1806:	e006      	b.n	1816 <_usart_interrupt_handler+0xfa>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1808:	069b      	lsls	r3, r3, #26
    180a:	d504      	bpl.n	1816 <_usart_interrupt_handler+0xfa>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    180c:	2241      	movs	r2, #65	; 0x41
    180e:	2332      	movs	r3, #50	; 0x32
    1810:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1812:	3b12      	subs	r3, #18
    1814:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1816:	077b      	lsls	r3, r7, #29
    1818:	d527      	bpl.n	186a <_usart_interrupt_handler+0x14e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    181a:	0028      	movs	r0, r5
    181c:	696b      	ldr	r3, [r5, #20]
    181e:	4798      	blx	r3
    1820:	e023      	b.n	186a <_usart_interrupt_handler+0x14e>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1822:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1824:	05db      	lsls	r3, r3, #23
    1826:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1828:	b2da      	uxtb	r2, r3
    182a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    182c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    182e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1830:	1c51      	adds	r1, r2, #1
    1832:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1834:	7969      	ldrb	r1, [r5, #5]
    1836:	2901      	cmp	r1, #1
    1838:	d104      	bne.n	1844 <_usart_interrupt_handler+0x128>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    183a:	0a1b      	lsrs	r3, r3, #8
    183c:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    183e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1840:	3301      	adds	r3, #1
    1842:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1844:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1846:	3b01      	subs	r3, #1
    1848:	b29b      	uxth	r3, r3
    184a:	85ab      	strh	r3, [r5, #44]	; 0x2c
    184c:	2b00      	cmp	r3, #0
    184e:	d10c      	bne.n	186a <_usart_interrupt_handler+0x14e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1850:	3304      	adds	r3, #4
    1852:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1854:	2200      	movs	r2, #0
    1856:	332e      	adds	r3, #46	; 0x2e
    1858:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    185a:	07bb      	lsls	r3, r7, #30
    185c:	d505      	bpl.n	186a <_usart_interrupt_handler+0x14e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    185e:	0028      	movs	r0, r5
    1860:	692b      	ldr	r3, [r5, #16]
    1862:	4798      	blx	r3
    1864:	e001      	b.n	186a <_usart_interrupt_handler+0x14e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1866:	2304      	movs	r3, #4
    1868:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    186a:	06f3      	lsls	r3, r6, #27
    186c:	d507      	bpl.n	187e <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    186e:	2310      	movs	r3, #16
    1870:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1872:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1874:	06fb      	lsls	r3, r7, #27
    1876:	d502      	bpl.n	187e <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1878:	0028      	movs	r0, r5
    187a:	69eb      	ldr	r3, [r5, #28]
    187c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    187e:	06b3      	lsls	r3, r6, #26
    1880:	d507      	bpl.n	1892 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1882:	2320      	movs	r3, #32
    1884:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1886:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1888:	073b      	lsls	r3, r7, #28
    188a:	d502      	bpl.n	1892 <_usart_interrupt_handler+0x176>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    188c:	0028      	movs	r0, r5
    188e:	69ab      	ldr	r3, [r5, #24]
    1890:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1892:	0733      	lsls	r3, r6, #28
    1894:	d507      	bpl.n	18a6 <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1896:	2308      	movs	r3, #8
    1898:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    189a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    189c:	06bb      	lsls	r3, r7, #26
    189e:	d502      	bpl.n	18a6 <_usart_interrupt_handler+0x18a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    18a0:	6a2b      	ldr	r3, [r5, #32]
    18a2:	0028      	movs	r0, r5
    18a4:	4798      	blx	r3
		}
	}
#endif
}
    18a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18a8:	200001d0 	.word	0x200001d0

000018ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    18ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ae:	4647      	mov	r7, r8
    18b0:	b480      	push	{r7}
    18b2:	000c      	movs	r4, r1
    18b4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    18b6:	2800      	cmp	r0, #0
    18b8:	d10d      	bne.n	18d6 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    18ba:	2a00      	cmp	r2, #0
    18bc:	dd0e      	ble.n	18dc <_read+0x30>
    18be:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    18c0:	4e08      	ldr	r6, [pc, #32]	; (18e4 <_read+0x38>)
    18c2:	4d09      	ldr	r5, [pc, #36]	; (18e8 <_read+0x3c>)
    18c4:	6830      	ldr	r0, [r6, #0]
    18c6:	0021      	movs	r1, r4
    18c8:	682b      	ldr	r3, [r5, #0]
    18ca:	4798      	blx	r3
		ptr++;
    18cc:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    18ce:	42a7      	cmp	r7, r4
    18d0:	d1f8      	bne.n	18c4 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    18d2:	4640      	mov	r0, r8
    18d4:	e003      	b.n	18de <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    18d6:	2001      	movs	r0, #1
    18d8:	4240      	negs	r0, r0
    18da:	e000      	b.n	18de <_read+0x32>
	}

	for (; len > 0; --len) {
    18dc:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    18de:	bc04      	pop	{r2}
    18e0:	4690      	mov	r8, r2
    18e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18e4:	200001f0 	.word	0x200001f0
    18e8:	200001e8 	.word	0x200001e8

000018ec <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    18ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ee:	4647      	mov	r7, r8
    18f0:	b480      	push	{r7}
    18f2:	000e      	movs	r6, r1
    18f4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    18f6:	3801      	subs	r0, #1
    18f8:	2802      	cmp	r0, #2
    18fa:	d811      	bhi.n	1920 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    18fc:	2a00      	cmp	r2, #0
    18fe:	d012      	beq.n	1926 <_write+0x3a>
    1900:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1902:	4b0c      	ldr	r3, [pc, #48]	; (1934 <_write+0x48>)
    1904:	4698      	mov	r8, r3
    1906:	4f0c      	ldr	r7, [pc, #48]	; (1938 <_write+0x4c>)
    1908:	4643      	mov	r3, r8
    190a:	6818      	ldr	r0, [r3, #0]
    190c:	5d31      	ldrb	r1, [r6, r4]
    190e:	683b      	ldr	r3, [r7, #0]
    1910:	4798      	blx	r3
    1912:	2800      	cmp	r0, #0
    1914:	db09      	blt.n	192a <_write+0x3e>
			return -1;
		}
		++nChars;
    1916:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1918:	42a5      	cmp	r5, r4
    191a:	d1f5      	bne.n	1908 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    191c:	0020      	movs	r0, r4
    191e:	e006      	b.n	192e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1920:	2001      	movs	r0, #1
    1922:	4240      	negs	r0, r0
    1924:	e003      	b.n	192e <_write+0x42>
	}

	for (; len != 0; --len) {
    1926:	2000      	movs	r0, #0
    1928:	e001      	b.n	192e <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    192a:	2001      	movs	r0, #1
    192c:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    192e:	bc04      	pop	{r2}
    1930:	4690      	mov	r8, r2
    1932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1934:	200001f0 	.word	0x200001f0
    1938:	200001ec 	.word	0x200001ec

0000193c <Configure_Led>:
  * @param  None
  * @retval None
  */

void Configure_Led(void)
{
    193c:	b5f0      	push	{r4, r5, r6, r7, lr}
    193e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1940:	ac01      	add	r4, sp, #4
    1942:	2501      	movs	r5, #1
    1944:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1946:	2300      	movs	r3, #0
    1948:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    194a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED0_PIN, &pin_conf);
    194c:	0021      	movs	r1, r4
    194e:	201b      	movs	r0, #27
    1950:	4f07      	ldr	r7, [pc, #28]	; (1970 <Configure_Led+0x34>)
    1952:	47b8      	blx	r7

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1954:	2682      	movs	r6, #130	; 0x82
    1956:	05f6      	lsls	r6, r6, #23
    1958:	2380      	movs	r3, #128	; 0x80
    195a:	051b      	lsls	r3, r3, #20
    195c:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    195e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED1_PIN, &pin_conf);
    1960:	0021      	movs	r1, r4
    1962:	201c      	movs	r0, #28
    1964:	47b8      	blx	r7
    1966:	2380      	movs	r3, #128	; 0x80
    1968:	055b      	lsls	r3, r3, #21
    196a:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(LED1_PIN, LED1_INACTIVE);

}
    196c:	b003      	add	sp, #12
    196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1970:	000009dd 	.word	0x000009dd

00001974 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1974:	b570      	push	{r4, r5, r6, lr}
    1976:	b082      	sub	sp, #8
    1978:	0005      	movs	r5, r0
    197a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    197c:	2200      	movs	r2, #0
    197e:	466b      	mov	r3, sp
    1980:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1982:	4c06      	ldr	r4, [pc, #24]	; (199c <usart_serial_getchar+0x28>)
    1984:	466b      	mov	r3, sp
    1986:	1d99      	adds	r1, r3, #6
    1988:	0028      	movs	r0, r5
    198a:	47a0      	blx	r4
    198c:	2800      	cmp	r0, #0
    198e:	d1f9      	bne.n	1984 <usart_serial_getchar+0x10>

	*c = temp;
    1990:	466b      	mov	r3, sp
    1992:	3306      	adds	r3, #6
    1994:	881b      	ldrh	r3, [r3, #0]
    1996:	7033      	strb	r3, [r6, #0]
}
    1998:	b002      	add	sp, #8
    199a:	bd70      	pop	{r4, r5, r6, pc}
    199c:	000016ad 	.word	0x000016ad

000019a0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    19a0:	b570      	push	{r4, r5, r6, lr}
    19a2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    19a4:	b28c      	uxth	r4, r1
    19a6:	4e03      	ldr	r6, [pc, #12]	; (19b4 <usart_serial_putchar+0x14>)
    19a8:	0021      	movs	r1, r4
    19aa:	0028      	movs	r0, r5
    19ac:	47b0      	blx	r6
    19ae:	2800      	cmp	r0, #0
    19b0:	d1fa      	bne.n	19a8 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    19b2:	bd70      	pop	{r4, r5, r6, pc}
    19b4:	00001681 	.word	0x00001681

000019b8 <Configure_Usart>:
  * @param  None
  * @retval None
  */

void Configure_Usart(void)
{
    19b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ba:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    19bc:	2380      	movs	r3, #128	; 0x80
    19be:	05db      	lsls	r3, r3, #23
    19c0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    19c2:	2300      	movs	r3, #0
    19c4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    19c6:	22ff      	movs	r2, #255	; 0xff
    19c8:	4669      	mov	r1, sp
    19ca:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    19cc:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    19ce:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    19d0:	2401      	movs	r4, #1
    19d2:	222c      	movs	r2, #44	; 0x2c
    19d4:	548c      	strb	r4, [r1, r2]
	config->transmitter_enable = true;
    19d6:	3201      	adds	r2, #1
    19d8:	548c      	strb	r4, [r1, r2]
	config->clock_polarity_inverted = false;
    19da:	3201      	adds	r2, #1
    19dc:	548b      	strb	r3, [r1, r2]
	config->use_external_clock = false;
    19de:	3201      	adds	r2, #1
    19e0:	548b      	strb	r3, [r1, r2]
	config->ext_clock_freq   = 0;
    19e2:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    19e4:	3205      	adds	r2, #5
    19e6:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
    19e8:	3201      	adds	r2, #1
    19ea:	548b      	strb	r3, [r1, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    19ec:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    19ee:	2200      	movs	r2, #0
    19f0:	820b      	strh	r3, [r1, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    19f2:	76ca      	strb	r2, [r1, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    19f4:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    19f6:	840b      	strh	r3, [r1, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    19f8:	844b      	strh	r3, [r1, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    19fa:	760a      	strb	r2, [r1, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    19fc:	2324      	movs	r3, #36	; 0x24
    19fe:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1a00:	764a      	strb	r2, [r1, #25]
	config->receive_pulse_length                    = 19;
    1a02:	2313      	movs	r3, #19
    1a04:	768b      	strb	r3, [r1, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1a06:	3313      	adds	r3, #19
    1a08:	54ca      	strb	r2, [r1, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    1a0a:	3b01      	subs	r3, #1
    1a0c:	54ca      	strb	r2, [r1, r3]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = USART1_BAUD;
    1a0e:	23e1      	movs	r3, #225	; 0xe1
    1a10:	025b      	lsls	r3, r3, #9
    1a12:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.mux_setting = USART1_SERCOM_MUX_SETTING;
    1a14:	2380      	movs	r3, #128	; 0x80
    1a16:	035b      	lsls	r3, r3, #13
    1a18:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = USART1_SERCOM_PINMUX_PAD0;
    1a1a:	4b19      	ldr	r3, [pc, #100]	; (1a80 <Configure_Usart+0xc8>)
    1a1c:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad1 = USART1_SERCOM_PINMUX_PAD1;
    1a1e:	4b19      	ldr	r3, [pc, #100]	; (1a84 <Configure_Usart+0xcc>)
    1a20:	930f      	str	r3, [sp, #60]	; 0x3c
	config_usart.pinmux_pad2 = USART1_SERCOM_PINMUX_PAD2;
    1a22:	2301      	movs	r3, #1
    1a24:	425b      	negs	r3, r3
    1a26:	9310      	str	r3, [sp, #64]	; 0x40
	config_usart.pinmux_pad3 = USART1_SERCOM_PINMUX_PAD3;
    1a28:	9311      	str	r3, [sp, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1a2a:	4d17      	ldr	r5, [pc, #92]	; (1a88 <Configure_Usart+0xd0>)
    1a2c:	4b17      	ldr	r3, [pc, #92]	; (1a8c <Configure_Usart+0xd4>)
    1a2e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1a30:	4a17      	ldr	r2, [pc, #92]	; (1a90 <Configure_Usart+0xd8>)
    1a32:	4b18      	ldr	r3, [pc, #96]	; (1a94 <Configure_Usart+0xdc>)
    1a34:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1a36:	4a18      	ldr	r2, [pc, #96]	; (1a98 <Configure_Usart+0xe0>)
    1a38:	4b18      	ldr	r3, [pc, #96]	; (1a9c <Configure_Usart+0xe4>)
    1a3a:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    1a3c:	466a      	mov	r2, sp
    1a3e:	4918      	ldr	r1, [pc, #96]	; (1aa0 <Configure_Usart+0xe8>)
    1a40:	0028      	movs	r0, r5
    1a42:	4b18      	ldr	r3, [pc, #96]	; (1aa4 <Configure_Usart+0xec>)
    1a44:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1a46:	4f18      	ldr	r7, [pc, #96]	; (1aa8 <Configure_Usart+0xf0>)
    1a48:	683b      	ldr	r3, [r7, #0]
    1a4a:	6898      	ldr	r0, [r3, #8]
    1a4c:	2100      	movs	r1, #0
    1a4e:	4e17      	ldr	r6, [pc, #92]	; (1aac <Configure_Usart+0xf4>)
    1a50:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1a52:	683b      	ldr	r3, [r7, #0]
    1a54:	6858      	ldr	r0, [r3, #4]
    1a56:	2100      	movs	r1, #0
    1a58:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a5a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1a5c:	0030      	movs	r0, r6
    1a5e:	4b14      	ldr	r3, [pc, #80]	; (1ab0 <Configure_Usart+0xf8>)
    1a60:	4798      	blx	r3
    1a62:	231f      	movs	r3, #31
    1a64:	4018      	ands	r0, r3
    1a66:	4084      	lsls	r4, r0
    1a68:	4b12      	ldr	r3, [pc, #72]	; (1ab4 <Configure_Usart+0xfc>)
    1a6a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1a6c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1a6e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1a70:	2b00      	cmp	r3, #0
    1a72:	d1fc      	bne.n	1a6e <Configure_Usart+0xb6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1a74:	6832      	ldr	r2, [r6, #0]
    1a76:	3302      	adds	r3, #2
    1a78:	4313      	orrs	r3, r2
    1a7a:	6033      	str	r3, [r6, #0]
	
	stdio_serial_init(&usart_instance, USART1_MODULE, &config_usart);
	
	usart_enable(&usart_instance);
    1a7c:	b013      	add	sp, #76	; 0x4c
    1a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a80:	00160002 	.word	0x00160002
    1a84:	00170002 	.word	0x00170002
    1a88:	200001f4 	.word	0x200001f4
    1a8c:	200001f0 	.word	0x200001f0
    1a90:	000019a1 	.word	0x000019a1
    1a94:	200001ec 	.word	0x200001ec
    1a98:	00001975 	.word	0x00001975
    1a9c:	200001e8 	.word	0x200001e8
    1aa0:	42001000 	.word	0x42001000
    1aa4:	000012ed 	.word	0x000012ed
    1aa8:	2000006c 	.word	0x2000006c
    1aac:	00002243 	.word	0x00002243
    1ab0:	00000e45 	.word	0x00000e45
    1ab4:	e000e100 	.word	0xe000e100

00001ab8 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1ab8:	4770      	bx	lr
    1aba:	46c0      	nop			; (mov r8, r8)

00001abc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1abc:	4b0c      	ldr	r3, [pc, #48]	; (1af0 <cpu_irq_enter_critical+0x34>)
    1abe:	681b      	ldr	r3, [r3, #0]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d110      	bne.n	1ae6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1ac4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d109      	bne.n	1ae0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1acc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1ace:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1ad2:	2200      	movs	r2, #0
    1ad4:	4b07      	ldr	r3, [pc, #28]	; (1af4 <cpu_irq_enter_critical+0x38>)
    1ad6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1ad8:	3201      	adds	r2, #1
    1ada:	4b07      	ldr	r3, [pc, #28]	; (1af8 <cpu_irq_enter_critical+0x3c>)
    1adc:	701a      	strb	r2, [r3, #0]
    1ade:	e002      	b.n	1ae6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1ae0:	2200      	movs	r2, #0
    1ae2:	4b05      	ldr	r3, [pc, #20]	; (1af8 <cpu_irq_enter_critical+0x3c>)
    1ae4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1ae6:	4a02      	ldr	r2, [pc, #8]	; (1af0 <cpu_irq_enter_critical+0x34>)
    1ae8:	6813      	ldr	r3, [r2, #0]
    1aea:	3301      	adds	r3, #1
    1aec:	6013      	str	r3, [r2, #0]
}
    1aee:	4770      	bx	lr
    1af0:	200000b0 	.word	0x200000b0
    1af4:	20000008 	.word	0x20000008
    1af8:	200000b4 	.word	0x200000b4

00001afc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1afc:	4b08      	ldr	r3, [pc, #32]	; (1b20 <cpu_irq_leave_critical+0x24>)
    1afe:	681a      	ldr	r2, [r3, #0]
    1b00:	3a01      	subs	r2, #1
    1b02:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1b04:	681b      	ldr	r3, [r3, #0]
    1b06:	2b00      	cmp	r3, #0
    1b08:	d109      	bne.n	1b1e <cpu_irq_leave_critical+0x22>
    1b0a:	4b06      	ldr	r3, [pc, #24]	; (1b24 <cpu_irq_leave_critical+0x28>)
    1b0c:	781b      	ldrb	r3, [r3, #0]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d005      	beq.n	1b1e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1b12:	2201      	movs	r2, #1
    1b14:	4b04      	ldr	r3, [pc, #16]	; (1b28 <cpu_irq_leave_critical+0x2c>)
    1b16:	701a      	strb	r2, [r3, #0]
    1b18:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1b1c:	b662      	cpsie	i
	}
}
    1b1e:	4770      	bx	lr
    1b20:	200000b0 	.word	0x200000b0
    1b24:	200000b4 	.word	0x200000b4
    1b28:	20000008 	.word	0x20000008

00001b2c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1b2c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1b2e:	2807      	cmp	r0, #7
    1b30:	d803      	bhi.n	1b3a <system_clock_source_get_hz+0xe>
    1b32:	0080      	lsls	r0, r0, #2
    1b34:	4b0f      	ldr	r3, [pc, #60]	; (1b74 <system_clock_source_get_hz+0x48>)
    1b36:	581b      	ldr	r3, [r3, r0]
    1b38:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1b3a:	2000      	movs	r0, #0
    1b3c:	e018      	b.n	1b70 <system_clock_source_get_hz+0x44>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1b3e:	4b0e      	ldr	r3, [pc, #56]	; (1b78 <system_clock_source_get_hz+0x4c>)
    1b40:	6858      	ldr	r0, [r3, #4]
    1b42:	e015      	b.n	1b70 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    1b44:	4b0d      	ldr	r3, [pc, #52]	; (1b7c <system_clock_source_get_hz+0x50>)
    1b46:	7d59      	ldrb	r1, [r3, #21]
    1b48:	0709      	lsls	r1, r1, #28
    1b4a:	0f09      	lsrs	r1, r1, #28
    1b4c:	3101      	adds	r1, #1
    1b4e:	480c      	ldr	r0, [pc, #48]	; (1b80 <system_clock_source_get_hz+0x54>)
    1b50:	4b0c      	ldr	r3, [pc, #48]	; (1b84 <system_clock_source_get_hz+0x58>)
    1b52:	4798      	blx	r3
    1b54:	e00c      	b.n	1b70 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1b56:	4b08      	ldr	r3, [pc, #32]	; (1b78 <system_clock_source_get_hz+0x4c>)
    1b58:	6898      	ldr	r0, [r3, #8]
    1b5a:	e009      	b.n	1b70 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1b5c:	4b07      	ldr	r3, [pc, #28]	; (1b7c <system_clock_source_get_hz+0x50>)
    1b5e:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    1b60:	2000      	movs	r0, #0

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1b62:	079b      	lsls	r3, r3, #30
    1b64:	d504      	bpl.n	1b70 <system_clock_source_get_hz+0x44>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1b66:	4b04      	ldr	r3, [pc, #16]	; (1b78 <system_clock_source_get_hz+0x4c>)
    1b68:	6818      	ldr	r0, [r3, #0]
    1b6a:	e001      	b.n	1b70 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1b6c:	2080      	movs	r0, #128	; 0x80
    1b6e:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    1b70:	bd10      	pop	{r4, pc}
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	00002b10 	.word	0x00002b10
    1b78:	200000b8 	.word	0x200000b8
    1b7c:	40001000 	.word	0x40001000
    1b80:	02dc6c00 	.word	0x02dc6c00
    1b84:	00002065 	.word	0x00002065

00001b88 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    1b88:	b500      	push	{lr}
    1b8a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    1b8c:	2203      	movs	r2, #3
    1b8e:	4b10      	ldr	r3, [pc, #64]	; (1bd0 <system_clock_init+0x48>)
    1b90:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1b92:	4a10      	ldr	r2, [pc, #64]	; (1bd4 <system_clock_init+0x4c>)
    1b94:	6853      	ldr	r3, [r2, #4]
    1b96:	211e      	movs	r1, #30
    1b98:	438b      	bics	r3, r1
    1b9a:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    1b9c:	4a0e      	ldr	r2, [pc, #56]	; (1bd8 <system_clock_init+0x50>)
    1b9e:	7d11      	ldrb	r1, [r2, #20]
    1ba0:	2380      	movs	r3, #128	; 0x80
    1ba2:	430b      	orrs	r3, r1
    1ba4:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1ba6:	4b0d      	ldr	r3, [pc, #52]	; (1bdc <system_clock_init+0x54>)
    1ba8:	4798      	blx	r3
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    1baa:	2301      	movs	r3, #1
    1bac:	4a0c      	ldr	r2, [pc, #48]	; (1be0 <system_clock_init+0x58>)
    1bae:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1bb0:	a901      	add	r1, sp, #4
    1bb2:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    1bb4:	2300      	movs	r3, #0
    1bb6:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
    1bb8:	2206      	movs	r2, #6
    1bba:	700a      	strb	r2, [r1, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1bbc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1bbe:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1bc0:	2000      	movs	r0, #0
    1bc2:	4b08      	ldr	r3, [pc, #32]	; (1be4 <system_clock_init+0x5c>)
    1bc4:	4798      	blx	r3
    1bc6:	2000      	movs	r0, #0
    1bc8:	4b07      	ldr	r3, [pc, #28]	; (1be8 <system_clock_init+0x60>)
    1bca:	4798      	blx	r3
#endif

}
    1bcc:	b005      	add	sp, #20
    1bce:	bd00      	pop	{pc}
    1bd0:	40001800 	.word	0x40001800
    1bd4:	41004000 	.word	0x41004000
    1bd8:	40001000 	.word	0x40001000
    1bdc:	00001bed 	.word	0x00001bed
    1be0:	40000800 	.word	0x40000800
    1be4:	00001c11 	.word	0x00001c11
    1be8:	00001cbd 	.word	0x00001cbd

00001bec <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1bec:	4a06      	ldr	r2, [pc, #24]	; (1c08 <system_gclk_init+0x1c>)
    1bee:	6951      	ldr	r1, [r2, #20]
    1bf0:	2380      	movs	r3, #128	; 0x80
    1bf2:	430b      	orrs	r3, r1
    1bf4:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1bf6:	2201      	movs	r2, #1
    1bf8:	4b04      	ldr	r3, [pc, #16]	; (1c0c <system_gclk_init+0x20>)
    1bfa:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1bfc:	0019      	movs	r1, r3
    1bfe:	780b      	ldrb	r3, [r1, #0]
    1c00:	4213      	tst	r3, r2
    1c02:	d1fc      	bne.n	1bfe <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1c04:	4770      	bx	lr
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	40000800 	.word	0x40000800
    1c0c:	40001c00 	.word	0x40001c00

00001c10 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1c10:	b570      	push	{r4, r5, r6, lr}
    1c12:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1c14:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1c16:	784b      	ldrb	r3, [r1, #1]
    1c18:	2b00      	cmp	r3, #0
    1c1a:	d002      	beq.n	1c22 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1c1c:	2380      	movs	r3, #128	; 0x80
    1c1e:	00db      	lsls	r3, r3, #3
    1c20:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1c22:	7a4b      	ldrb	r3, [r1, #9]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d002      	beq.n	1c2e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1c28:	2380      	movs	r3, #128	; 0x80
    1c2a:	011b      	lsls	r3, r3, #4
    1c2c:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1c2e:	684a      	ldr	r2, [r1, #4]
    1c30:	2a01      	cmp	r2, #1
    1c32:	d917      	bls.n	1c64 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1c34:	1e53      	subs	r3, r2, #1
    1c36:	421a      	tst	r2, r3
    1c38:	d10f      	bne.n	1c5a <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c3a:	2a02      	cmp	r2, #2
    1c3c:	d906      	bls.n	1c4c <system_gclk_gen_set_config+0x3c>
    1c3e:	2302      	movs	r3, #2
    1c40:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    1c42:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1c44:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c46:	429a      	cmp	r2, r3
    1c48:	d8fb      	bhi.n	1c42 <system_gclk_gen_set_config+0x32>
    1c4a:	e000      	b.n	1c4e <system_gclk_gen_set_config+0x3e>
    1c4c:	2000      	movs	r0, #0
    1c4e:	2380      	movs	r3, #128	; 0x80
    1c50:	015b      	lsls	r3, r3, #5
    1c52:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1c54:	0400      	lsls	r0, r0, #16
    1c56:	4304      	orrs	r4, r0
    1c58:	e004      	b.n	1c64 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1c5a:	0412      	lsls	r2, r2, #16
    1c5c:	2380      	movs	r3, #128	; 0x80
    1c5e:	009b      	lsls	r3, r3, #2
    1c60:	431a      	orrs	r2, r3
    1c62:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1c64:	7a0b      	ldrb	r3, [r1, #8]
    1c66:	2b00      	cmp	r3, #0
    1c68:	d002      	beq.n	1c70 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1c6a:	2380      	movs	r3, #128	; 0x80
    1c6c:	019b      	lsls	r3, r3, #6
    1c6e:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1c70:	2604      	movs	r6, #4
    1c72:	40ae      	lsls	r6, r5
    1c74:	490d      	ldr	r1, [pc, #52]	; (1cac <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1c76:	4a0e      	ldr	r2, [pc, #56]	; (1cb0 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1c78:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1c7a:	4013      	ands	r3, r2
    1c7c:	421e      	tst	r6, r3
    1c7e:	d1fb      	bne.n	1c78 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c80:	4b0c      	ldr	r3, [pc, #48]	; (1cb4 <system_gclk_gen_set_config+0xa4>)
    1c82:	4798      	blx	r3
    1c84:	00ad      	lsls	r5, r5, #2
    1c86:	4b09      	ldr	r3, [pc, #36]	; (1cac <system_gclk_gen_set_config+0x9c>)
    1c88:	469c      	mov	ip, r3
    1c8a:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1c8c:	6a28      	ldr	r0, [r5, #32]
    1c8e:	2380      	movs	r3, #128	; 0x80
    1c90:	005b      	lsls	r3, r3, #1
    1c92:	4018      	ands	r0, r3
    1c94:	4320      	orrs	r0, r4
    1c96:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1c98:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1c9a:	4a05      	ldr	r2, [pc, #20]	; (1cb0 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1c9c:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1c9e:	4013      	ands	r3, r2
    1ca0:	421e      	tst	r6, r3
    1ca2:	d1fb      	bne.n	1c9c <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ca4:	4b04      	ldr	r3, [pc, #16]	; (1cb8 <system_gclk_gen_set_config+0xa8>)
    1ca6:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    1ca8:	bd70      	pop	{r4, r5, r6, pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	40001c00 	.word	0x40001c00
    1cb0:	000007fc 	.word	0x000007fc
    1cb4:	00001abd 	.word	0x00001abd
    1cb8:	00001afd 	.word	0x00001afd

00001cbc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1cbc:	b510      	push	{r4, lr}
    1cbe:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1cc0:	2204      	movs	r2, #4
    1cc2:	4082      	lsls	r2, r0
    1cc4:	4809      	ldr	r0, [pc, #36]	; (1cec <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1cc6:	490a      	ldr	r1, [pc, #40]	; (1cf0 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1cc8:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1cca:	400b      	ands	r3, r1
    1ccc:	421a      	tst	r2, r3
    1cce:	d1fb      	bne.n	1cc8 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1cd0:	4b08      	ldr	r3, [pc, #32]	; (1cf4 <system_gclk_gen_enable+0x38>)
    1cd2:	4798      	blx	r3
    1cd4:	00a4      	lsls	r4, r4, #2
    1cd6:	4b05      	ldr	r3, [pc, #20]	; (1cec <system_gclk_gen_enable+0x30>)
    1cd8:	469c      	mov	ip, r3
    1cda:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1cdc:	6a23      	ldr	r3, [r4, #32]
    1cde:	2280      	movs	r2, #128	; 0x80
    1ce0:	0052      	lsls	r2, r2, #1
    1ce2:	4313      	orrs	r3, r2
    1ce4:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ce6:	4b04      	ldr	r3, [pc, #16]	; (1cf8 <system_gclk_gen_enable+0x3c>)
    1ce8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cea:	bd10      	pop	{r4, pc}
    1cec:	40001c00 	.word	0x40001c00
    1cf0:	000007fc 	.word	0x000007fc
    1cf4:	00001abd 	.word	0x00001abd
    1cf8:	00001afd 	.word	0x00001afd

00001cfc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cfe:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1d00:	2204      	movs	r2, #4
    1d02:	4082      	lsls	r2, r0
    1d04:	4812      	ldr	r0, [pc, #72]	; (1d50 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1d06:	4913      	ldr	r1, [pc, #76]	; (1d54 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1d08:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1d0a:	400b      	ands	r3, r1
    1d0c:	421a      	tst	r2, r3
    1d0e:	d1fb      	bne.n	1d08 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d10:	4b11      	ldr	r3, [pc, #68]	; (1d58 <system_gclk_gen_get_hz+0x5c>)
    1d12:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1d14:	4f0e      	ldr	r7, [pc, #56]	; (1d50 <system_gclk_gen_get_hz+0x54>)
    1d16:	3408      	adds	r4, #8
    1d18:	00a4      	lsls	r4, r4, #2
    1d1a:	59e0      	ldr	r0, [r4, r7]
    1d1c:	0740      	lsls	r0, r0, #29
    1d1e:	0f40      	lsrs	r0, r0, #29
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1d20:	4b0e      	ldr	r3, [pc, #56]	; (1d5c <system_gclk_gen_get_hz+0x60>)
    1d22:	4798      	blx	r3
    1d24:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1d26:	59e5      	ldr	r5, [r4, r7]
    1d28:	04ed      	lsls	r5, r5, #19
    1d2a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1d2c:	59e4      	ldr	r4, [r4, r7]
    1d2e:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1d30:	4b0b      	ldr	r3, [pc, #44]	; (1d60 <system_gclk_gen_get_hz+0x64>)
    1d32:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1d34:	2d00      	cmp	r5, #0
    1d36:	d107      	bne.n	1d48 <system_gclk_gen_get_hz+0x4c>
    1d38:	2c01      	cmp	r4, #1
    1d3a:	d907      	bls.n	1d4c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1d3c:	0021      	movs	r1, r4
    1d3e:	0030      	movs	r0, r6
    1d40:	4b08      	ldr	r3, [pc, #32]	; (1d64 <system_gclk_gen_get_hz+0x68>)
    1d42:	4798      	blx	r3
    1d44:	0006      	movs	r6, r0
    1d46:	e001      	b.n	1d4c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1d48:	3401      	adds	r4, #1
    1d4a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1d4c:	0030      	movs	r0, r6
    1d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d50:	40001c00 	.word	0x40001c00
    1d54:	000007fc 	.word	0x000007fc
    1d58:	00001abd 	.word	0x00001abd
    1d5c:	00001b2d 	.word	0x00001b2d
    1d60:	00001afd 	.word	0x00001afd
    1d64:	00002065 	.word	0x00002065

00001d68 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1d68:	b510      	push	{r4, lr}
    1d6a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d6c:	4b09      	ldr	r3, [pc, #36]	; (1d94 <system_gclk_chan_enable+0x2c>)
    1d6e:	4798      	blx	r3
    1d70:	00a0      	lsls	r0, r4, #2
    1d72:	4b09      	ldr	r3, [pc, #36]	; (1d98 <system_gclk_chan_enable+0x30>)
    1d74:	469c      	mov	ip, r3
    1d76:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1d78:	2280      	movs	r2, #128	; 0x80
    1d7a:	5881      	ldr	r1, [r0, r2]
    1d7c:	2340      	movs	r3, #64	; 0x40
    1d7e:	430b      	orrs	r3, r1
    1d80:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1d82:	2180      	movs	r1, #128	; 0x80
    1d84:	3a40      	subs	r2, #64	; 0x40
    1d86:	5843      	ldr	r3, [r0, r1]
    1d88:	421a      	tst	r2, r3
    1d8a:	d0fc      	beq.n	1d86 <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1d8c:	4b03      	ldr	r3, [pc, #12]	; (1d9c <system_gclk_chan_enable+0x34>)
    1d8e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1d90:	bd10      	pop	{r4, pc}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	00001abd 	.word	0x00001abd
    1d98:	40001c00 	.word	0x40001c00
    1d9c:	00001afd 	.word	0x00001afd

00001da0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1da0:	b510      	push	{r4, lr}
    1da2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1da4:	4b09      	ldr	r3, [pc, #36]	; (1dcc <system_gclk_chan_disable+0x2c>)
    1da6:	4798      	blx	r3
    1da8:	00a0      	lsls	r0, r4, #2
    1daa:	4b09      	ldr	r3, [pc, #36]	; (1dd0 <system_gclk_chan_disable+0x30>)
    1dac:	469c      	mov	ip, r3
    1dae:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1db0:	2280      	movs	r2, #128	; 0x80
    1db2:	5883      	ldr	r3, [r0, r2]
    1db4:	2140      	movs	r1, #64	; 0x40
    1db6:	438b      	bics	r3, r1
    1db8:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    1dba:	3140      	adds	r1, #64	; 0x40
    1dbc:	3a40      	subs	r2, #64	; 0x40
    1dbe:	5843      	ldr	r3, [r0, r1]
    1dc0:	421a      	tst	r2, r3
    1dc2:	d1fc      	bne.n	1dbe <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1dc4:	4b03      	ldr	r3, [pc, #12]	; (1dd4 <system_gclk_chan_disable+0x34>)
    1dc6:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1dc8:	bd10      	pop	{r4, pc}
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	00001abd 	.word	0x00001abd
    1dd0:	40001c00 	.word	0x40001c00
    1dd4:	00001afd 	.word	0x00001afd

00001dd8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1dd8:	b570      	push	{r4, r5, r6, lr}
    1dda:	0004      	movs	r4, r0
    1ddc:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1dde:	4b05      	ldr	r3, [pc, #20]	; (1df4 <system_gclk_chan_set_config+0x1c>)
    1de0:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1de2:	782b      	ldrb	r3, [r5, #0]
    1de4:	220f      	movs	r2, #15
    1de6:	4013      	ands	r3, r2
    1de8:	3420      	adds	r4, #32
    1dea:	00a4      	lsls	r4, r4, #2
    1dec:	4a02      	ldr	r2, [pc, #8]	; (1df8 <system_gclk_chan_set_config+0x20>)
    1dee:	50a3      	str	r3, [r4, r2]


}
    1df0:	bd70      	pop	{r4, r5, r6, pc}
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	00001da1 	.word	0x00001da1
    1df8:	40001c00 	.word	0x40001c00

00001dfc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1dfc:	b510      	push	{r4, lr}
    1dfe:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1e00:	4b06      	ldr	r3, [pc, #24]	; (1e1c <system_gclk_chan_get_hz+0x20>)
    1e02:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1e04:	3420      	adds	r4, #32
    1e06:	00a4      	lsls	r4, r4, #2
    1e08:	4b05      	ldr	r3, [pc, #20]	; (1e20 <system_gclk_chan_get_hz+0x24>)
    1e0a:	58e4      	ldr	r4, [r4, r3]
    1e0c:	0724      	lsls	r4, r4, #28
    1e0e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1e10:	4b04      	ldr	r3, [pc, #16]	; (1e24 <system_gclk_chan_get_hz+0x28>)
    1e12:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1e14:	0020      	movs	r0, r4
    1e16:	4b04      	ldr	r3, [pc, #16]	; (1e28 <system_gclk_chan_get_hz+0x2c>)
    1e18:	4798      	blx	r3
}
    1e1a:	bd10      	pop	{r4, pc}
    1e1c:	00001abd 	.word	0x00001abd
    1e20:	40001c00 	.word	0x40001c00
    1e24:	00001afd 	.word	0x00001afd
    1e28:	00001cfd 	.word	0x00001cfd

00001e2c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1e2c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1e2e:	78d3      	ldrb	r3, [r2, #3]
    1e30:	2b00      	cmp	r3, #0
    1e32:	d11e      	bne.n	1e72 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1e34:	7813      	ldrb	r3, [r2, #0]
    1e36:	2b80      	cmp	r3, #128	; 0x80
    1e38:	d004      	beq.n	1e44 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1e3a:	061b      	lsls	r3, r3, #24
    1e3c:	2480      	movs	r4, #128	; 0x80
    1e3e:	0264      	lsls	r4, r4, #9
    1e40:	4323      	orrs	r3, r4
    1e42:	e000      	b.n	1e46 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1e44:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1e46:	7854      	ldrb	r4, [r2, #1]
    1e48:	2502      	movs	r5, #2
    1e4a:	43ac      	bics	r4, r5
    1e4c:	d10a      	bne.n	1e64 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1e4e:	7894      	ldrb	r4, [r2, #2]
    1e50:	2c00      	cmp	r4, #0
    1e52:	d103      	bne.n	1e5c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1e54:	2480      	movs	r4, #128	; 0x80
    1e56:	02a4      	lsls	r4, r4, #10
    1e58:	4323      	orrs	r3, r4
    1e5a:	e002      	b.n	1e62 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1e5c:	24c0      	movs	r4, #192	; 0xc0
    1e5e:	02e4      	lsls	r4, r4, #11
    1e60:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1e62:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e64:	7854      	ldrb	r4, [r2, #1]
    1e66:	3c01      	subs	r4, #1
    1e68:	2c01      	cmp	r4, #1
    1e6a:	d812      	bhi.n	1e92 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1e6c:	4c18      	ldr	r4, [pc, #96]	; (1ed0 <_system_pinmux_config+0xa4>)
    1e6e:	4023      	ands	r3, r4
    1e70:	e00f      	b.n	1e92 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1e72:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1e74:	040b      	lsls	r3, r1, #16
    1e76:	0c1b      	lsrs	r3, r3, #16
    1e78:	24a0      	movs	r4, #160	; 0xa0
    1e7a:	05e4      	lsls	r4, r4, #23
    1e7c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e7e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1e80:	0c0b      	lsrs	r3, r1, #16
    1e82:	24d0      	movs	r4, #208	; 0xd0
    1e84:	0624      	lsls	r4, r4, #24
    1e86:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e88:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1e8a:	78d3      	ldrb	r3, [r2, #3]
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d018      	beq.n	1ec2 <_system_pinmux_config+0x96>
    1e90:	e01c      	b.n	1ecc <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1e92:	040c      	lsls	r4, r1, #16
    1e94:	0c24      	lsrs	r4, r4, #16
    1e96:	25a0      	movs	r5, #160	; 0xa0
    1e98:	05ed      	lsls	r5, r5, #23
    1e9a:	432c      	orrs	r4, r5
    1e9c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e9e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ea0:	0c0c      	lsrs	r4, r1, #16
    1ea2:	25d0      	movs	r5, #208	; 0xd0
    1ea4:	062d      	lsls	r5, r5, #24
    1ea6:	432c      	orrs	r4, r5
    1ea8:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1eaa:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1eac:	78d4      	ldrb	r4, [r2, #3]
    1eae:	2c00      	cmp	r4, #0
    1eb0:	d10c      	bne.n	1ecc <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1eb2:	035b      	lsls	r3, r3, #13
    1eb4:	d505      	bpl.n	1ec2 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1eb6:	7893      	ldrb	r3, [r2, #2]
    1eb8:	2b01      	cmp	r3, #1
    1eba:	d101      	bne.n	1ec0 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1ebc:	6181      	str	r1, [r0, #24]
    1ebe:	e000      	b.n	1ec2 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1ec0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ec2:	7853      	ldrb	r3, [r2, #1]
    1ec4:	3b01      	subs	r3, #1
    1ec6:	2b01      	cmp	r3, #1
    1ec8:	d800      	bhi.n	1ecc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1eca:	6081      	str	r1, [r0, #8]
		}
	}
}
    1ecc:	bd30      	pop	{r4, r5, pc}
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	fffbffff 	.word	0xfffbffff

00001ed4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1ed4:	b510      	push	{r4, lr}
    1ed6:	0003      	movs	r3, r0
    1ed8:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1eda:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1edc:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1ede:	2900      	cmp	r1, #0
    1ee0:	d105      	bne.n	1eee <system_pinmux_pin_set_config+0x1a>
		return &(ports[port_index]->Group[group_index]);
    1ee2:	0958      	lsrs	r0, r3, #5
    1ee4:	01c0      	lsls	r0, r0, #7
    1ee6:	2182      	movs	r1, #130	; 0x82
    1ee8:	05c9      	lsls	r1, r1, #23
    1eea:	468c      	mov	ip, r1
    1eec:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    1eee:	211f      	movs	r1, #31
    1ef0:	400b      	ands	r3, r1
    1ef2:	391e      	subs	r1, #30
    1ef4:	4099      	lsls	r1, r3
    1ef6:	4b01      	ldr	r3, [pc, #4]	; (1efc <system_pinmux_pin_set_config+0x28>)
    1ef8:	4798      	blx	r3
}
    1efa:	bd10      	pop	{r4, pc}
    1efc:	00001e2d 	.word	0x00001e2d

00001f00 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1f00:	4770      	bx	lr
    1f02:	46c0      	nop			; (mov r8, r8)

00001f04 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1f04:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1f06:	4b05      	ldr	r3, [pc, #20]	; (1f1c <system_init+0x18>)
    1f08:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1f0a:	4b05      	ldr	r3, [pc, #20]	; (1f20 <system_init+0x1c>)
    1f0c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1f0e:	4b05      	ldr	r3, [pc, #20]	; (1f24 <system_init+0x20>)
    1f10:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1f12:	4b05      	ldr	r3, [pc, #20]	; (1f28 <system_init+0x24>)
    1f14:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1f16:	4b05      	ldr	r3, [pc, #20]	; (1f2c <system_init+0x28>)
    1f18:	4798      	blx	r3
}
    1f1a:	bd10      	pop	{r4, pc}
    1f1c:	00001b89 	.word	0x00001b89
    1f20:	00001ab9 	.word	0x00001ab9
    1f24:	00001f01 	.word	0x00001f01
    1f28:	00000645 	.word	0x00000645
    1f2c:	00001f01 	.word	0x00001f01

00001f30 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1f30:	e7fe      	b.n	1f30 <Dummy_Handler>
    1f32:	46c0      	nop			; (mov r8, r8)

00001f34 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1f34:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1f36:	4b1b      	ldr	r3, [pc, #108]	; (1fa4 <Reset_Handler+0x70>)
    1f38:	4a1b      	ldr	r2, [pc, #108]	; (1fa8 <Reset_Handler+0x74>)
    1f3a:	429a      	cmp	r2, r3
    1f3c:	d003      	beq.n	1f46 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1f3e:	4b1b      	ldr	r3, [pc, #108]	; (1fac <Reset_Handler+0x78>)
    1f40:	4a18      	ldr	r2, [pc, #96]	; (1fa4 <Reset_Handler+0x70>)
    1f42:	429a      	cmp	r2, r3
    1f44:	d304      	bcc.n	1f50 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1f46:	4b1a      	ldr	r3, [pc, #104]	; (1fb0 <Reset_Handler+0x7c>)
    1f48:	4a1a      	ldr	r2, [pc, #104]	; (1fb4 <Reset_Handler+0x80>)
    1f4a:	429a      	cmp	r2, r3
    1f4c:	d310      	bcc.n	1f70 <Reset_Handler+0x3c>
    1f4e:	e01e      	b.n	1f8e <Reset_Handler+0x5a>
    1f50:	4a19      	ldr	r2, [pc, #100]	; (1fb8 <Reset_Handler+0x84>)
    1f52:	4b16      	ldr	r3, [pc, #88]	; (1fac <Reset_Handler+0x78>)
    1f54:	3303      	adds	r3, #3
    1f56:	1a9b      	subs	r3, r3, r2
    1f58:	089b      	lsrs	r3, r3, #2
    1f5a:	3301      	adds	r3, #1
    1f5c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1f5e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1f60:	4810      	ldr	r0, [pc, #64]	; (1fa4 <Reset_Handler+0x70>)
    1f62:	4911      	ldr	r1, [pc, #68]	; (1fa8 <Reset_Handler+0x74>)
    1f64:	588c      	ldr	r4, [r1, r2]
    1f66:	5084      	str	r4, [r0, r2]
    1f68:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1f6a:	429a      	cmp	r2, r3
    1f6c:	d1fa      	bne.n	1f64 <Reset_Handler+0x30>
    1f6e:	e7ea      	b.n	1f46 <Reset_Handler+0x12>
    1f70:	4a12      	ldr	r2, [pc, #72]	; (1fbc <Reset_Handler+0x88>)
    1f72:	4b0f      	ldr	r3, [pc, #60]	; (1fb0 <Reset_Handler+0x7c>)
    1f74:	3303      	adds	r3, #3
    1f76:	1a9b      	subs	r3, r3, r2
    1f78:	089b      	lsrs	r3, r3, #2
    1f7a:	3301      	adds	r3, #1
    1f7c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1f7e:	2200      	movs	r2, #0
                *pDest++ = 0;
    1f80:	480c      	ldr	r0, [pc, #48]	; (1fb4 <Reset_Handler+0x80>)
    1f82:	2100      	movs	r1, #0
    1f84:	1814      	adds	r4, r2, r0
    1f86:	6021      	str	r1, [r4, #0]
    1f88:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1f8a:	429a      	cmp	r2, r3
    1f8c:	d1fa      	bne.n	1f84 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1f8e:	4a0c      	ldr	r2, [pc, #48]	; (1fc0 <Reset_Handler+0x8c>)
    1f90:	21ff      	movs	r1, #255	; 0xff
    1f92:	4b0c      	ldr	r3, [pc, #48]	; (1fc4 <Reset_Handler+0x90>)
    1f94:	438b      	bics	r3, r1
    1f96:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    1f98:	4b0b      	ldr	r3, [pc, #44]	; (1fc8 <Reset_Handler+0x94>)
    1f9a:	4798      	blx	r3

        /* Branch to main function */
        main();
    1f9c:	4b0b      	ldr	r3, [pc, #44]	; (1fcc <Reset_Handler+0x98>)
    1f9e:	4798      	blx	r3
    1fa0:	e7fe      	b.n	1fa0 <Reset_Handler+0x6c>
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	20000000 	.word	0x20000000
    1fa8:	00002bb8 	.word	0x00002bb8
    1fac:	20000070 	.word	0x20000070
    1fb0:	2000029c 	.word	0x2000029c
    1fb4:	20000070 	.word	0x20000070
    1fb8:	20000004 	.word	0x20000004
    1fbc:	20000074 	.word	0x20000074
    1fc0:	e000ed00 	.word	0xe000ed00
    1fc4:	00000000 	.word	0x00000000
    1fc8:	000021d5 	.word	0x000021d5
    1fcc:	0000200d 	.word	0x0000200d

00001fd0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1fd0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1fd2:	4a06      	ldr	r2, [pc, #24]	; (1fec <_sbrk+0x1c>)
    1fd4:	6812      	ldr	r2, [r2, #0]
    1fd6:	2a00      	cmp	r2, #0
    1fd8:	d102      	bne.n	1fe0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1fda:	4905      	ldr	r1, [pc, #20]	; (1ff0 <_sbrk+0x20>)
    1fdc:	4a03      	ldr	r2, [pc, #12]	; (1fec <_sbrk+0x1c>)
    1fde:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1fe0:	4a02      	ldr	r2, [pc, #8]	; (1fec <_sbrk+0x1c>)
    1fe2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1fe4:	18c3      	adds	r3, r0, r3
    1fe6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1fe8:	4770      	bx	lr
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	200000c4 	.word	0x200000c4
    1ff0:	200022a0 	.word	0x200022a0

00001ff4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1ff4:	2001      	movs	r0, #1
    1ff6:	4240      	negs	r0, r0
    1ff8:	4770      	bx	lr
    1ffa:	46c0      	nop			; (mov r8, r8)

00001ffc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1ffc:	2380      	movs	r3, #128	; 0x80
    1ffe:	019b      	lsls	r3, r3, #6
    2000:	604b      	str	r3, [r1, #4]

	return 0;
}
    2002:	2000      	movs	r0, #0
    2004:	4770      	bx	lr
    2006:	46c0      	nop			; (mov r8, r8)

00002008 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2008:	2000      	movs	r0, #0
    200a:	4770      	bx	lr

0000200c <main>:
#include "Source/flash.h"
#include "Source/power.h"


int main (void)
{
    200c:	b510      	push	{r4, lr}
	system_init();
    200e:	4b0b      	ldr	r3, [pc, #44]	; (203c <main+0x30>)
    2010:	4798      	blx	r3
	
	/* Initialize the delay driver */
	delay_init();
    2012:	4b0b      	ldr	r3, [pc, #44]	; (2040 <main+0x34>)
    2014:	4798      	blx	r3
	
	/* Initialize the USART */
	#ifdef OS_DEBUG
	/*  Init Usart */
	Configure_Usart();
    2016:	4b0b      	ldr	r3, [pc, #44]	; (2044 <main+0x38>)
    2018:	4798      	blx	r3
	#endif // DEBUG
	
	/*  Init LED  */
	Configure_Led();
    201a:	4b0b      	ldr	r3, [pc, #44]	; (2048 <main+0x3c>)
    201c:	4798      	blx	r3
	
	/*  Init WDT  */
	//Configure_Wdt();
	
	/*  Init SPI  */	
	Configure_Spi_Master();
    201e:	4b0b      	ldr	r3, [pc, #44]	; (204c <main+0x40>)
    2020:	4798      	blx	r3
	
	/*  Init flash  */
	Configure_Flash();
    2022:	4b0b      	ldr	r3, [pc, #44]	; (2050 <main+0x44>)
    2024:	4798      	blx	r3
	
	/* ÉÏµç±äÁ¿³õÊ¼»¯ */
	PowerOn_Init();
    2026:	4b0b      	ldr	r3, [pc, #44]	; (2054 <main+0x48>)
    2028:	4798      	blx	r3
	
	/* ´ÓEEPROM»Ö¸´¸÷±äÁ¿µÄÖµ */
	SYS_EEPROM_Init();
    202a:	4b0b      	ldr	r3, [pc, #44]	; (2058 <main+0x4c>)
    202c:	4798      	blx	r3
	g_sys_cap.val.full_cap = cap_update;
    202e:	4b0b      	ldr	r3, [pc, #44]	; (205c <main+0x50>)
    2030:	881b      	ldrh	r3, [r3, #0]
    2032:	b29b      	uxth	r3, r3
    2034:	4a0a      	ldr	r2, [pc, #40]	; (2060 <main+0x54>)
    2036:	8013      	strh	r3, [r2, #0]
    2038:	e7fe      	b.n	2038 <main+0x2c>
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	00001f05 	.word	0x00001f05
    2040:	0000057d 	.word	0x0000057d
    2044:	000019b9 	.word	0x000019b9
    2048:	0000193d 	.word	0x0000193d
    204c:	0000049d 	.word	0x0000049d
    2050:	0000011d 	.word	0x0000011d
    2054:	0000040d 	.word	0x0000040d
    2058:	000003b5 	.word	0x000003b5
    205c:	20000254 	.word	0x20000254
    2060:	20000228 	.word	0x20000228

00002064 <__aeabi_uidiv>:
    2064:	2200      	movs	r2, #0
    2066:	0843      	lsrs	r3, r0, #1
    2068:	428b      	cmp	r3, r1
    206a:	d374      	bcc.n	2156 <__aeabi_uidiv+0xf2>
    206c:	0903      	lsrs	r3, r0, #4
    206e:	428b      	cmp	r3, r1
    2070:	d35f      	bcc.n	2132 <__aeabi_uidiv+0xce>
    2072:	0a03      	lsrs	r3, r0, #8
    2074:	428b      	cmp	r3, r1
    2076:	d344      	bcc.n	2102 <__aeabi_uidiv+0x9e>
    2078:	0b03      	lsrs	r3, r0, #12
    207a:	428b      	cmp	r3, r1
    207c:	d328      	bcc.n	20d0 <__aeabi_uidiv+0x6c>
    207e:	0c03      	lsrs	r3, r0, #16
    2080:	428b      	cmp	r3, r1
    2082:	d30d      	bcc.n	20a0 <__aeabi_uidiv+0x3c>
    2084:	22ff      	movs	r2, #255	; 0xff
    2086:	0209      	lsls	r1, r1, #8
    2088:	ba12      	rev	r2, r2
    208a:	0c03      	lsrs	r3, r0, #16
    208c:	428b      	cmp	r3, r1
    208e:	d302      	bcc.n	2096 <__aeabi_uidiv+0x32>
    2090:	1212      	asrs	r2, r2, #8
    2092:	0209      	lsls	r1, r1, #8
    2094:	d065      	beq.n	2162 <__aeabi_uidiv+0xfe>
    2096:	0b03      	lsrs	r3, r0, #12
    2098:	428b      	cmp	r3, r1
    209a:	d319      	bcc.n	20d0 <__aeabi_uidiv+0x6c>
    209c:	e000      	b.n	20a0 <__aeabi_uidiv+0x3c>
    209e:	0a09      	lsrs	r1, r1, #8
    20a0:	0bc3      	lsrs	r3, r0, #15
    20a2:	428b      	cmp	r3, r1
    20a4:	d301      	bcc.n	20aa <__aeabi_uidiv+0x46>
    20a6:	03cb      	lsls	r3, r1, #15
    20a8:	1ac0      	subs	r0, r0, r3
    20aa:	4152      	adcs	r2, r2
    20ac:	0b83      	lsrs	r3, r0, #14
    20ae:	428b      	cmp	r3, r1
    20b0:	d301      	bcc.n	20b6 <__aeabi_uidiv+0x52>
    20b2:	038b      	lsls	r3, r1, #14
    20b4:	1ac0      	subs	r0, r0, r3
    20b6:	4152      	adcs	r2, r2
    20b8:	0b43      	lsrs	r3, r0, #13
    20ba:	428b      	cmp	r3, r1
    20bc:	d301      	bcc.n	20c2 <__aeabi_uidiv+0x5e>
    20be:	034b      	lsls	r3, r1, #13
    20c0:	1ac0      	subs	r0, r0, r3
    20c2:	4152      	adcs	r2, r2
    20c4:	0b03      	lsrs	r3, r0, #12
    20c6:	428b      	cmp	r3, r1
    20c8:	d301      	bcc.n	20ce <__aeabi_uidiv+0x6a>
    20ca:	030b      	lsls	r3, r1, #12
    20cc:	1ac0      	subs	r0, r0, r3
    20ce:	4152      	adcs	r2, r2
    20d0:	0ac3      	lsrs	r3, r0, #11
    20d2:	428b      	cmp	r3, r1
    20d4:	d301      	bcc.n	20da <__aeabi_uidiv+0x76>
    20d6:	02cb      	lsls	r3, r1, #11
    20d8:	1ac0      	subs	r0, r0, r3
    20da:	4152      	adcs	r2, r2
    20dc:	0a83      	lsrs	r3, r0, #10
    20de:	428b      	cmp	r3, r1
    20e0:	d301      	bcc.n	20e6 <__aeabi_uidiv+0x82>
    20e2:	028b      	lsls	r3, r1, #10
    20e4:	1ac0      	subs	r0, r0, r3
    20e6:	4152      	adcs	r2, r2
    20e8:	0a43      	lsrs	r3, r0, #9
    20ea:	428b      	cmp	r3, r1
    20ec:	d301      	bcc.n	20f2 <__aeabi_uidiv+0x8e>
    20ee:	024b      	lsls	r3, r1, #9
    20f0:	1ac0      	subs	r0, r0, r3
    20f2:	4152      	adcs	r2, r2
    20f4:	0a03      	lsrs	r3, r0, #8
    20f6:	428b      	cmp	r3, r1
    20f8:	d301      	bcc.n	20fe <__aeabi_uidiv+0x9a>
    20fa:	020b      	lsls	r3, r1, #8
    20fc:	1ac0      	subs	r0, r0, r3
    20fe:	4152      	adcs	r2, r2
    2100:	d2cd      	bcs.n	209e <__aeabi_uidiv+0x3a>
    2102:	09c3      	lsrs	r3, r0, #7
    2104:	428b      	cmp	r3, r1
    2106:	d301      	bcc.n	210c <__aeabi_uidiv+0xa8>
    2108:	01cb      	lsls	r3, r1, #7
    210a:	1ac0      	subs	r0, r0, r3
    210c:	4152      	adcs	r2, r2
    210e:	0983      	lsrs	r3, r0, #6
    2110:	428b      	cmp	r3, r1
    2112:	d301      	bcc.n	2118 <__aeabi_uidiv+0xb4>
    2114:	018b      	lsls	r3, r1, #6
    2116:	1ac0      	subs	r0, r0, r3
    2118:	4152      	adcs	r2, r2
    211a:	0943      	lsrs	r3, r0, #5
    211c:	428b      	cmp	r3, r1
    211e:	d301      	bcc.n	2124 <__aeabi_uidiv+0xc0>
    2120:	014b      	lsls	r3, r1, #5
    2122:	1ac0      	subs	r0, r0, r3
    2124:	4152      	adcs	r2, r2
    2126:	0903      	lsrs	r3, r0, #4
    2128:	428b      	cmp	r3, r1
    212a:	d301      	bcc.n	2130 <__aeabi_uidiv+0xcc>
    212c:	010b      	lsls	r3, r1, #4
    212e:	1ac0      	subs	r0, r0, r3
    2130:	4152      	adcs	r2, r2
    2132:	08c3      	lsrs	r3, r0, #3
    2134:	428b      	cmp	r3, r1
    2136:	d301      	bcc.n	213c <__aeabi_uidiv+0xd8>
    2138:	00cb      	lsls	r3, r1, #3
    213a:	1ac0      	subs	r0, r0, r3
    213c:	4152      	adcs	r2, r2
    213e:	0883      	lsrs	r3, r0, #2
    2140:	428b      	cmp	r3, r1
    2142:	d301      	bcc.n	2148 <__aeabi_uidiv+0xe4>
    2144:	008b      	lsls	r3, r1, #2
    2146:	1ac0      	subs	r0, r0, r3
    2148:	4152      	adcs	r2, r2
    214a:	0843      	lsrs	r3, r0, #1
    214c:	428b      	cmp	r3, r1
    214e:	d301      	bcc.n	2154 <__aeabi_uidiv+0xf0>
    2150:	004b      	lsls	r3, r1, #1
    2152:	1ac0      	subs	r0, r0, r3
    2154:	4152      	adcs	r2, r2
    2156:	1a41      	subs	r1, r0, r1
    2158:	d200      	bcs.n	215c <__aeabi_uidiv+0xf8>
    215a:	4601      	mov	r1, r0
    215c:	4152      	adcs	r2, r2
    215e:	4610      	mov	r0, r2
    2160:	4770      	bx	lr
    2162:	e7ff      	b.n	2164 <__aeabi_uidiv+0x100>
    2164:	b501      	push	{r0, lr}
    2166:	2000      	movs	r0, #0
    2168:	f000 f806 	bl	2178 <__aeabi_idiv0>
    216c:	bd02      	pop	{r1, pc}
    216e:	46c0      	nop			; (mov r8, r8)

00002170 <__aeabi_uidivmod>:
    2170:	2900      	cmp	r1, #0
    2172:	d0f7      	beq.n	2164 <__aeabi_uidiv+0x100>
    2174:	e776      	b.n	2064 <__aeabi_uidiv>
    2176:	4770      	bx	lr

00002178 <__aeabi_idiv0>:
    2178:	4770      	bx	lr
    217a:	46c0      	nop			; (mov r8, r8)

0000217c <__aeabi_lmul>:
    217c:	b5f0      	push	{r4, r5, r6, r7, lr}
    217e:	464f      	mov	r7, r9
    2180:	4646      	mov	r6, r8
    2182:	b4c0      	push	{r6, r7}
    2184:	0416      	lsls	r6, r2, #16
    2186:	0c36      	lsrs	r6, r6, #16
    2188:	4699      	mov	r9, r3
    218a:	0033      	movs	r3, r6
    218c:	0405      	lsls	r5, r0, #16
    218e:	0c2c      	lsrs	r4, r5, #16
    2190:	0c07      	lsrs	r7, r0, #16
    2192:	0c15      	lsrs	r5, r2, #16
    2194:	4363      	muls	r3, r4
    2196:	437e      	muls	r6, r7
    2198:	436f      	muls	r7, r5
    219a:	4365      	muls	r5, r4
    219c:	0c1c      	lsrs	r4, r3, #16
    219e:	19ad      	adds	r5, r5, r6
    21a0:	1964      	adds	r4, r4, r5
    21a2:	469c      	mov	ip, r3
    21a4:	42a6      	cmp	r6, r4
    21a6:	d903      	bls.n	21b0 <__aeabi_lmul+0x34>
    21a8:	2380      	movs	r3, #128	; 0x80
    21aa:	025b      	lsls	r3, r3, #9
    21ac:	4698      	mov	r8, r3
    21ae:	4447      	add	r7, r8
    21b0:	4663      	mov	r3, ip
    21b2:	0c25      	lsrs	r5, r4, #16
    21b4:	19ef      	adds	r7, r5, r7
    21b6:	041d      	lsls	r5, r3, #16
    21b8:	464b      	mov	r3, r9
    21ba:	434a      	muls	r2, r1
    21bc:	4343      	muls	r3, r0
    21be:	0c2d      	lsrs	r5, r5, #16
    21c0:	0424      	lsls	r4, r4, #16
    21c2:	1964      	adds	r4, r4, r5
    21c4:	1899      	adds	r1, r3, r2
    21c6:	19c9      	adds	r1, r1, r7
    21c8:	0020      	movs	r0, r4
    21ca:	bc0c      	pop	{r2, r3}
    21cc:	4690      	mov	r8, r2
    21ce:	4699      	mov	r9, r3
    21d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21d2:	46c0      	nop			; (mov r8, r8)

000021d4 <__libc_init_array>:
    21d4:	4b0e      	ldr	r3, [pc, #56]	; (2210 <__libc_init_array+0x3c>)
    21d6:	b570      	push	{r4, r5, r6, lr}
    21d8:	2500      	movs	r5, #0
    21da:	001e      	movs	r6, r3
    21dc:	4c0d      	ldr	r4, [pc, #52]	; (2214 <__libc_init_array+0x40>)
    21de:	1ae4      	subs	r4, r4, r3
    21e0:	10a4      	asrs	r4, r4, #2
    21e2:	42a5      	cmp	r5, r4
    21e4:	d004      	beq.n	21f0 <__libc_init_array+0x1c>
    21e6:	00ab      	lsls	r3, r5, #2
    21e8:	58f3      	ldr	r3, [r6, r3]
    21ea:	4798      	blx	r3
    21ec:	3501      	adds	r5, #1
    21ee:	e7f8      	b.n	21e2 <__libc_init_array+0xe>
    21f0:	f000 fcd2 	bl	2b98 <_init>
    21f4:	4b08      	ldr	r3, [pc, #32]	; (2218 <__libc_init_array+0x44>)
    21f6:	2500      	movs	r5, #0
    21f8:	001e      	movs	r6, r3
    21fa:	4c08      	ldr	r4, [pc, #32]	; (221c <__libc_init_array+0x48>)
    21fc:	1ae4      	subs	r4, r4, r3
    21fe:	10a4      	asrs	r4, r4, #2
    2200:	42a5      	cmp	r5, r4
    2202:	d004      	beq.n	220e <__libc_init_array+0x3a>
    2204:	00ab      	lsls	r3, r5, #2
    2206:	58f3      	ldr	r3, [r6, r3]
    2208:	4798      	blx	r3
    220a:	3501      	adds	r5, #1
    220c:	e7f8      	b.n	2200 <__libc_init_array+0x2c>
    220e:	bd70      	pop	{r4, r5, r6, pc}
    2210:	00002ba4 	.word	0x00002ba4
    2214:	00002ba4 	.word	0x00002ba4
    2218:	00002ba4 	.word	0x00002ba4
    221c:	00002ba8 	.word	0x00002ba8

00002220 <memcpy>:
    2220:	2300      	movs	r3, #0
    2222:	b510      	push	{r4, lr}
    2224:	429a      	cmp	r2, r3
    2226:	d003      	beq.n	2230 <memcpy+0x10>
    2228:	5ccc      	ldrb	r4, [r1, r3]
    222a:	54c4      	strb	r4, [r0, r3]
    222c:	3301      	adds	r3, #1
    222e:	e7f9      	b.n	2224 <memcpy+0x4>
    2230:	bd10      	pop	{r4, pc}

00002232 <memset>:
    2232:	0003      	movs	r3, r0
    2234:	1882      	adds	r2, r0, r2
    2236:	4293      	cmp	r3, r2
    2238:	d002      	beq.n	2240 <memset+0xe>
    223a:	7019      	strb	r1, [r3, #0]
    223c:	3301      	adds	r3, #1
    223e:	e7fa      	b.n	2236 <memset+0x4>
    2240:	4770      	bx	lr

00002242 <setbuf>:
    2242:	424a      	negs	r2, r1
    2244:	414a      	adcs	r2, r1
    2246:	2380      	movs	r3, #128	; 0x80
    2248:	b510      	push	{r4, lr}
    224a:	0052      	lsls	r2, r2, #1
    224c:	00db      	lsls	r3, r3, #3
    224e:	f000 f801 	bl	2254 <setvbuf>
    2252:	bd10      	pop	{r4, pc}

00002254 <setvbuf>:
    2254:	b5f0      	push	{r4, r5, r6, r7, lr}
    2256:	001d      	movs	r5, r3
    2258:	4b51      	ldr	r3, [pc, #324]	; (23a0 <setvbuf+0x14c>)
    225a:	b085      	sub	sp, #20
    225c:	681e      	ldr	r6, [r3, #0]
    225e:	0004      	movs	r4, r0
    2260:	000f      	movs	r7, r1
    2262:	9200      	str	r2, [sp, #0]
    2264:	2e00      	cmp	r6, #0
    2266:	d005      	beq.n	2274 <setvbuf+0x20>
    2268:	69b3      	ldr	r3, [r6, #24]
    226a:	2b00      	cmp	r3, #0
    226c:	d102      	bne.n	2274 <setvbuf+0x20>
    226e:	0030      	movs	r0, r6
    2270:	f000 f994 	bl	259c <__sinit>
    2274:	4b4b      	ldr	r3, [pc, #300]	; (23a4 <setvbuf+0x150>)
    2276:	429c      	cmp	r4, r3
    2278:	d101      	bne.n	227e <setvbuf+0x2a>
    227a:	6874      	ldr	r4, [r6, #4]
    227c:	e008      	b.n	2290 <setvbuf+0x3c>
    227e:	4b4a      	ldr	r3, [pc, #296]	; (23a8 <setvbuf+0x154>)
    2280:	429c      	cmp	r4, r3
    2282:	d101      	bne.n	2288 <setvbuf+0x34>
    2284:	68b4      	ldr	r4, [r6, #8]
    2286:	e003      	b.n	2290 <setvbuf+0x3c>
    2288:	4b48      	ldr	r3, [pc, #288]	; (23ac <setvbuf+0x158>)
    228a:	429c      	cmp	r4, r3
    228c:	d100      	bne.n	2290 <setvbuf+0x3c>
    228e:	68f4      	ldr	r4, [r6, #12]
    2290:	9b00      	ldr	r3, [sp, #0]
    2292:	2b02      	cmp	r3, #2
    2294:	d005      	beq.n	22a2 <setvbuf+0x4e>
    2296:	2b01      	cmp	r3, #1
    2298:	d900      	bls.n	229c <setvbuf+0x48>
    229a:	e07c      	b.n	2396 <setvbuf+0x142>
    229c:	2d00      	cmp	r5, #0
    229e:	da00      	bge.n	22a2 <setvbuf+0x4e>
    22a0:	e079      	b.n	2396 <setvbuf+0x142>
    22a2:	0021      	movs	r1, r4
    22a4:	0030      	movs	r0, r6
    22a6:	f000 f90b 	bl	24c0 <_fflush_r>
    22aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    22ac:	2900      	cmp	r1, #0
    22ae:	d008      	beq.n	22c2 <setvbuf+0x6e>
    22b0:	0023      	movs	r3, r4
    22b2:	3344      	adds	r3, #68	; 0x44
    22b4:	4299      	cmp	r1, r3
    22b6:	d002      	beq.n	22be <setvbuf+0x6a>
    22b8:	0030      	movs	r0, r6
    22ba:	f000 fa33 	bl	2724 <_free_r>
    22be:	2300      	movs	r3, #0
    22c0:	6363      	str	r3, [r4, #52]	; 0x34
    22c2:	2300      	movs	r3, #0
    22c4:	61a3      	str	r3, [r4, #24]
    22c6:	6063      	str	r3, [r4, #4]
    22c8:	89a3      	ldrh	r3, [r4, #12]
    22ca:	061b      	lsls	r3, r3, #24
    22cc:	d503      	bpl.n	22d6 <setvbuf+0x82>
    22ce:	6921      	ldr	r1, [r4, #16]
    22d0:	0030      	movs	r0, r6
    22d2:	f000 fa27 	bl	2724 <_free_r>
    22d6:	89a2      	ldrh	r2, [r4, #12]
    22d8:	4b35      	ldr	r3, [pc, #212]	; (23b0 <setvbuf+0x15c>)
    22da:	4013      	ands	r3, r2
    22dc:	81a3      	strh	r3, [r4, #12]
    22de:	9b00      	ldr	r3, [sp, #0]
    22e0:	2b02      	cmp	r3, #2
    22e2:	d021      	beq.n	2328 <setvbuf+0xd4>
    22e4:	ab03      	add	r3, sp, #12
    22e6:	aa02      	add	r2, sp, #8
    22e8:	0021      	movs	r1, r4
    22ea:	0030      	movs	r0, r6
    22ec:	f000 f9ea 	bl	26c4 <__swhatbuf_r>
    22f0:	89a3      	ldrh	r3, [r4, #12]
    22f2:	4318      	orrs	r0, r3
    22f4:	81a0      	strh	r0, [r4, #12]
    22f6:	2d00      	cmp	r5, #0
    22f8:	d101      	bne.n	22fe <setvbuf+0xaa>
    22fa:	9d02      	ldr	r5, [sp, #8]
    22fc:	e001      	b.n	2302 <setvbuf+0xae>
    22fe:	2f00      	cmp	r7, #0
    2300:	d125      	bne.n	234e <setvbuf+0xfa>
    2302:	0028      	movs	r0, r5
    2304:	f000 fa04 	bl	2710 <malloc>
    2308:	9501      	str	r5, [sp, #4]
    230a:	1e07      	subs	r7, r0, #0
    230c:	d11a      	bne.n	2344 <setvbuf+0xf0>
    230e:	9b02      	ldr	r3, [sp, #8]
    2310:	9301      	str	r3, [sp, #4]
    2312:	42ab      	cmp	r3, r5
    2314:	d102      	bne.n	231c <setvbuf+0xc8>
    2316:	2001      	movs	r0, #1
    2318:	4240      	negs	r0, r0
    231a:	e006      	b.n	232a <setvbuf+0xd6>
    231c:	9801      	ldr	r0, [sp, #4]
    231e:	f000 f9f7 	bl	2710 <malloc>
    2322:	1e07      	subs	r7, r0, #0
    2324:	d10e      	bne.n	2344 <setvbuf+0xf0>
    2326:	e7f6      	b.n	2316 <setvbuf+0xc2>
    2328:	2000      	movs	r0, #0
    232a:	2202      	movs	r2, #2
    232c:	89a3      	ldrh	r3, [r4, #12]
    232e:	4313      	orrs	r3, r2
    2330:	81a3      	strh	r3, [r4, #12]
    2332:	2300      	movs	r3, #0
    2334:	60a3      	str	r3, [r4, #8]
    2336:	0023      	movs	r3, r4
    2338:	3347      	adds	r3, #71	; 0x47
    233a:	6023      	str	r3, [r4, #0]
    233c:	6123      	str	r3, [r4, #16]
    233e:	2301      	movs	r3, #1
    2340:	6163      	str	r3, [r4, #20]
    2342:	e02a      	b.n	239a <setvbuf+0x146>
    2344:	2280      	movs	r2, #128	; 0x80
    2346:	89a3      	ldrh	r3, [r4, #12]
    2348:	9d01      	ldr	r5, [sp, #4]
    234a:	4313      	orrs	r3, r2
    234c:	81a3      	strh	r3, [r4, #12]
    234e:	69b3      	ldr	r3, [r6, #24]
    2350:	2b00      	cmp	r3, #0
    2352:	d102      	bne.n	235a <setvbuf+0x106>
    2354:	0030      	movs	r0, r6
    2356:	f000 f921 	bl	259c <__sinit>
    235a:	9b00      	ldr	r3, [sp, #0]
    235c:	2b01      	cmp	r3, #1
    235e:	d103      	bne.n	2368 <setvbuf+0x114>
    2360:	89a3      	ldrh	r3, [r4, #12]
    2362:	9a00      	ldr	r2, [sp, #0]
    2364:	431a      	orrs	r2, r3
    2366:	81a2      	strh	r2, [r4, #12]
    2368:	2308      	movs	r3, #8
    236a:	89a2      	ldrh	r2, [r4, #12]
    236c:	6027      	str	r7, [r4, #0]
    236e:	4013      	ands	r3, r2
    2370:	6127      	str	r7, [r4, #16]
    2372:	6165      	str	r5, [r4, #20]
    2374:	1e18      	subs	r0, r3, #0
    2376:	d00c      	beq.n	2392 <setvbuf+0x13e>
    2378:	2301      	movs	r3, #1
    237a:	401a      	ands	r2, r3
    237c:	2300      	movs	r3, #0
    237e:	1e10      	subs	r0, r2, #0
    2380:	4298      	cmp	r0, r3
    2382:	d004      	beq.n	238e <setvbuf+0x13a>
    2384:	426d      	negs	r5, r5
    2386:	60a3      	str	r3, [r4, #8]
    2388:	61a5      	str	r5, [r4, #24]
    238a:	0018      	movs	r0, r3
    238c:	e005      	b.n	239a <setvbuf+0x146>
    238e:	60a5      	str	r5, [r4, #8]
    2390:	e003      	b.n	239a <setvbuf+0x146>
    2392:	60a3      	str	r3, [r4, #8]
    2394:	e001      	b.n	239a <setvbuf+0x146>
    2396:	2001      	movs	r0, #1
    2398:	4240      	negs	r0, r0
    239a:	b005      	add	sp, #20
    239c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	2000006c 	.word	0x2000006c
    23a4:	00002b38 	.word	0x00002b38
    23a8:	00002b58 	.word	0x00002b58
    23ac:	00002b78 	.word	0x00002b78
    23b0:	fffff35c 	.word	0xfffff35c

000023b4 <__sflush_r>:
    23b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    23b6:	898a      	ldrh	r2, [r1, #12]
    23b8:	0005      	movs	r5, r0
    23ba:	000c      	movs	r4, r1
    23bc:	0713      	lsls	r3, r2, #28
    23be:	d45a      	bmi.n	2476 <__sflush_r+0xc2>
    23c0:	684b      	ldr	r3, [r1, #4]
    23c2:	2b00      	cmp	r3, #0
    23c4:	dc02      	bgt.n	23cc <__sflush_r+0x18>
    23c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    23c8:	2b00      	cmp	r3, #0
    23ca:	dd19      	ble.n	2400 <__sflush_r+0x4c>
    23cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    23ce:	2f00      	cmp	r7, #0
    23d0:	d016      	beq.n	2400 <__sflush_r+0x4c>
    23d2:	2300      	movs	r3, #0
    23d4:	682e      	ldr	r6, [r5, #0]
    23d6:	602b      	str	r3, [r5, #0]
    23d8:	2380      	movs	r3, #128	; 0x80
    23da:	015b      	lsls	r3, r3, #5
    23dc:	401a      	ands	r2, r3
    23de:	d001      	beq.n	23e4 <__sflush_r+0x30>
    23e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    23e2:	e014      	b.n	240e <__sflush_r+0x5a>
    23e4:	2301      	movs	r3, #1
    23e6:	6a21      	ldr	r1, [r4, #32]
    23e8:	0028      	movs	r0, r5
    23ea:	47b8      	blx	r7
    23ec:	1c43      	adds	r3, r0, #1
    23ee:	d10e      	bne.n	240e <__sflush_r+0x5a>
    23f0:	682b      	ldr	r3, [r5, #0]
    23f2:	2b00      	cmp	r3, #0
    23f4:	d00b      	beq.n	240e <__sflush_r+0x5a>
    23f6:	2b1d      	cmp	r3, #29
    23f8:	d001      	beq.n	23fe <__sflush_r+0x4a>
    23fa:	2b16      	cmp	r3, #22
    23fc:	d102      	bne.n	2404 <__sflush_r+0x50>
    23fe:	602e      	str	r6, [r5, #0]
    2400:	2000      	movs	r0, #0
    2402:	e05a      	b.n	24ba <__sflush_r+0x106>
    2404:	2240      	movs	r2, #64	; 0x40
    2406:	89a3      	ldrh	r3, [r4, #12]
    2408:	4313      	orrs	r3, r2
    240a:	81a3      	strh	r3, [r4, #12]
    240c:	e055      	b.n	24ba <__sflush_r+0x106>
    240e:	89a3      	ldrh	r3, [r4, #12]
    2410:	075b      	lsls	r3, r3, #29
    2412:	d506      	bpl.n	2422 <__sflush_r+0x6e>
    2414:	6863      	ldr	r3, [r4, #4]
    2416:	1ac0      	subs	r0, r0, r3
    2418:	6b63      	ldr	r3, [r4, #52]	; 0x34
    241a:	2b00      	cmp	r3, #0
    241c:	d001      	beq.n	2422 <__sflush_r+0x6e>
    241e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2420:	1ac0      	subs	r0, r0, r3
    2422:	2300      	movs	r3, #0
    2424:	0002      	movs	r2, r0
    2426:	6a21      	ldr	r1, [r4, #32]
    2428:	0028      	movs	r0, r5
    242a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    242c:	47b8      	blx	r7
    242e:	89a3      	ldrh	r3, [r4, #12]
    2430:	1c42      	adds	r2, r0, #1
    2432:	d106      	bne.n	2442 <__sflush_r+0x8e>
    2434:	6829      	ldr	r1, [r5, #0]
    2436:	291d      	cmp	r1, #29
    2438:	d83a      	bhi.n	24b0 <__sflush_r+0xfc>
    243a:	4a20      	ldr	r2, [pc, #128]	; (24bc <__sflush_r+0x108>)
    243c:	40ca      	lsrs	r2, r1
    243e:	07d2      	lsls	r2, r2, #31
    2440:	d536      	bpl.n	24b0 <__sflush_r+0xfc>
    2442:	2200      	movs	r2, #0
    2444:	6062      	str	r2, [r4, #4]
    2446:	6922      	ldr	r2, [r4, #16]
    2448:	6022      	str	r2, [r4, #0]
    244a:	04db      	lsls	r3, r3, #19
    244c:	d505      	bpl.n	245a <__sflush_r+0xa6>
    244e:	1c43      	adds	r3, r0, #1
    2450:	d102      	bne.n	2458 <__sflush_r+0xa4>
    2452:	682b      	ldr	r3, [r5, #0]
    2454:	2b00      	cmp	r3, #0
    2456:	d100      	bne.n	245a <__sflush_r+0xa6>
    2458:	6560      	str	r0, [r4, #84]	; 0x54
    245a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    245c:	602e      	str	r6, [r5, #0]
    245e:	2900      	cmp	r1, #0
    2460:	d0ce      	beq.n	2400 <__sflush_r+0x4c>
    2462:	0023      	movs	r3, r4
    2464:	3344      	adds	r3, #68	; 0x44
    2466:	4299      	cmp	r1, r3
    2468:	d002      	beq.n	2470 <__sflush_r+0xbc>
    246a:	0028      	movs	r0, r5
    246c:	f000 f95a 	bl	2724 <_free_r>
    2470:	2000      	movs	r0, #0
    2472:	6360      	str	r0, [r4, #52]	; 0x34
    2474:	e021      	b.n	24ba <__sflush_r+0x106>
    2476:	690f      	ldr	r7, [r1, #16]
    2478:	2f00      	cmp	r7, #0
    247a:	d0c1      	beq.n	2400 <__sflush_r+0x4c>
    247c:	680b      	ldr	r3, [r1, #0]
    247e:	600f      	str	r7, [r1, #0]
    2480:	1bdb      	subs	r3, r3, r7
    2482:	9301      	str	r3, [sp, #4]
    2484:	2300      	movs	r3, #0
    2486:	0792      	lsls	r2, r2, #30
    2488:	d100      	bne.n	248c <__sflush_r+0xd8>
    248a:	694b      	ldr	r3, [r1, #20]
    248c:	60a3      	str	r3, [r4, #8]
    248e:	e003      	b.n	2498 <__sflush_r+0xe4>
    2490:	9b01      	ldr	r3, [sp, #4]
    2492:	183f      	adds	r7, r7, r0
    2494:	1a1b      	subs	r3, r3, r0
    2496:	9301      	str	r3, [sp, #4]
    2498:	9b01      	ldr	r3, [sp, #4]
    249a:	2b00      	cmp	r3, #0
    249c:	ddb0      	ble.n	2400 <__sflush_r+0x4c>
    249e:	9b01      	ldr	r3, [sp, #4]
    24a0:	003a      	movs	r2, r7
    24a2:	6a21      	ldr	r1, [r4, #32]
    24a4:	0028      	movs	r0, r5
    24a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    24a8:	47b0      	blx	r6
    24aa:	2800      	cmp	r0, #0
    24ac:	dcf0      	bgt.n	2490 <__sflush_r+0xdc>
    24ae:	89a3      	ldrh	r3, [r4, #12]
    24b0:	2240      	movs	r2, #64	; 0x40
    24b2:	2001      	movs	r0, #1
    24b4:	4313      	orrs	r3, r2
    24b6:	81a3      	strh	r3, [r4, #12]
    24b8:	4240      	negs	r0, r0
    24ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    24bc:	20400001 	.word	0x20400001

000024c0 <_fflush_r>:
    24c0:	690b      	ldr	r3, [r1, #16]
    24c2:	b570      	push	{r4, r5, r6, lr}
    24c4:	0005      	movs	r5, r0
    24c6:	000c      	movs	r4, r1
    24c8:	2b00      	cmp	r3, #0
    24ca:	d101      	bne.n	24d0 <_fflush_r+0x10>
    24cc:	2000      	movs	r0, #0
    24ce:	e01c      	b.n	250a <_fflush_r+0x4a>
    24d0:	2800      	cmp	r0, #0
    24d2:	d004      	beq.n	24de <_fflush_r+0x1e>
    24d4:	6983      	ldr	r3, [r0, #24]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d101      	bne.n	24de <_fflush_r+0x1e>
    24da:	f000 f85f 	bl	259c <__sinit>
    24de:	4b0b      	ldr	r3, [pc, #44]	; (250c <_fflush_r+0x4c>)
    24e0:	429c      	cmp	r4, r3
    24e2:	d101      	bne.n	24e8 <_fflush_r+0x28>
    24e4:	686c      	ldr	r4, [r5, #4]
    24e6:	e008      	b.n	24fa <_fflush_r+0x3a>
    24e8:	4b09      	ldr	r3, [pc, #36]	; (2510 <_fflush_r+0x50>)
    24ea:	429c      	cmp	r4, r3
    24ec:	d101      	bne.n	24f2 <_fflush_r+0x32>
    24ee:	68ac      	ldr	r4, [r5, #8]
    24f0:	e003      	b.n	24fa <_fflush_r+0x3a>
    24f2:	4b08      	ldr	r3, [pc, #32]	; (2514 <_fflush_r+0x54>)
    24f4:	429c      	cmp	r4, r3
    24f6:	d100      	bne.n	24fa <_fflush_r+0x3a>
    24f8:	68ec      	ldr	r4, [r5, #12]
    24fa:	220c      	movs	r2, #12
    24fc:	5ea3      	ldrsh	r3, [r4, r2]
    24fe:	2b00      	cmp	r3, #0
    2500:	d0e4      	beq.n	24cc <_fflush_r+0xc>
    2502:	0021      	movs	r1, r4
    2504:	0028      	movs	r0, r5
    2506:	f7ff ff55 	bl	23b4 <__sflush_r>
    250a:	bd70      	pop	{r4, r5, r6, pc}
    250c:	00002b38 	.word	0x00002b38
    2510:	00002b58 	.word	0x00002b58
    2514:	00002b78 	.word	0x00002b78

00002518 <_cleanup_r>:
    2518:	b510      	push	{r4, lr}
    251a:	4902      	ldr	r1, [pc, #8]	; (2524 <_cleanup_r+0xc>)
    251c:	f000 f8b0 	bl	2680 <_fwalk_reent>
    2520:	bd10      	pop	{r4, pc}
    2522:	46c0      	nop			; (mov r8, r8)
    2524:	000024c1 	.word	0x000024c1

00002528 <std.isra.0>:
    2528:	2300      	movs	r3, #0
    252a:	b510      	push	{r4, lr}
    252c:	0004      	movs	r4, r0
    252e:	6003      	str	r3, [r0, #0]
    2530:	6043      	str	r3, [r0, #4]
    2532:	6083      	str	r3, [r0, #8]
    2534:	8181      	strh	r1, [r0, #12]
    2536:	6643      	str	r3, [r0, #100]	; 0x64
    2538:	81c2      	strh	r2, [r0, #14]
    253a:	6103      	str	r3, [r0, #16]
    253c:	6143      	str	r3, [r0, #20]
    253e:	6183      	str	r3, [r0, #24]
    2540:	0019      	movs	r1, r3
    2542:	2208      	movs	r2, #8
    2544:	305c      	adds	r0, #92	; 0x5c
    2546:	f7ff fe74 	bl	2232 <memset>
    254a:	4b05      	ldr	r3, [pc, #20]	; (2560 <std.isra.0+0x38>)
    254c:	6224      	str	r4, [r4, #32]
    254e:	6263      	str	r3, [r4, #36]	; 0x24
    2550:	4b04      	ldr	r3, [pc, #16]	; (2564 <std.isra.0+0x3c>)
    2552:	62a3      	str	r3, [r4, #40]	; 0x28
    2554:	4b04      	ldr	r3, [pc, #16]	; (2568 <std.isra.0+0x40>)
    2556:	62e3      	str	r3, [r4, #44]	; 0x2c
    2558:	4b04      	ldr	r3, [pc, #16]	; (256c <std.isra.0+0x44>)
    255a:	6323      	str	r3, [r4, #48]	; 0x30
    255c:	bd10      	pop	{r4, pc}
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	00002881 	.word	0x00002881
    2564:	000028a9 	.word	0x000028a9
    2568:	000028e1 	.word	0x000028e1
    256c:	0000290d 	.word	0x0000290d

00002570 <__sfmoreglue>:
    2570:	b570      	push	{r4, r5, r6, lr}
    2572:	2568      	movs	r5, #104	; 0x68
    2574:	1e4b      	subs	r3, r1, #1
    2576:	435d      	muls	r5, r3
    2578:	000e      	movs	r6, r1
    257a:	0029      	movs	r1, r5
    257c:	3174      	adds	r1, #116	; 0x74
    257e:	f000 f917 	bl	27b0 <_malloc_r>
    2582:	1e04      	subs	r4, r0, #0
    2584:	d008      	beq.n	2598 <__sfmoreglue+0x28>
    2586:	2100      	movs	r1, #0
    2588:	002a      	movs	r2, r5
    258a:	6001      	str	r1, [r0, #0]
    258c:	6046      	str	r6, [r0, #4]
    258e:	300c      	adds	r0, #12
    2590:	60a0      	str	r0, [r4, #8]
    2592:	3268      	adds	r2, #104	; 0x68
    2594:	f7ff fe4d 	bl	2232 <memset>
    2598:	0020      	movs	r0, r4
    259a:	bd70      	pop	{r4, r5, r6, pc}

0000259c <__sinit>:
    259c:	6983      	ldr	r3, [r0, #24]
    259e:	b513      	push	{r0, r1, r4, lr}
    25a0:	0004      	movs	r4, r0
    25a2:	2b00      	cmp	r3, #0
    25a4:	d128      	bne.n	25f8 <__sinit+0x5c>
    25a6:	6483      	str	r3, [r0, #72]	; 0x48
    25a8:	64c3      	str	r3, [r0, #76]	; 0x4c
    25aa:	6503      	str	r3, [r0, #80]	; 0x50
    25ac:	4b13      	ldr	r3, [pc, #76]	; (25fc <__sinit+0x60>)
    25ae:	4a14      	ldr	r2, [pc, #80]	; (2600 <__sinit+0x64>)
    25b0:	681b      	ldr	r3, [r3, #0]
    25b2:	6282      	str	r2, [r0, #40]	; 0x28
    25b4:	9301      	str	r3, [sp, #4]
    25b6:	4298      	cmp	r0, r3
    25b8:	d101      	bne.n	25be <__sinit+0x22>
    25ba:	2301      	movs	r3, #1
    25bc:	6183      	str	r3, [r0, #24]
    25be:	0020      	movs	r0, r4
    25c0:	f000 f820 	bl	2604 <__sfp>
    25c4:	6060      	str	r0, [r4, #4]
    25c6:	0020      	movs	r0, r4
    25c8:	f000 f81c 	bl	2604 <__sfp>
    25cc:	60a0      	str	r0, [r4, #8]
    25ce:	0020      	movs	r0, r4
    25d0:	f000 f818 	bl	2604 <__sfp>
    25d4:	2200      	movs	r2, #0
    25d6:	60e0      	str	r0, [r4, #12]
    25d8:	2104      	movs	r1, #4
    25da:	6860      	ldr	r0, [r4, #4]
    25dc:	f7ff ffa4 	bl	2528 <std.isra.0>
    25e0:	2201      	movs	r2, #1
    25e2:	2109      	movs	r1, #9
    25e4:	68a0      	ldr	r0, [r4, #8]
    25e6:	f7ff ff9f 	bl	2528 <std.isra.0>
    25ea:	2202      	movs	r2, #2
    25ec:	2112      	movs	r1, #18
    25ee:	68e0      	ldr	r0, [r4, #12]
    25f0:	f7ff ff9a 	bl	2528 <std.isra.0>
    25f4:	2301      	movs	r3, #1
    25f6:	61a3      	str	r3, [r4, #24]
    25f8:	bd13      	pop	{r0, r1, r4, pc}
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	00002b34 	.word	0x00002b34
    2600:	00002519 	.word	0x00002519

00002604 <__sfp>:
    2604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2606:	4b1d      	ldr	r3, [pc, #116]	; (267c <__sfp+0x78>)
    2608:	0006      	movs	r6, r0
    260a:	681d      	ldr	r5, [r3, #0]
    260c:	69ab      	ldr	r3, [r5, #24]
    260e:	2b00      	cmp	r3, #0
    2610:	d102      	bne.n	2618 <__sfp+0x14>
    2612:	0028      	movs	r0, r5
    2614:	f7ff ffc2 	bl	259c <__sinit>
    2618:	3548      	adds	r5, #72	; 0x48
    261a:	68ac      	ldr	r4, [r5, #8]
    261c:	686b      	ldr	r3, [r5, #4]
    261e:	3b01      	subs	r3, #1
    2620:	d405      	bmi.n	262e <__sfp+0x2a>
    2622:	220c      	movs	r2, #12
    2624:	5ea7      	ldrsh	r7, [r4, r2]
    2626:	2f00      	cmp	r7, #0
    2628:	d010      	beq.n	264c <__sfp+0x48>
    262a:	3468      	adds	r4, #104	; 0x68
    262c:	e7f7      	b.n	261e <__sfp+0x1a>
    262e:	682b      	ldr	r3, [r5, #0]
    2630:	2b00      	cmp	r3, #0
    2632:	d001      	beq.n	2638 <__sfp+0x34>
    2634:	682d      	ldr	r5, [r5, #0]
    2636:	e7f0      	b.n	261a <__sfp+0x16>
    2638:	2104      	movs	r1, #4
    263a:	0030      	movs	r0, r6
    263c:	f7ff ff98 	bl	2570 <__sfmoreglue>
    2640:	6028      	str	r0, [r5, #0]
    2642:	2800      	cmp	r0, #0
    2644:	d1f6      	bne.n	2634 <__sfp+0x30>
    2646:	230c      	movs	r3, #12
    2648:	6033      	str	r3, [r6, #0]
    264a:	e016      	b.n	267a <__sfp+0x76>
    264c:	2301      	movs	r3, #1
    264e:	0020      	movs	r0, r4
    2650:	425b      	negs	r3, r3
    2652:	81e3      	strh	r3, [r4, #14]
    2654:	3302      	adds	r3, #2
    2656:	81a3      	strh	r3, [r4, #12]
    2658:	6667      	str	r7, [r4, #100]	; 0x64
    265a:	6027      	str	r7, [r4, #0]
    265c:	60a7      	str	r7, [r4, #8]
    265e:	6067      	str	r7, [r4, #4]
    2660:	6127      	str	r7, [r4, #16]
    2662:	6167      	str	r7, [r4, #20]
    2664:	61a7      	str	r7, [r4, #24]
    2666:	305c      	adds	r0, #92	; 0x5c
    2668:	2208      	movs	r2, #8
    266a:	0039      	movs	r1, r7
    266c:	f7ff fde1 	bl	2232 <memset>
    2670:	0020      	movs	r0, r4
    2672:	6367      	str	r7, [r4, #52]	; 0x34
    2674:	63a7      	str	r7, [r4, #56]	; 0x38
    2676:	64a7      	str	r7, [r4, #72]	; 0x48
    2678:	64e7      	str	r7, [r4, #76]	; 0x4c
    267a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    267c:	00002b34 	.word	0x00002b34

00002680 <_fwalk_reent>:
    2680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2682:	0004      	movs	r4, r0
    2684:	0007      	movs	r7, r0
    2686:	2600      	movs	r6, #0
    2688:	9101      	str	r1, [sp, #4]
    268a:	3448      	adds	r4, #72	; 0x48
    268c:	2c00      	cmp	r4, #0
    268e:	d016      	beq.n	26be <_fwalk_reent+0x3e>
    2690:	6863      	ldr	r3, [r4, #4]
    2692:	68a5      	ldr	r5, [r4, #8]
    2694:	9300      	str	r3, [sp, #0]
    2696:	9b00      	ldr	r3, [sp, #0]
    2698:	3b01      	subs	r3, #1
    269a:	9300      	str	r3, [sp, #0]
    269c:	d40d      	bmi.n	26ba <_fwalk_reent+0x3a>
    269e:	89ab      	ldrh	r3, [r5, #12]
    26a0:	2b01      	cmp	r3, #1
    26a2:	d908      	bls.n	26b6 <_fwalk_reent+0x36>
    26a4:	220e      	movs	r2, #14
    26a6:	5eab      	ldrsh	r3, [r5, r2]
    26a8:	3301      	adds	r3, #1
    26aa:	d004      	beq.n	26b6 <_fwalk_reent+0x36>
    26ac:	0029      	movs	r1, r5
    26ae:	0038      	movs	r0, r7
    26b0:	9b01      	ldr	r3, [sp, #4]
    26b2:	4798      	blx	r3
    26b4:	4306      	orrs	r6, r0
    26b6:	3568      	adds	r5, #104	; 0x68
    26b8:	e7ed      	b.n	2696 <_fwalk_reent+0x16>
    26ba:	6824      	ldr	r4, [r4, #0]
    26bc:	e7e6      	b.n	268c <_fwalk_reent+0xc>
    26be:	0030      	movs	r0, r6
    26c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000026c4 <__swhatbuf_r>:
    26c4:	b570      	push	{r4, r5, r6, lr}
    26c6:	000e      	movs	r6, r1
    26c8:	001d      	movs	r5, r3
    26ca:	230e      	movs	r3, #14
    26cc:	5ec9      	ldrsh	r1, [r1, r3]
    26ce:	b090      	sub	sp, #64	; 0x40
    26d0:	0014      	movs	r4, r2
    26d2:	2900      	cmp	r1, #0
    26d4:	da06      	bge.n	26e4 <__swhatbuf_r+0x20>
    26d6:	2300      	movs	r3, #0
    26d8:	602b      	str	r3, [r5, #0]
    26da:	89b3      	ldrh	r3, [r6, #12]
    26dc:	061b      	lsls	r3, r3, #24
    26de:	d50f      	bpl.n	2700 <__swhatbuf_r+0x3c>
    26e0:	2340      	movs	r3, #64	; 0x40
    26e2:	e00f      	b.n	2704 <__swhatbuf_r+0x40>
    26e4:	aa01      	add	r2, sp, #4
    26e6:	f000 f93d 	bl	2964 <_fstat_r>
    26ea:	2800      	cmp	r0, #0
    26ec:	dbf3      	blt.n	26d6 <__swhatbuf_r+0x12>
    26ee:	23f0      	movs	r3, #240	; 0xf0
    26f0:	9a02      	ldr	r2, [sp, #8]
    26f2:	021b      	lsls	r3, r3, #8
    26f4:	4013      	ands	r3, r2
    26f6:	4a05      	ldr	r2, [pc, #20]	; (270c <__swhatbuf_r+0x48>)
    26f8:	189b      	adds	r3, r3, r2
    26fa:	425a      	negs	r2, r3
    26fc:	4153      	adcs	r3, r2
    26fe:	602b      	str	r3, [r5, #0]
    2700:	2380      	movs	r3, #128	; 0x80
    2702:	00db      	lsls	r3, r3, #3
    2704:	2000      	movs	r0, #0
    2706:	6023      	str	r3, [r4, #0]
    2708:	b010      	add	sp, #64	; 0x40
    270a:	bd70      	pop	{r4, r5, r6, pc}
    270c:	ffffe000 	.word	0xffffe000

00002710 <malloc>:
    2710:	b510      	push	{r4, lr}
    2712:	4b03      	ldr	r3, [pc, #12]	; (2720 <malloc+0x10>)
    2714:	0001      	movs	r1, r0
    2716:	6818      	ldr	r0, [r3, #0]
    2718:	f000 f84a 	bl	27b0 <_malloc_r>
    271c:	bd10      	pop	{r4, pc}
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	2000006c 	.word	0x2000006c

00002724 <_free_r>:
    2724:	b530      	push	{r4, r5, lr}
    2726:	2900      	cmp	r1, #0
    2728:	d03e      	beq.n	27a8 <_free_r+0x84>
    272a:	3904      	subs	r1, #4
    272c:	680b      	ldr	r3, [r1, #0]
    272e:	2b00      	cmp	r3, #0
    2730:	da00      	bge.n	2734 <_free_r+0x10>
    2732:	18c9      	adds	r1, r1, r3
    2734:	4a1d      	ldr	r2, [pc, #116]	; (27ac <_free_r+0x88>)
    2736:	6813      	ldr	r3, [r2, #0]
    2738:	0014      	movs	r4, r2
    273a:	2b00      	cmp	r3, #0
    273c:	d102      	bne.n	2744 <_free_r+0x20>
    273e:	604b      	str	r3, [r1, #4]
    2740:	6011      	str	r1, [r2, #0]
    2742:	e031      	b.n	27a8 <_free_r+0x84>
    2744:	428b      	cmp	r3, r1
    2746:	d90d      	bls.n	2764 <_free_r+0x40>
    2748:	680a      	ldr	r2, [r1, #0]
    274a:	1888      	adds	r0, r1, r2
    274c:	4283      	cmp	r3, r0
    274e:	d103      	bne.n	2758 <_free_r+0x34>
    2750:	6818      	ldr	r0, [r3, #0]
    2752:	685b      	ldr	r3, [r3, #4]
    2754:	1882      	adds	r2, r0, r2
    2756:	600a      	str	r2, [r1, #0]
    2758:	604b      	str	r3, [r1, #4]
    275a:	6021      	str	r1, [r4, #0]
    275c:	e024      	b.n	27a8 <_free_r+0x84>
    275e:	428a      	cmp	r2, r1
    2760:	d803      	bhi.n	276a <_free_r+0x46>
    2762:	0013      	movs	r3, r2
    2764:	685a      	ldr	r2, [r3, #4]
    2766:	2a00      	cmp	r2, #0
    2768:	d1f9      	bne.n	275e <_free_r+0x3a>
    276a:	681d      	ldr	r5, [r3, #0]
    276c:	195c      	adds	r4, r3, r5
    276e:	428c      	cmp	r4, r1
    2770:	d10b      	bne.n	278a <_free_r+0x66>
    2772:	6809      	ldr	r1, [r1, #0]
    2774:	1869      	adds	r1, r5, r1
    2776:	1858      	adds	r0, r3, r1
    2778:	6019      	str	r1, [r3, #0]
    277a:	4282      	cmp	r2, r0
    277c:	d114      	bne.n	27a8 <_free_r+0x84>
    277e:	6810      	ldr	r0, [r2, #0]
    2780:	6852      	ldr	r2, [r2, #4]
    2782:	1841      	adds	r1, r0, r1
    2784:	6019      	str	r1, [r3, #0]
    2786:	605a      	str	r2, [r3, #4]
    2788:	e00e      	b.n	27a8 <_free_r+0x84>
    278a:	428c      	cmp	r4, r1
    278c:	d902      	bls.n	2794 <_free_r+0x70>
    278e:	230c      	movs	r3, #12
    2790:	6003      	str	r3, [r0, #0]
    2792:	e009      	b.n	27a8 <_free_r+0x84>
    2794:	6808      	ldr	r0, [r1, #0]
    2796:	180c      	adds	r4, r1, r0
    2798:	42a2      	cmp	r2, r4
    279a:	d103      	bne.n	27a4 <_free_r+0x80>
    279c:	6814      	ldr	r4, [r2, #0]
    279e:	6852      	ldr	r2, [r2, #4]
    27a0:	1820      	adds	r0, r4, r0
    27a2:	6008      	str	r0, [r1, #0]
    27a4:	604a      	str	r2, [r1, #4]
    27a6:	6059      	str	r1, [r3, #4]
    27a8:	bd30      	pop	{r4, r5, pc}
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	200000cc 	.word	0x200000cc

000027b0 <_malloc_r>:
    27b0:	2303      	movs	r3, #3
    27b2:	b570      	push	{r4, r5, r6, lr}
    27b4:	1ccd      	adds	r5, r1, #3
    27b6:	439d      	bics	r5, r3
    27b8:	3508      	adds	r5, #8
    27ba:	0006      	movs	r6, r0
    27bc:	2d0c      	cmp	r5, #12
    27be:	d201      	bcs.n	27c4 <_malloc_r+0x14>
    27c0:	250c      	movs	r5, #12
    27c2:	e005      	b.n	27d0 <_malloc_r+0x20>
    27c4:	2d00      	cmp	r5, #0
    27c6:	da03      	bge.n	27d0 <_malloc_r+0x20>
    27c8:	230c      	movs	r3, #12
    27ca:	2000      	movs	r0, #0
    27cc:	6033      	str	r3, [r6, #0]
    27ce:	e040      	b.n	2852 <_malloc_r+0xa2>
    27d0:	42a9      	cmp	r1, r5
    27d2:	d8f9      	bhi.n	27c8 <_malloc_r+0x18>
    27d4:	4b1f      	ldr	r3, [pc, #124]	; (2854 <_malloc_r+0xa4>)
    27d6:	681c      	ldr	r4, [r3, #0]
    27d8:	001a      	movs	r2, r3
    27da:	0021      	movs	r1, r4
    27dc:	2900      	cmp	r1, #0
    27de:	d013      	beq.n	2808 <_malloc_r+0x58>
    27e0:	680b      	ldr	r3, [r1, #0]
    27e2:	1b5b      	subs	r3, r3, r5
    27e4:	d40d      	bmi.n	2802 <_malloc_r+0x52>
    27e6:	2b0b      	cmp	r3, #11
    27e8:	d902      	bls.n	27f0 <_malloc_r+0x40>
    27ea:	600b      	str	r3, [r1, #0]
    27ec:	18cc      	adds	r4, r1, r3
    27ee:	e01e      	b.n	282e <_malloc_r+0x7e>
    27f0:	428c      	cmp	r4, r1
    27f2:	d102      	bne.n	27fa <_malloc_r+0x4a>
    27f4:	6863      	ldr	r3, [r4, #4]
    27f6:	6013      	str	r3, [r2, #0]
    27f8:	e01a      	b.n	2830 <_malloc_r+0x80>
    27fa:	684b      	ldr	r3, [r1, #4]
    27fc:	6063      	str	r3, [r4, #4]
    27fe:	000c      	movs	r4, r1
    2800:	e016      	b.n	2830 <_malloc_r+0x80>
    2802:	000c      	movs	r4, r1
    2804:	6849      	ldr	r1, [r1, #4]
    2806:	e7e9      	b.n	27dc <_malloc_r+0x2c>
    2808:	4c13      	ldr	r4, [pc, #76]	; (2858 <_malloc_r+0xa8>)
    280a:	6823      	ldr	r3, [r4, #0]
    280c:	2b00      	cmp	r3, #0
    280e:	d103      	bne.n	2818 <_malloc_r+0x68>
    2810:	0030      	movs	r0, r6
    2812:	f000 f823 	bl	285c <_sbrk_r>
    2816:	6020      	str	r0, [r4, #0]
    2818:	0029      	movs	r1, r5
    281a:	0030      	movs	r0, r6
    281c:	f000 f81e 	bl	285c <_sbrk_r>
    2820:	1c43      	adds	r3, r0, #1
    2822:	d0d1      	beq.n	27c8 <_malloc_r+0x18>
    2824:	2303      	movs	r3, #3
    2826:	1cc4      	adds	r4, r0, #3
    2828:	439c      	bics	r4, r3
    282a:	42a0      	cmp	r0, r4
    282c:	d10a      	bne.n	2844 <_malloc_r+0x94>
    282e:	6025      	str	r5, [r4, #0]
    2830:	0020      	movs	r0, r4
    2832:	2207      	movs	r2, #7
    2834:	300b      	adds	r0, #11
    2836:	1d23      	adds	r3, r4, #4
    2838:	4390      	bics	r0, r2
    283a:	1ac3      	subs	r3, r0, r3
    283c:	d009      	beq.n	2852 <_malloc_r+0xa2>
    283e:	425a      	negs	r2, r3
    2840:	50e2      	str	r2, [r4, r3]
    2842:	e006      	b.n	2852 <_malloc_r+0xa2>
    2844:	1a21      	subs	r1, r4, r0
    2846:	0030      	movs	r0, r6
    2848:	f000 f808 	bl	285c <_sbrk_r>
    284c:	1c43      	adds	r3, r0, #1
    284e:	d1ee      	bne.n	282e <_malloc_r+0x7e>
    2850:	e7ba      	b.n	27c8 <_malloc_r+0x18>
    2852:	bd70      	pop	{r4, r5, r6, pc}
    2854:	200000cc 	.word	0x200000cc
    2858:	200000c8 	.word	0x200000c8

0000285c <_sbrk_r>:
    285c:	2300      	movs	r3, #0
    285e:	b570      	push	{r4, r5, r6, lr}
    2860:	4c06      	ldr	r4, [pc, #24]	; (287c <_sbrk_r+0x20>)
    2862:	0005      	movs	r5, r0
    2864:	0008      	movs	r0, r1
    2866:	6023      	str	r3, [r4, #0]
    2868:	f7ff fbb2 	bl	1fd0 <_sbrk>
    286c:	1c43      	adds	r3, r0, #1
    286e:	d103      	bne.n	2878 <_sbrk_r+0x1c>
    2870:	6823      	ldr	r3, [r4, #0]
    2872:	2b00      	cmp	r3, #0
    2874:	d000      	beq.n	2878 <_sbrk_r+0x1c>
    2876:	602b      	str	r3, [r5, #0]
    2878:	bd70      	pop	{r4, r5, r6, pc}
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	20000298 	.word	0x20000298

00002880 <__sread>:
    2880:	b570      	push	{r4, r5, r6, lr}
    2882:	000c      	movs	r4, r1
    2884:	250e      	movs	r5, #14
    2886:	5f49      	ldrsh	r1, [r1, r5]
    2888:	f000 f892 	bl	29b0 <_read_r>
    288c:	2800      	cmp	r0, #0
    288e:	db03      	blt.n	2898 <__sread+0x18>
    2890:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2892:	181b      	adds	r3, r3, r0
    2894:	6563      	str	r3, [r4, #84]	; 0x54
    2896:	e003      	b.n	28a0 <__sread+0x20>
    2898:	89a2      	ldrh	r2, [r4, #12]
    289a:	4b02      	ldr	r3, [pc, #8]	; (28a4 <__sread+0x24>)
    289c:	4013      	ands	r3, r2
    289e:	81a3      	strh	r3, [r4, #12]
    28a0:	bd70      	pop	{r4, r5, r6, pc}
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	ffffefff 	.word	0xffffefff

000028a8 <__swrite>:
    28a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28aa:	001f      	movs	r7, r3
    28ac:	898b      	ldrh	r3, [r1, #12]
    28ae:	0005      	movs	r5, r0
    28b0:	000c      	movs	r4, r1
    28b2:	0016      	movs	r6, r2
    28b4:	05db      	lsls	r3, r3, #23
    28b6:	d505      	bpl.n	28c4 <__swrite+0x1c>
    28b8:	230e      	movs	r3, #14
    28ba:	5ec9      	ldrsh	r1, [r1, r3]
    28bc:	2200      	movs	r2, #0
    28be:	2302      	movs	r3, #2
    28c0:	f000 f862 	bl	2988 <_lseek_r>
    28c4:	89a2      	ldrh	r2, [r4, #12]
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <__swrite+0x34>)
    28c8:	0028      	movs	r0, r5
    28ca:	4013      	ands	r3, r2
    28cc:	81a3      	strh	r3, [r4, #12]
    28ce:	0032      	movs	r2, r6
    28d0:	230e      	movs	r3, #14
    28d2:	5ee1      	ldrsh	r1, [r4, r3]
    28d4:	003b      	movs	r3, r7
    28d6:	f000 f81f 	bl	2918 <_write_r>
    28da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28dc:	ffffefff 	.word	0xffffefff

000028e0 <__sseek>:
    28e0:	b570      	push	{r4, r5, r6, lr}
    28e2:	000c      	movs	r4, r1
    28e4:	250e      	movs	r5, #14
    28e6:	5f49      	ldrsh	r1, [r1, r5]
    28e8:	f000 f84e 	bl	2988 <_lseek_r>
    28ec:	89a3      	ldrh	r3, [r4, #12]
    28ee:	1c42      	adds	r2, r0, #1
    28f0:	d103      	bne.n	28fa <__sseek+0x1a>
    28f2:	4a05      	ldr	r2, [pc, #20]	; (2908 <__sseek+0x28>)
    28f4:	4013      	ands	r3, r2
    28f6:	81a3      	strh	r3, [r4, #12]
    28f8:	e004      	b.n	2904 <__sseek+0x24>
    28fa:	2280      	movs	r2, #128	; 0x80
    28fc:	0152      	lsls	r2, r2, #5
    28fe:	4313      	orrs	r3, r2
    2900:	81a3      	strh	r3, [r4, #12]
    2902:	6560      	str	r0, [r4, #84]	; 0x54
    2904:	bd70      	pop	{r4, r5, r6, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	ffffefff 	.word	0xffffefff

0000290c <__sclose>:
    290c:	b510      	push	{r4, lr}
    290e:	230e      	movs	r3, #14
    2910:	5ec9      	ldrsh	r1, [r1, r3]
    2912:	f000 f815 	bl	2940 <_close_r>
    2916:	bd10      	pop	{r4, pc}

00002918 <_write_r>:
    2918:	b570      	push	{r4, r5, r6, lr}
    291a:	0005      	movs	r5, r0
    291c:	0008      	movs	r0, r1
    291e:	0011      	movs	r1, r2
    2920:	2200      	movs	r2, #0
    2922:	4c06      	ldr	r4, [pc, #24]	; (293c <_write_r+0x24>)
    2924:	6022      	str	r2, [r4, #0]
    2926:	001a      	movs	r2, r3
    2928:	f7fe ffe0 	bl	18ec <_write>
    292c:	1c43      	adds	r3, r0, #1
    292e:	d103      	bne.n	2938 <_write_r+0x20>
    2930:	6823      	ldr	r3, [r4, #0]
    2932:	2b00      	cmp	r3, #0
    2934:	d000      	beq.n	2938 <_write_r+0x20>
    2936:	602b      	str	r3, [r5, #0]
    2938:	bd70      	pop	{r4, r5, r6, pc}
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	20000298 	.word	0x20000298

00002940 <_close_r>:
    2940:	2300      	movs	r3, #0
    2942:	b570      	push	{r4, r5, r6, lr}
    2944:	4c06      	ldr	r4, [pc, #24]	; (2960 <_close_r+0x20>)
    2946:	0005      	movs	r5, r0
    2948:	0008      	movs	r0, r1
    294a:	6023      	str	r3, [r4, #0]
    294c:	f7ff fb52 	bl	1ff4 <_close>
    2950:	1c43      	adds	r3, r0, #1
    2952:	d103      	bne.n	295c <_close_r+0x1c>
    2954:	6823      	ldr	r3, [r4, #0]
    2956:	2b00      	cmp	r3, #0
    2958:	d000      	beq.n	295c <_close_r+0x1c>
    295a:	602b      	str	r3, [r5, #0]
    295c:	bd70      	pop	{r4, r5, r6, pc}
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	20000298 	.word	0x20000298

00002964 <_fstat_r>:
    2964:	2300      	movs	r3, #0
    2966:	b570      	push	{r4, r5, r6, lr}
    2968:	4c06      	ldr	r4, [pc, #24]	; (2984 <_fstat_r+0x20>)
    296a:	0005      	movs	r5, r0
    296c:	0008      	movs	r0, r1
    296e:	0011      	movs	r1, r2
    2970:	6023      	str	r3, [r4, #0]
    2972:	f7ff fb43 	bl	1ffc <_fstat>
    2976:	1c43      	adds	r3, r0, #1
    2978:	d103      	bne.n	2982 <_fstat_r+0x1e>
    297a:	6823      	ldr	r3, [r4, #0]
    297c:	2b00      	cmp	r3, #0
    297e:	d000      	beq.n	2982 <_fstat_r+0x1e>
    2980:	602b      	str	r3, [r5, #0]
    2982:	bd70      	pop	{r4, r5, r6, pc}
    2984:	20000298 	.word	0x20000298

00002988 <_lseek_r>:
    2988:	b570      	push	{r4, r5, r6, lr}
    298a:	0005      	movs	r5, r0
    298c:	0008      	movs	r0, r1
    298e:	0011      	movs	r1, r2
    2990:	2200      	movs	r2, #0
    2992:	4c06      	ldr	r4, [pc, #24]	; (29ac <_lseek_r+0x24>)
    2994:	6022      	str	r2, [r4, #0]
    2996:	001a      	movs	r2, r3
    2998:	f7ff fb36 	bl	2008 <_lseek>
    299c:	1c43      	adds	r3, r0, #1
    299e:	d103      	bne.n	29a8 <_lseek_r+0x20>
    29a0:	6823      	ldr	r3, [r4, #0]
    29a2:	2b00      	cmp	r3, #0
    29a4:	d000      	beq.n	29a8 <_lseek_r+0x20>
    29a6:	602b      	str	r3, [r5, #0]
    29a8:	bd70      	pop	{r4, r5, r6, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	20000298 	.word	0x20000298

000029b0 <_read_r>:
    29b0:	b570      	push	{r4, r5, r6, lr}
    29b2:	0005      	movs	r5, r0
    29b4:	0008      	movs	r0, r1
    29b6:	0011      	movs	r1, r2
    29b8:	2200      	movs	r2, #0
    29ba:	4c06      	ldr	r4, [pc, #24]	; (29d4 <_read_r+0x24>)
    29bc:	6022      	str	r2, [r4, #0]
    29be:	001a      	movs	r2, r3
    29c0:	f7fe ff74 	bl	18ac <_read>
    29c4:	1c43      	adds	r3, r0, #1
    29c6:	d103      	bne.n	29d0 <_read_r+0x20>
    29c8:	6823      	ldr	r3, [r4, #0]
    29ca:	2b00      	cmp	r3, #0
    29cc:	d000      	beq.n	29d0 <_read_r+0x20>
    29ce:	602b      	str	r3, [r5, #0]
    29d0:	bd70      	pop	{r4, r5, r6, pc}
    29d2:	46c0      	nop			; (mov r8, r8)
    29d4:	20000298 	.word	0x20000298
    29d8:	000007ce 	.word	0x000007ce
    29dc:	000007ce 	.word	0x000007ce
    29e0:	000007c4 	.word	0x000007c4
    29e4:	000007ce 	.word	0x000007ce
    29e8:	000007c4 	.word	0x000007c4
    29ec:	000007aa 	.word	0x000007aa
    29f0:	000007aa 	.word	0x000007aa
    29f4:	000007ce 	.word	0x000007ce
    29f8:	000007ce 	.word	0x000007ce
    29fc:	000007ce 	.word	0x000007ce
    2a00:	000007ce 	.word	0x000007ce
    2a04:	000007ce 	.word	0x000007ce
    2a08:	000007ce 	.word	0x000007ce
    2a0c:	000007ce 	.word	0x000007ce
    2a10:	000007ce 	.word	0x000007ce
    2a14:	000007ce 	.word	0x000007ce
    2a18:	000007ce 	.word	0x000007ce
    2a1c:	000007ce 	.word	0x000007ce
    2a20:	000007ce 	.word	0x000007ce
    2a24:	000007ce 	.word	0x000007ce
    2a28:	000007ce 	.word	0x000007ce
    2a2c:	000007ce 	.word	0x000007ce
    2a30:	000007ce 	.word	0x000007ce
    2a34:	000007ce 	.word	0x000007ce
    2a38:	000007ce 	.word	0x000007ce
    2a3c:	000007ce 	.word	0x000007ce
    2a40:	000007c4 	.word	0x000007c4
    2a44:	000007ce 	.word	0x000007ce
    2a48:	000007c4 	.word	0x000007c4
    2a4c:	000007ce 	.word	0x000007ce
    2a50:	000007ce 	.word	0x000007ce
    2a54:	000007ce 	.word	0x000007ce
    2a58:	000007ce 	.word	0x000007ce
    2a5c:	000007ce 	.word	0x000007ce
    2a60:	000007ce 	.word	0x000007ce
    2a64:	000007ce 	.word	0x000007ce
    2a68:	000007ce 	.word	0x000007ce
    2a6c:	000007ce 	.word	0x000007ce
    2a70:	000007ce 	.word	0x000007ce
    2a74:	000007ce 	.word	0x000007ce
    2a78:	000007ce 	.word	0x000007ce
    2a7c:	000007ce 	.word	0x000007ce
    2a80:	000007ce 	.word	0x000007ce
    2a84:	000007ce 	.word	0x000007ce
    2a88:	000007ce 	.word	0x000007ce
    2a8c:	000007ce 	.word	0x000007ce
    2a90:	000007ce 	.word	0x000007ce
    2a94:	000007ce 	.word	0x000007ce
    2a98:	000007ce 	.word	0x000007ce
    2a9c:	000007ce 	.word	0x000007ce
    2aa0:	000007ce 	.word	0x000007ce
    2aa4:	000007ce 	.word	0x000007ce
    2aa8:	000007ce 	.word	0x000007ce
    2aac:	000007ce 	.word	0x000007ce
    2ab0:	000007ce 	.word	0x000007ce
    2ab4:	000007ce 	.word	0x000007ce
    2ab8:	000007ce 	.word	0x000007ce
    2abc:	000007ce 	.word	0x000007ce
    2ac0:	000007ce 	.word	0x000007ce
    2ac4:	000007ce 	.word	0x000007ce
    2ac8:	000007ce 	.word	0x000007ce
    2acc:	000007ce 	.word	0x000007ce
    2ad0:	000007ce 	.word	0x000007ce
    2ad4:	000007ce 	.word	0x000007ce
    2ad8:	000007c4 	.word	0x000007c4
    2adc:	000007c4 	.word	0x000007c4
    2ae0:	000007d6 	.word	0x000007d6
    2ae4:	000007d6 	.word	0x000007d6
    2ae8:	000007d6 	.word	0x000007d6
    2aec:	000007d6 	.word	0x000007d6
    2af0:	42000400 	.word	0x42000400
    2af4:	42000800 	.word	0x42000800
    2af8:	42000c00 	.word	0x42000c00
    2afc:	42001000 	.word	0x42001000
    2b00:	42001400 	.word	0x42001400
    2b04:	42001800 	.word	0x42001800
    2b08:	0c0b0a09 	.word	0x0c0b0a09
    2b0c:	00000e0d 	.word	0x00000e0d
    2b10:	00001b3e 	.word	0x00001b3e
    2b14:	00001b3a 	.word	0x00001b3a
    2b18:	00001b3a 	.word	0x00001b3a
    2b1c:	00001b6c 	.word	0x00001b6c
    2b20:	00001b6c 	.word	0x00001b6c
    2b24:	00001b56 	.word	0x00001b56
    2b28:	00001b44 	.word	0x00001b44
    2b2c:	00001b5c 	.word	0x00001b5c
    2b30:	00000043 	.word	0x00000043

00002b34 <_global_impure_ptr>:
    2b34:	2000000c                                ... 

00002b38 <__sf_fake_stdin>:
	...

00002b58 <__sf_fake_stdout>:
	...

00002b78 <__sf_fake_stderr>:
	...

00002b98 <_init>:
    2b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b9e:	bc08      	pop	{r3}
    2ba0:	469e      	mov	lr, r3
    2ba2:	4770      	bx	lr

00002ba4 <__init_array_start>:
    2ba4:	000000e5 	.word	0x000000e5

00002ba8 <_fini>:
    2ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bae:	bc08      	pop	{r3}
    2bb0:	469e      	mov	lr, r3
    2bb2:	4770      	bx	lr

00002bb4 <__fini_array_start>:
    2bb4:	000000bd 	.word	0x000000bd
